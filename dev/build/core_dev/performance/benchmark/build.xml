<?xml version="1.0" encoding="utf-8"?>
<!--
/**
* Apache Ant's build file for core development performance benchmarking
*
* {license_notice}
*
* @category   dev
* @package    build
* @copyright  {copyright}
* @license    {license_link}
*/
-->
<project name="Core Development Performance Benchmarking" basedir="." xmlns:ac="antlib:net.sf.antcontrib">
    <property environment="env"/>
    <target name="deploy" depends="cleanup,checkout,credential_substitution,install-magento,sync-webnodes" description="Install Magento on multiple webnodes environment"/>

    <target name="cleanup" depends="_bootstrap" description="Cleanup environment">
        <ac:for list="${env.webnodes}" param="ip" delimiter="," parallel="true">
            <sequential>
                <antcall target="_remote-rmdir">
                    <param name="server_ip" value="@{ip}"/>
                    <param name="directory_path" value="${env.magento_dir}"/>
                </antcall>
            </sequential>
        </ac:for>
        <antcall target="_remote-drop-database"/>
        <antcall target="_remote-flush-memcache"/>
    </target>

    <target name="checkout" depends="_bootstrap" description="Checkout source code to the webnodes">
        <ac:for list="${env.webnodes}" param="ip" delimiter="," parallel="true">
            <sequential>
                <antcall target="_remote-git-checkout">
                    <param name="server_ip" value="@{ip}"/>
                </antcall>
            </sequential>
        </ac:for>
    </target>

    <target name="credential_substitution" depends="_bootstrap" description="Credentials substitution in configuration file from environment variables">
        <property name="remote_host" value="${env.webnode_login}:${env.webnode_password}@${env.webnode_initial}"/>

        <scp file="${remote_host}:${env.magento_dir}/dev/build/core_dev/performance/benchmark/etc/local.xml.template" todir="${basedir}" trust="yes"/>
        <scp file="${remote_host}:${env.magento_dir}/dev/build/core_dev/performance/benchmark/etc/enterprise/di.xml" todir="${basedir}" trust="yes"/>

        <fail unless="env.memcache_host" message="Environment variable 'memcache_host' must be defined"/>
        <fail unless="env.memcache_port" message="Environment variable 'memcache_port' must be defined"/>
        <replace file="local.xml.template">
            <replacefilter token="{{memcache_host}}" value="${env.memcache_host}"/>
            <replacefilter token="{{memcache_port}}" value="${env.memcache_port}"/>
        </replace>
        <replace file="di.xml">
            <replacefilter token="{{memcache_host}}" value="${env.memcache_host}"/>
            <replacefilter token="{{memcache_port}}" value="${env.memcache_port}"/>
        </replace>

        <scp file="${basedir}/local.xml.template" todir="${remote_host}:${env.magento_dir}/app/etc/local.xml.template" trust="yes"/>
        <scp file="${basedir}/di.xml" todir="${remote_host}:${env.magento_dir}/app/etc/enterprise/di.xml" trust="yes"/>

        <delete file="${basedir}/local.xml.template"/>
        <delete file="${basedir}/di.xml"/>
    </target>

    <target name="install-magento" depends="_bootstrap,_prepare-magento,_prepare-magento-ee,_remote-create-database,_remote-restore-database" description="Install Magento application on remote server">
        <sshexec host="${env.webnode_initial}"
             username="${env.webnode_login}"
             password="${env.webnode_password}"
             trust="yes"
             command="php -f ${env.magento_dir}/dev/shell/install.php -- --license_agreement_accepted 'yes' --locale 'en_US' --timezone 'America/Los_Angeles' --default_currency 'USD' --db_host '${env.mysql_host}' --db_name '${env.mysql_database}' --db_user '${env.mysql_user}' --db_pass '${env.mysql_password}' --use_secure 'no' --use_secure_admin 'no' --use_rewrites 'yes' --admin_lastname 'Admin' --admin_firstname 'Admin' --admin_email 'admin@example.com' --admin_no_form_key 'yes' --url '${env.base_url}' --secure_base_url '${env.secure_base_url}' --admin_frontname 'backend' --admin_username 'admin' --admin_password '123123q' 2>&amp;1"/>
    </target>

    <target name="sync-webnodes" depends="_bootstrap" description="Sync all necessary files between webnodes">
        <property name="remote_host" value="${env.webnode_login}:${env.webnode_password}@${env.webnode_initial}"/>
        <property name="tmp_dir" value="${basedir}/tmp"/>
        <mkdir dir="${tmp_dir}/media"/>
        <scp file="${remote_host}:${env.magento_dir}/app/etc/local.xml" todir="${tmp_dir}" trust="yes"/>
        <scp file="${remote_host}:${env.magento_dir}/app/etc/enterprise/di.xml" todir="${tmp_dir}" trust="yes"/>
        <scp file="${remote_host}:${env.magento_dir}/app/etc/enterprise/module.xml" todir="${tmp_dir}" trust="yes"/>
        <scp file="${remote_host}:${env.magento_dir}/pub/media/*" todir="${tmp_dir}/media" trust="yes"/>

        <ac:for list="${env.webnodes}" param="ip" delimiter="," parallel="true">
            <sequential>
                <ac:var name="host" value="@{ip}"/>
                <ac:if>
                    <equals arg1="${host}" arg2="${env.webnode_initial}" />
                    <then>
                        <echo message="There is no need to copy files from ${host} to ${env.webnode_initial} :)" />
                    </then>
                    <else>
                        <scp file="${tmp_dir}/local.xml" todir="${env.webnode_login}:${env.webnode_password}@${host}:${env.magento_dir}/app/etc/local.xml" trust="yes"/>
                        <scp file="${tmp_dir}/di.xml" todir="${env.webnode_login}:${env.webnode_password}@${host}:${env.magento_dir}/app/etc/enterprise/di.xml" trust="yes"/>
                        <scp file="${tmp_dir}/module.xml" todir="${env.webnode_login}:${env.webnode_password}@${host}:${env.magento_dir}/app/etc/enterprise/module.xml" trust="yes"/>
                        <scp todir="${env.webnode_login}:${env.webnode_password}@${host}:${env.magento_dir}/pub/media" trust="yes">
                            <fileset dir="${tmp_dir}/media"/>
                        </scp>
                    </else>
                </ac:if>
                <ac:var name="host" unset="true"/>
            </sequential>
        </ac:for>

        <delete includeEmptyDirs="true">
            <fileset dir="${tmp_dir}"/>
        </delete>
    </target>

    <target name="_bootstrap" description="Check whether common parameters is set">
        <fail unless="env.webnodes" message="Variable 'webnodes' must be defined"/>
        <fail unless="env.webnode_initial" message="Variable 'webnode_initial' must be defined"/>
        <fail unless="env.webnode_login" message="Variable 'webnode_login' must be defined"/>
        <fail unless="env.webnode_password" message="Variable 'webnode_password' must be defined"/>
        <fail unless="env.magento_dir" message="Variable 'magento_dir' must be defined"/>
    </target>

    <target name="_prepare-magento" description="Prepare Magento for installation">
        <ac:for list="${env.webnodes}" param="ip" delimiter=",">
            <sequential>
                <antcall target="_remote-code-prepare">
                    <param name="server_ip" value="@{ip}"/>
                </antcall>
            </sequential>
        </ac:for>
    </target>

    <target name="_prepare-magento-ee" description="Prepare Enterprise Edition Modules">
        <sshexec host="${env.webnode_initial}"
             username="${env.webnode_login}"
             password="${env.webnode_password}"
             trust="yes"
             command="cp ${env.magento_dir}/app/etc/enterprise/module.xml.dist ${env.magento_dir}/app/etc/enterprise/module.xml"/>
    </target>

    <target name="_remote-code-prepare" description="Set permissions for magento directories and files on remote machine">
        <sshexec host="${server_ip}"
             username="${env.webnode_login}"
             password="${env.webnode_password}"
             trust="yes"
             command="chmod a+w -R ${env.magento_dir}/app/etc ${env.magento_dir}/pub/media ${env.magento_dir}/pub/static ${env.magento_dir}/var"/>
    </target>

    <target name="_remote-git-checkout" description="Checkout specified git repository branch on remote machine">
        <fail unless="env.git_repository" message="Variable 'git_repository' must be defined"/>
        <fail unless="env.git_branch" message="Variable 'git_branch' must be defined"/>
        <sshexec host="${server_ip}"
             username="${env.webnode_login}"
             password="${env.webnode_password}"
             trust="yes"
             command="git clone -b ${env.git_branch} ${env.git_repository} ${env.magento_dir}"/>
    </target>

    <target name="_remote-rmdir" description="Delete specified directory recursively">
        <fail unless="directory_path" message="Variable 'directory_path' must be defined"/>
        <sshexec host="${server_ip}"
             username="${env.webnode_login}"
             password="${env.webnode_password}"
             trust="yes"
             command="rm -rf ${directory_path}"/>
    </target>

    <target name="_remote-flush-memcache" description="Invalidate all memcache items">
        <fail unless="env.memcache_host" message="Variable 'memcache_host' must be defined"/>
        <fail unless="env.memcache_port" message="Variable 'memcache_port' must be defined"/>
        <telnet server="${env.memcache_host}" port="${env.memcache_port}" timeout="20">
            <read/>
            <write>flush_all</write>
            <read>OK</read>
        </telnet>
    </target>

    <target name="_remote-drop-database" depends="_database-credentials-check" description="Drop specified MySQL database">
        <sshexec host="${env.mysql_host}"
             username="${env.webnode_login}"
             password="${env.webnode_password}"
             trust="yes"
             command="mysql -u${env.mysql_user} -p${env.mysql_password} -e 'DROP DATABASE IF EXISTS ${env.mysql_database};'"/>
    </target>

    <target name="_remote-create-database" depends="_database-credentials-check" description="Create specified MySQL database">
        <sshexec host="${env.mysql_host}"
             username="${env.webnode_login}"
             password="${env.webnode_password}"
             trust="yes"
             command="mysql -u${env.mysql_user} -p${env.mysql_password} -e 'CREATE DATABASE ${env.mysql_database};'"/>
    </target>

    <target name="_remote-restore-database" depends="_database-credentials-check" description="Restore specified MySQL database">
        <fail unless="env.mysql_db_dump_file" message="Variable 'mysql_db_dump_file' must be defined"/>
        <sshexec host="${env.mysql_host}"
             username="${env.webnode_login}"
             password="${env.webnode_password}"
             trust="yes"
             command="mysql -u${env.mysql_user} -p${env.mysql_password} ${env.mysql_database} &lt; ${env.mysql_db_dump_file}"/>
    </target>

    <target name="_database-credentials-check" description="Check whether common database parameters is set">
        <fail unless="env.mysql_host" message="Variable 'mysql_host' must be defined"/>
        <fail unless="env.mysql_user" message="Variable 'mysql_user' must be defined"/>
        <fail unless="env.mysql_password" message="Variable 'mysql_password' must be defined"/>
        <fail unless="env.mysql_database" message="Variable 'mysql_database' must be defined"/>
    </target>
</project>
