<?php
/**
 * {license_notice}
 *
 * @category    Magento
 * @package     Magento_Core
 * @subpackage  integration_tests
 * @copyright   {copyright}
 * @license     {license_link}
 */

namespace Magento\Session;

class SessionManagerSaveTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @param string $saveMethod
     * @param string $iniValue
     * @param array $params
     * @dataProvider sessionSaveMethodDataProvider
     * @magentoAppIsolation enabled
     */
    public function testSessionSaveMethod($saveMethod, $iniValue, array $params)
    {
        $this->markTestIncomplete('Test is disabled and will be finished as technical debt');

        // depending on configuration some values cannot be set as default save session handlers.
        // in such cases warnings will be generated by php and test will fail
        $origErrorRep = error_reporting(E_ALL ^ E_WARNING);
        $origSessionHandler = ini_set('session.save_handler', $iniValue);
        if ($iniValue && (ini_get('session.save_handler') != $iniValue)) {
            ini_set('session.save_handler', $origSessionHandler);
            error_reporting($origErrorRep);
            $this->markTestSkipped("Can't  set '$iniValue' as session save handler");
        }
        ini_set('session.save_handler', $origSessionHandler);

        $objectManger = \Magento\TestFramework\Helper\Bootstrap::getObjectManager();

        $params = array_merge(array('saveMethod' => $saveMethod), $params);
        /** @var \Magento\Core\Model\Session\Config $config */
        $config = $objectManger->create('Magento\Core\Model\Session\Config', $params);

        /** @var \Magento\Session\SessionManager $sessionManager */
        $sessionManager = $objectManger->create('Magento\Session\SessionManager', array('sessionConfig' => $config));
        $sessionManager->start();

        $this->assertEquals(ini_get('session.save_handler'), $iniValue);
    }

    /**
     * @return array
     */
    public function sessionSaveMethodDataProvider()
    {
        $cases = array(
            'db'           => array('db', 'user', array()),
            'eaccelerator' => array('eaccelerator', 'eaccelerator', array())
        );

        if (defined('MEMCACHE_SESSION_SAVE_PATH')) {
            $cases = array_merge($cases, array(
                'memcache' => array('memcache', 'memcache', array('savePath' => MEMCACHE_SESSION_SAVE_PATH))
            ));
        }

        if (defined('MEMCACHED_SESSION_SAVE_PATH')) {
            $cases = array_merge($cases, array(
                'memcached' => array('memcached', 'memcached', array('savePath' => MEMCACHED_SESSION_SAVE_PATH))
            ));
        }

        return $cases;
    }

    /**
     * @param string $saveMethod
     * @dataProvider sessionSaveMethodWarningDataProvider
     * @magentoAppIsolation enabled
     */
    public function testSessionSaveMethodWarning($saveMethod)
    {
        $objectManager = \Magento\TestFramework\Helper\Bootstrap::getObjectManager();

        //TODO We got no exception but Error/Warning
        try {
            /** @var \Magento\Core\Model\Session\Config $config */
            $objectManager->create('Magento\Core\Model\Session\Config', array('saveMethod' => $saveMethod));
            $this->fail('Expected warning is not thrown');
        } catch (\InvalidArgumentException $e) {
            //do nothing
        }
    }

    /**
     * @return array
     */
    public function sessionSaveMethodWarningDataProvider()
    {
        return array(
            'empty' => array('', '', array()),
            'dummy' => array('dummy', '', array()),
        );
    }
}
