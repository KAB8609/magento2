<div>
    <form id="product-search-form" method="post" action="">
        Product Name:
        <input type="text" name="name" id="product-name" value=""/>
        <input type="submit" value="search"/>
        <input type="reset" value="reset"/>
    </form>
</div>

<div id="products-grid" style="overflow: hidden;"></div>
<script type="text/javascript">
var ProductGrid = {
    init: function(){
        this.filter = null;
        // define the "Product" record, mapping json data to record fields
        var Product = Ext.data.Record.create([
            {name: 'product_id', mapping: 'product_id'},
            {name: 'name', mapping: 'name'},
            {name: 'price', mapping: 'price', type: 'int'},
            {name: 'category_name', mapping: 'category_id'},
            {name: 'weight', mapping: 'weight'}
        ]);

        // create reader that reads into Product records
        var reader = new Ext.data.JsonReader({
            root: 'items',
            totalProperty: 'totalRecords',
            id: 'product_id'
        }, Product);


        // create the Data Store
        this.ds = new Ext.data.Store({
            proxy: new Ext.data.HttpProxy({url: '<?=Ecom::getBaseUrl()?>/ecom_catalog/product/gridData/category/<?=$this->category?>/'}),
            reader: reader,
            remoteSort: true
        });

        this.ds.setDefaultSort('product_id', 'desc');

        // the DefaultColumnModel expects this blob to define columns. It can be extended to provide
        // custom or reusable ColumnModels
        var colModel = new Ext.grid.ColumnModel([
            {header: "ID#", width: 50, sortable: true, locked:false, dataIndex: 'product_id'},
            {header: "Name", sortable: true, dataIndex: 'name'},
            {header: "Price", width: 120, sortable: true, renderer: Ext.util.Format.usMoney, dataIndex: 'price'},
            {header: "Weight", width: 85, sortable: true, dataIndex: 'weight'}
        ]);
        
        //colModel.defaultSortable = true;
        // create the Grid
        this.grid = new Ext.grid.Grid('products-grid', {
            ds: this.ds,
            cm: colModel,
            autoWidth:true,
            autoSizeColumns:true,
            autoHeight:true
        });

        this.grid.render();

        this.grid.addListener('rowdblclick', this.openRow, this);

        var gridHead = this.grid.getView().getHeaderPanel(true);
        
        var paging = new Ext.PagingToolbar(gridHead, this.ds, {pageSize: 20});

        // create a floating label with display info
        var displayInfo = gridHead.createChild({cls:'paging-info'});

        var ds = this.ds;
        this.ds.on('load', function(){
            var count = ds.getCount();
            var msg = count == 0 ?
                "No products to display" :
                String.format('Displaying products {0} - {1} of {2}', paging.cursor+1, paging.cursor+count, ds.getTotalCount());
            displayInfo.update(msg);
        });

        this.ds.load({params:{start:0, limit:20}});
        this.ds.addListener('beforeload', this.addGridState, this);
    },

    search: function(e){
        e.stopEvent();
        var pname = Ext.get('product-name').dom.value;
        if(!pname){
            alert("Empty product name!");
            return;
        }
        this.filter = pname;
        this.ds.load({params:{'name': pname, 'start': 0}});
    },

    reset: function(e){
        e.stopEvent();
        Ext.get('product-name').dom.value = '';
        this.filter = null;
        this.ds.load({params:{'start': 0}});
    },

    addGridState: function(dsObj, options){
        if (this.filter) {
            options.params.name=this.filter;
        }        
    },

    openRow: function(grid, rowIndex){
        var productId = grid.dataSource.getAt(rowIndex).id;
        var mainLayout = Admin.getLayout();
        var cardElementId = 'catalog_productsView'+productId;
        mainLayout.beginUpdate();
        if (!Ext.get(cardElementId)) {
            var divHolder = document.createElement('div');
            divHolder.id = cardElementId;
            document.body.appendChild(divHolder);
        }
        mainLayout.add('center', new Ext.ContentPanel(
            cardElementId, 
            {
                closable: true, 
                title:'Product # ' + productId, 
                fitToFrame: true, 
                url:BASE_URL + '/ecom_catalog/product/view/product/'+productId, 
                loadOnce: true 
            }));
        mainLayout.endUpdate();

        // Add new node to tree navigation
        if (ProductNavigation) {
            ProductNavigation.addRecentProduct(productId);
        }
    }
};

ProductGrid.init();

Ext.EventManager.on('product-search-form', 'submit', ProductGrid.search, ProductGrid, true);
Ext.EventManager.on('product-search-form', 'reset', ProductGrid.reset, ProductGrid, true);
</script>