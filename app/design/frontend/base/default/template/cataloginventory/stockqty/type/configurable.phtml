<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     base_default
 * @copyright   Copyright (c) 2009 Irubin Consulting Inc. DBA Varien (http://www.varien.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<?php
/**
 * @see Mage_CatalogInventory_Block_Stockqty_Type_Configurable
 */
?>
<span id="<?php echo $this->getPlaceholderId() ?>" class="only-x-left no-display"></span>

<script type="text/javascript">
//<![CDATA[

if(typeof CatalogInventory == 'undefined') {
    var CatalogInventory = {};
}

CatalogInventory.Configurable = Class.create();
CatalogInventory.Configurable.prototype = {
    /**
     * Constructor
     */
    initialize: function(config){
        this.config = config;
        this.observersInstalled = false;
    },

    /**
     * Install event observers on input elements
     */
    installObserversNow: function(){
        if(this.observersInstalled){
            return true;
        }
        this.settings = $$('.super-attribute-select');
        this.settings.each(function(element){
            // assign attributeId
            var attributeId = element.id.replace(/[a-z]*/, '');
            if(attributeId && this.config.productsByAttrOpt[attributeId]) {
                element.attributeId = attributeId;
            }
            // install event listener
            Event.observe(element, 'change', this.dispatchElementChanges.bind(this))
        }.bind(this));
        this.observersInstalled = (this.settings.length > 0);
        return this.observersInstalled;
    },

    /**
     * Install event observers on input elements after DOM is loaded
     */
    installObserversLazy: function(){
        if(this.observersInstalled){
            return true;
        }
        //Event.observe(window, 'load', this.installObserversNow.bind(this));
        Event.observe(document, 'dom:loaded', this.installObserversNow.bind(this));
        return false;
    },

    /**
     * Install event observers whether DOM is loaded or no
     */
    installObservers: function(){
        if(this.installObserversNow()){
            return true;
        }
        return this.installObserversLazy();
    },

    /**
     * Dispatch input element changes to element-oriented method
     */
    dispatchElementChanges: function(event){
        var element = Event.element(event);
        this.reflectElementChanges(element);
    },

    /**
     * Reflect input element changes on stock qty placeholder
     */
    reflectElementChanges: function(element) {
        this.updateStockQty();
    },

    /**
     * Update stock qty placeholder with new qty value
     */
    updatePlaceholder: function(qty){
        var placeholder = $(this.config.placeholderId);
        if(placeholder){
            placeholder.addClassName('no-display');
            placeholder.innerHTML = '<?php echo $this->__('Only %s left', '%s') ?>'.replace('%s', qty);
            if(qty > 0 && qty <= this.config.thresholdQty){
                placeholder.removeClassName('no-display');
            }
        }
    },

    /**
     * Update stock qty according to current input elements
     */
    updateStockQty: function(){
        if(!this.observersInstalled){
            this.updatePlaceholder(this.config.initialStockQty);
            return;
        }
        // initially match all child products
        var matchedProductIds = [];
        for(var productId in this.config.qtyByProductId){
            matchedProductIds.push(productId);
        }
        // iterate settings (select tags)
        for(var j = 0; j < this.settings.length; j++){
            var setting = this.settings[j];
            var selectedOptionId = setting.options[setting.selectedIndex].value;
            // process settings with selected option only
            if(!selectedOptionId){
                continue;
            }
            // look for products matching selected option
            var attributeId = setting.attributeId;  // setting.attributeId was set previously!
            var selectedOptionProducts = this.config.productsByAttrOpt[attributeId][selectedOptionId];
            // intersect matchedProductIds with selectedOptionProducts
            for(var i = matchedProductIds.length-1; i >= 0; i--){
                for(var ii = selectedOptionProducts.length-1; ii >= 0; ii--){
                    if(selectedOptionProducts[ii] == matchedProductIds[i]){
                        break;
                    }
                    if(ii == 0){
                        matchedProductIds.splice(i, 1);
                    }
                }
            }
        }
        // calculate total qty of matched products
        var qty = 0;
        for(var i = 0; i < matchedProductIds.length; i++){
            var productId = matchedProductIds[i];
            qty += parseFloat(this.config.qtyByProductId[productId]);
        }
        // update placeholder
        this.updatePlaceholder(qty);
    }
};

var catalogInventoryConfigurable = new CatalogInventory.Configurable(<?php echo $this->getJsonConfig() ?>);
catalogInventoryConfigurable.installObservers();
catalogInventoryConfigurable.updateStockQty();

//]]>
</script>
