<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category   design_default
 * @package    Mage
 * @copyright  Copyright (c) 2008 Irubin Consulting Inc. DBA Varien (http://www.varien.com)
 * @license    http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<?php
/**
 * Wysiwyg Images javascript
 *
 * @see Mage_Adminhtml_Block_Cms_Page_Edit_Wysiwyg_Images_Content
 */
?>
<script type="text/javascript">
var Wysiwyg = {};
Wysiwyg.Images = Class.create();
Wysiwyg.Images.prototype = {
    tree: null,
    currentNode: null,

    initialize: function () {
        //
    },

    setTree: function (tree) {
        this.tree = tree;
        this.currentNode = tree.getRootNode();
    },

    getTree: function (tree) {
        return this.tree;
    },

    selectFolder: function (node, event) {
        this.expandFolder(node, event);
        this.activateBlock('contents');

        new Ajax.Request('<?php echo $this->getContentsUrl() ?>', {
            parameters: {node: this.currentNode.id},
            evalJS: true,
            onSuccess: function(transport) {
                try {
                    this.onAjaxSuccess(transport);
                    $('contents').update(transport.responseText);
                    $$('input[id^=files-delete]').each(function(s) {
                        Event.observe(s.id, 'click', this.selectFile.bind(this));
                    }.bind(this));

                } catch(e) {
                    alert(e.message);
                }
            }.bind(this)
        });
    },

    selectFile: function (event) {
//        alert($$('input[id^=files-delete][checked=true]').size());
//        if (typeof event != 'undefined') {
//            this.current_folder = Event.findElement(event, 'div').id;
//        }
//        var blocks = ['navi','content','path'];
//        this.loadBlocks(blocks);

    },

    expandFolder: function (node, event) {
        this.currentNode = node;
        this.tree.selectPath(node.getPath());
        this.showElement('button_delete_folder');
    },

    upload: function() {
        this.activateBlock('contents-uploader');
        $$('div[class*="file-row complete"]').each(function(e) {
            $(e.id).remove();
        });
    },

    insert: function(src) {
        new Ajax.Request('<?php echo $this->getOnInsertUrl() ?>', {
            parameters: {url: src},
            onSuccess: function(transport) {
                try {
                    this.onAjaxSuccess(transport);
                    self.opener.document.getElementById('src').value = transport.responseText;
                    self.close();
                } catch (e) {
                    alert(e.message);
                }
            }.bind(this)
        });
    },

    newFolder: function() {
        var folderName = prompt('<?php echo $this->helper('cms')->__('New folder name') ?>:');
        if (!folderName) {
            return false;
        }
        new Ajax.Request('<?php echo $this->getNewfolderUrl() ?>', {
            parameters: {name: folderName},
            onSuccess: function(transport) {
                try {
                    this.onAjaxSuccess(transport);
                    if (transport.responseText.isJSON()) {
                        var response = transport.responseText.evalJSON()
                        var newNode = new Ext.tree.AsyncTreeNode({
                            text: response.name,
                            draggable:false,
                            id:response.id
                        });
                        this.currentNode.appendChild(newNode);
                    }
                } catch (e) {
                    alert(e.message);
                }
            }.bind(this)
        })
    },

    deleteFolder: function() {
        if (!confirm('<?php echo $this->helper('cms')->__('Are you sure you want to delete folder') ?>' + ' ' + this.currentNode.text + '?')) {
            return false;
        }
        new Ajax.Request('<?php echo $this->getDeletefolderUrl() ?>', {
            onSuccess: function(transport) {
                try {
                    this.onAjaxSuccess(transport);
                    var parent = this.currentNode.parentNode;
                    parent.removeChild(this.currentNode);
                    this.selectFolder(parent);
                }
                catch (e) {
                    alert(e.message);
                }
            }.bind(this)
        })
    },

    activateBlock: function(id) {
        $$('div [id^=contents]').each(this.hideElement);
        this.showElement(id);
    },

    hideElement: function(id) {
        $(id).addClassName('no-display');
        $(id).hide();
    },

    showElement: function(id) {
        $(id).removeClassName('no-display');
        $(id).show();
    },

    onAjaxSuccess: function(transport) {
        if (transport.responseText.isJSON()) {
            var response = transport.responseText.evalJSON()
            if (response.error) {
                throw response;
            } else if (response.ajaxExpired && response.ajaxRedirect) {
                setLocation(response.ajaxRedirect);
            }
        }
    },

    handleUploadComplete: function(files) {
        if (confirm('<?php echo $this->helper('cms')->__('Files upload completed. View uploded files?') ?>')) {
            this.selectFolder(this.currentNode);

        }
    }
}

Images = new Wysiwyg.Images();
</script>
