<?
/**
 * Template for Mage_Adminhtml_Block_Catalog_Product_Edit
 */
?>
<div class="content-header">
    <table cellspacing="0" class="grid-header">
        <tr>
            <td style="width:30%;"><h3><?=$this->getHeader()?></h3></td>
            <td class="a-right">
            <?=$this->getBackButtonHtml()?>
            <?=$this->getCancelButtonHtml()?>
            <?if($this->getProductId()):?>
                <?=$this->getDeleteButtonHtml()?>
            <?endif;?>
                <?=$this->getSaveButtonHtml()?>
            </td>
        </tr>
    </table>
</div>
<form action="<?=$this->getSaveUrl()?>" method="POST" id="product_edit_form">
<input type="hidden" name="_related_products" id="_related_products" value="">
<input type="hidden" name="_up_sell_products" id="_up_sell_products" value="">
<input type="hidden" name="_cross_sell_products" id="_cross_sell_products" value="">
</form>
<script type="text/javascript" language="javascript">
    var productForm = new varienForm('product_edit_form');
    function productDelete(){
        if(confirm('<?=__('Are you sure?')?>')){
            location.href = '<?=$this->getDeleteUrl()?>'
        }
    }
	var productLinksController = Class.create();
    
	productLinksController.prototype = {
		initialize: 			 function(fieldId, products, grid) {
			this.saveField = $(fieldId);
			this.saveFieldId = fieldId;
			this.products	 = $H(products);
			this.grid		 = grid;
			this.tabIndex  	 = 1000;
			this.grid.rowClickCallback = this.rowClick.bind(this);
    		this.grid.initRowCallback = this.rowInit.bind(this);
    		this.grid.checkboxCheckCallback = this.registerProduct.bind(this);
    		this.grid.rows.each(this.eachRow.bind(this));
			this.saveField.value = this.serializeObject(this.products);
			this.grid.reloadParams = {'products[]':this.products.keys()};
		},
		eachRow: 		 function(row) {
			this.rowInit(this.grid, row);
		},
		registerProduct: function(grid, element, checked) {
			if(checked){
	            if(element.inputElements) {
	            	this.products[element.value]={};
	                for(var i = 0; i < element.inputElements.length; i++) {
	               		element.inputElements[i].disabled = false;
	               		this.products[element.value][element.inputElements[i].name] = element.inputElements[i].value;
	                }
	            }
	        }
	        else{
	            if(element.inputElements){
	            	for(var i = 0; i < element.inputElements.length; i++) {
	                	element.inputElements[i].disabled = true;
	            	}
	            }
	            
	            this.products.remove(element.value);
	        }
	        
	        this.saveField.value = this.serializeObject(this.products);
	        this.grid.reloadParams = {'products[]':this.products.keys()};
		},
		serializeObject: function(object) {
			var myObject = Object.clone(object);
			myObject.each(function(pair) {
				myObject[pair.key] = encode_base64(Hash.toQueryString(pair.value));
			});
			
			return myObject.toQueryString();
		},
		rowClick: function(grid, event) {
			var trElement = Event.findElement(event, 'tr');
	        var isInput   = Event.element(event).tagName == 'INPUT';
	        if(trElement){
	            var checkbox = Element.getElementsBySelector(trElement, 'input');
	            if(checkbox[0]){
	                var checked = isInput ? checkbox[0].checked : !checkbox[0].checked;
	                this.grid.setCheckboxChecked(checkbox[0], checked);
	            }
	        }
		},
		inputChange:	 function(event) {
			var element = Event.element(event);
	        if(element && element.checkboxElement && element.checkboxElement.checked){
	            this.products[element.checkboxElement.value][element.name] = element.value;
	            this.saveField.value = this.serializeObject(this.products);
	        }
		},
		rowInit: 		 function(grid, row) {
			var checkbox = $(row).getElementsByClassName('checkbox')[0];
	        var inputs = $(row).getElementsByClassName('input-text');
	        if(checkbox && inputs.length > 0) {
	            checkbox.inputElements = inputs;
	            for(var i = 0; i < inputs.length; i++) {
	            	inputs[i].checkboxElement = checkbox;
	            	if(this.products[checkbox.value] && this.products[checkbox.value][inputs[i].name]) {
	            		inputs[i].value = this.products[checkbox.value][inputs[i].name];
	            	}
	            	inputs[i].disabled = !checkbox.checked;
	            	inputs[i].tabIndex = this.tabIndex++;
	                Event.observe(inputs[i],'keyup', this.inputChange.bind(this));
	            }
	        }
		}
	};
       
    <?if($_relatedGridJsObject=$this->getLayout()->getBlock('admin.related.products')->getJsObjectName()):?>  	
   	Event.observe(window, 'load', function() {
	 	 var controller = new productLinksController('_related_products', <?=$this->getRelatedProductsJSON()?>, <?=$_relatedGridJsObject?>);
	});   
	<?endif;?>
	<?if($_upsellGridJsObject=$this->getLayout()->getBlock('admin.upsell.products')->getJsObjectName()):?>  	
   	Event.observe(window, 'load', function() {
	 	 var controller = new productLinksController('_up_sell_products', <?=$this->getUpSellProductsJSON()?>, <?=$_upsellGridJsObject?>);
	});   
	<?endif;?>
	<?if($_crosssellGridJsObject=$this->getLayout()->getBlock('admin.crosssell.products')->getJsObjectName()):?>  	
   	Event.observe(window, 'load', function() {
	 	 var controller = new productLinksController('_cross_sell_products', <?=$this->getCrossSellProductsJSON()?>, <?=$_crosssellGridJsObject?>);
	});   
	<?endif;?>
</script>
