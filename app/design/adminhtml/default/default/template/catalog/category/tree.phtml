<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * @category   design_default
 * @package    Mage
 * @copyright  Copyright (c) 2008 Irubin Consulting Inc. DBA Varien (http://www.varien.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
?>
<div class="content-header left-col-block">
    <table cellspacing="0">
        <tr>
            <td><h3 class="icon-head head-categories"><?php echo Mage::helper('catalog')->__('Categories') ?></h3></td>
        </tr>
        <tr>
            <td class="form-buttons">
                <?php if ($this->getRoot()): ?>
                    <?php echo $this->getAddRootButtonHtml() ?>
                    <?php echo $this->getAddSubButtonHtml() ?>
                <?php endif; ?>
            </td>
        </tr>
    </table>
</div>
<?php echo $this->getStoreSwitcherHtml() ?>
<div>
    <table cellspacing="0">
        <tr>
            <td class="form-buttons">
                <?php if($this->getRoot()): ?>
                    <?php echo $this->getCollapseButtonHtml() ?>
                <?php endif; ?>
            </td>
            <td class="form-buttons">
                <?php if($this->getRoot()): ?>
                    <?php echo $this->getExpandButtonHtml() ?>
                <?php endif; ?>
            </td>
        </tr>
    </table>
</div>
<?php if ($this->getRoot()): ?>
<div style="margin-right:10px;">
<div id="tree-div" style="width:100%;overflow:auto;"></div>
</div>
<script type="text/javascript">
var tree;
var root;
var categoryLoader;

Ext.EventManager.onDocumentReady(function() {

    categoryLoader = new Ext.tree.TreeLoader({
       dataUrl: '<?php echo $this->getLoadTreeUrl() ?>'
    });

    categoryLoader.createNode = function(config) {
        var node;
        var _node = Object.clone(config);
        if (_node.children && !_node.children.length) {
            delete(_node.children);
            node = new Ext.tree.AsyncTreeNode(_node);
        } else {
            node = new Ext.tree.TreeNode(_node);
        }

        return node;
    };

    categoryLoader.buildHash = function(node)
    {
        var hash = {};

        hash = categoryLoader.toArray(node.attributes);

        if (node.childNodes.length>0 || (node.loaded==false && node.loading==false)) {
            hash['children'] = new Array;

            for (var i = 0, len = node.childNodes.length; i < len; i++) {
                if (!hash['children']) {
                    hash['children'] = new Array;
                }
            	hash['children'].push(categoryLoader.buildHash(node.childNodes[i]));
            }
        }

        return hash;
    };

    categoryLoader.toArray = function(attributes) {
        var data = {};
        for (var key in attributes) {
            var value = attributes[key];
            data[key] = value;
        }

        return data;
    };

    categoryLoader.on("beforeload", function(treeLoader, node) {
        treeLoader.baseParams.id = node.attributes.id;
        treeLoader.baseParams.store = node.attributes.store;
    });

    categoryLoader.on("load", function(treeLoader, node, config) {
        varienWindowOnload();
    });

    tree = new Ext.tree.TreePanel('tree-div', {
        animate:          false,
        loader:           categoryLoader,
        enableDD:         true,
        containerScroll:  true,
		selModel:         new Ext.tree.CheckNodeMultiSelectionModel(),
		rootVisible:      '<?php echo $this->getRoot()->getIsVisible() ?>',
		useAjax:          <?php echo $this->getUseAjax() ?>,
		switchTreeUrl:    '<?php echo $this->getSwitchTreeUrl() ?>',
		switchEditUrl:    '<?php echo $this->getSwitchedEditUrl() ?>',
		saveUrl:          '<?php echo $this->getSaveUrl() ?>',
		categoryContainer:$('content').getElementsBySelector('.main-col-inner')[0],
		currentNodeId:    <?php echo (int) $this->getCategoryId() ?>,
		cache:            {}
	});

	varienStoreSwitcher.storeSelectorClickCallback = tree.switchStore.bind(tree);

	// set the root node
	var parameters = {
        text:        '<?php echo htmlentities($this->getRoot()->getName()) ?>',
        draggable:   false,
        allowDrop:   <?php if ($this->getRoot()->getIsVisible()): ?>true<?php else : ?>false<?php endif; ?>,
        id:          <?php echo (int) $this->getRoot()->getId() ?>,
        expanded:    <?php echo (int) $this->getIsWasExpanded() ?>,
        store_id:    <?php echo (int) $this->getStore()->getId() ?>,
        category_id: <?php echo (int) $this->getCategoryId() ?>
    };

    tree.loadTree({parameters:parameters, data:<?php echo $this->getTreeJson() ?>}, true);

});

Ext.tree.TreePanel.prototype.loadTree = function(config, firstLoad)
{
    var parameters = config['parameters'];
    var data = config['data'];

    this.storeId = parameters['store_id'];

    if ((typeof parameters['root_visible']) != 'undefined') {
        this.rootVisible = parameters['root_visible']*1;
    }

    root = new Ext.tree.TreeNode(parameters);

    this.nodeHash = {};
    this.setRootNode(root);

    if (firstLoad) {
        this.addListener('click', categoryClick.createDelegate(this));
        this.addListener('beforenodedrop', categoryMove.createDelegate(this));
    }

    buildCategoryTree(root, data);
    this.el.dom.innerHTML = '';
    // render the tree
    this.render();
    if (parameters['expanded']) {
        this.expandAll();
    } else {
        root.expand();
    }

    var selectedNode = this.getNodeById(parameters['category_id']);
    if (selectedNode) {
        this.currentNodeId = parameters['category_id'];
        if ((typeof selectedNode.attributes.path)!='undefined') {
            this.selectPath(selectedNode.attributes.path);
        } else {
            this.getSelectionModel().select(selectedNode);
        }
    } else {
        if (this.currentNodeId) {
            selectedNode = this.getNodeById(this.currentNodeId);
            if ((typeof selectedNode.attributes.path)!='undefined') {
                this.selectPath(selectedNode.attributes.path);
            } else {
                this.getSelectionModel().select(selectedNode);
            }
        }
    }

    this.cache[parameters['store_id']] = {parameters:parameters, data:data};
}

Ext.tree.TreePanel.prototype.switchStore = function(event, switcher)
{
    var obj = event.target;

    var newStoreId = obj.value*1;

    var storeParam = newStoreId ? 'store/'+newStoreId + '/' : '';

    if (obj.switchParams) {
        storeParam+= obj.switchParams;
    }
    if (switcher.useConfirm) {
        if (!confirm("<?php echo $this->__('Please confirm site switching. All data that hasn\'t been saved will be lost.') ?>")){
            obj.value = '<?php echo (int) $this->getStoreId() ?>';
            return false;
        }
    }

    if (this.cache[this.storeId]) {
        var hash = categoryLoader.buildHash(this.root);
        this.cache[this.storeId]['data'] = hash['children'];
        this.cache[this.storeId]['parameters']['category_id'] = this.currentNodeId;
    }
    var cache = this.cache[newStoreId];

    if (this.useAjax && !varienStoreSwitcher.isSameSore(newStoreId, this.storeId)) {
        if (cache) {
            storeParam = storeParam+'id/'+cache['parameters']['category_id']+'/';
            this.loadTree(cache);
        } else {
            this.storeId = newStoreId;
            this.switchTree(this.switchTreeUrl+storeParam, {store:newStoreId});
        }
    } else {
        this.storeId = newStoreId;
        storeParam = storeParam+'id/'+this.currentNodeId+'/';
    }

    this.updateContent(this.switchEditUrl+storeParam);
}

Ext.tree.TreePanel.prototype.switchTree = function(url, params)
{
    new Ajax.Request(
        url + (url.match(new RegExp('\\?')) ? '&ajax=true' : '?ajax=true' ),
        {
           parameters:  params || {},
           method:      'post',
           onComplete:  tree._switchTree.bind(this)
        }
    );
}

Ext.tree.TreePanel.prototype._switchTree = function(transport)
{
    var response = eval('('+transport.responseText+')');
    if (!response['parameters']) {
        return false;
    }

    this.loadTree(response);
}

Ext.tree.TreePanel.prototype.updateContent = function(url, params)
{
    if (!this.useAjax) {
        setLocation(url);
        return;
    }

    if (!params) {
        var params = {active_tab_id:category_info_tabsJsTabs.activeTab.id};
    }

    new Ajax.Updater(
        this.categoryContainer,
        url + (url.match(new RegExp('\\?')) ? '&ajax=true' : '?ajax=true' ),
        {
           parameters:  params || {},
           method:      'post',
           loaderArea:  this.categoryContainer,
           onComplete:  refreshEditArea.bind(this),
           evalScripts: true
        }
    );
}

Ext.tree.TreePanel.prototype.request = function(url, params)
{
    if (!params) {
        var params = {active_tab_id:category_info_tabsJsTabs.activeTab.id};
    }
    var result = new Ajax.Request(
        url + (url.match(new RegExp('\\?')) ? '&ajax=true' : '?ajax=true' ),
        {
           parameters:  params || {},
           method:      'post',
           loaderArea:  this.categoryContainer
        }
    );

    return result;
}

function buildCategoryTree(parent, config)
{
    if (!config) return null;

	if (parent && config && config.length){
        for (var i = 0; i < config.length; i++) {
            var node;
            var _node = Object.clone(config[i]);
            if (_node.children && !_node.children.length) {
                delete(_node.children);
                node = new Ext.tree.AsyncTreeNode(_node);
            } else {
                node = new Ext.tree.TreeNode(config[i]);
            }
            parent.appendChild(node);
            node.loader = node.getOwnerTree().loader;
            if (_node.children) {
                buildCategoryTree(node, _node.children);
            }
        }
    }
}

function addNew(url)
{
    tree.updateContent(url);
}

function categoryReset(url, params)
{
    var params = {active_tab_id:false};
    tree.updateContent(url, params);
}

function categoryDelete(url)
{
    tree.updateContent(url);
}

function refreshEditArea(transport)
{
    setTimeout(function() {
        category_info_tabsJsTabs.moveTabContentInDest();
    }, 1000);
}

function categoryAdd(id)
{
    var ids = $('product_categories').value.split(',');
    ids.push(id);
    $('product_categories').value = ids.join(',');
}

function categoryRemove(id)
{
    var ids = $('product_categories').value.split(',');
    ids.splice(ids.indexOf(id), 1);
    $('product_categories').value = ids.join(',');
}

function collapseTree()
{
    categoryLoader.dataUrl = '<?php echo $this->getLoadTreeUrl(false) ?>';
    tree.request(categoryLoader.dataUrl);
    tree.collapseAll();
}

function expandTree()
{
    categoryLoader.dataUrl = '<?php echo $this->getLoadTreeUrl(true) ?>';
    tree.expandAll();
}

function categoryClick(node, e)
{
    var url = '<?php echo $this->getEditUrl() ?>'+(tree.storeId?'store/'+tree.storeId+'/':'')+'id/'+node.id+'/';
    tree.currentNodeId = node.id;
    new Ajax.Updater(
        tree.categoryContainer,
        url + (url.match(new RegExp('\\?')) ? '&ajax=true' : '?ajax=true' ),
        {
           parameters: {
               active_tab_id: category_info_tabsJsTabs.activeTab.id
           },
           method:      'post',
           loaderArea:  tree.categoryContainer,
           onComplete:  refreshEditArea.bind(this),
           evalScripts: true
        }
    );
}

function categoryMove(obj)
{
    var data = {id: obj.dropNode.id}

    data.point = obj.point;
    switch (obj.point) {
        case 'above' :
            data.pid = obj.target.parentNode.id;
            data.paid = obj.dropNode.parentNode.id;
            if (obj.target.previousSibling) {
                data.aid = obj.target.previousSibling.id;
            } else {
                data.aid = 0;
            }
            break;
        case 'below' :
            data.pid = obj.target.parentNode.id;
            data.aid = obj.target.id;
        break;
        case 'append' :
            data.pid = obj.target.id;
            data.paid = obj.dropNode.parentNode.id;
            if (obj.target.lastChild) {
                data.aid = obj.target.lastChild.id;
            } else {
                data.aid = 0;
            }
        break;
        default :
            obj.cancel = true;
            return obj;
    }

    var success = function(o) {
        try {
            if(o.responseText && o.responseText!=='SUCCESS'){
                alert(o.responseText);
                location.reload();
            }
        }
        catch(e) {

        }
    };
    var failure = function(o) {
        if (console) {
            console.log(o.statusText);
        } else {
            alert(o.statusText);
        }
        location.reload();
    };

    var pd = [];
    for(var key in data) {
        pd.push(encodeURIComponent(key), "=", encodeURIComponent(data[key]), "&");
    }
    pd.splice(pd.length-1,1);
    new Ajax.Request(
        '<?php echo $this->getMoveUrl() ?>',
        {
            method:     'POST',
            parameters: pd.join(""),
            onSuccess : success,
            onFailure : failure,
//            loaderArea: 'tree-div'
        }
    );
}

function categorySubmit()
{
    var activeTab = document.createElement('INPUT');
    activeTab.type= 'hidden';
    activeTab.name= 'active_tab_id';
    activeTab.value = category_info_tabsJsTabs.activeTab.id;
    categoryForm.validator.form.appendChild(activeTab);

//    categoryForm.submit();
//    return;

    var params = {};
    var fields = $(tree.categoryContainer).getElementsBySelector('input', 'select');
    for(var i=0;i<fields.length;i++){
        if (!fields[i].name) {
            continue;
        }
        params[fields[i].name] = fields[i].getValue();
    }
    var categoryParam = tree.currentNodeId ? 'id/'+tree.currentNodeId + '/' : '';
    categoryParam+= tree.storeId ? 'store/'+tree.storeId + '/' : '';
    var currentNode = tree.getNodeById(tree.currentNodeId);
    if (currentNode) {
        if (params['general[is_active]']) {
            var oldClass = 'no-active-category';
            var newClass = 'active-category';
        } else {
            var oldClass = 'active-category';
            var newClass = 'no-active-category';
        }
        currentNode.ui.wrap.firstChild.removeClassName(oldClass);
        currentNode.ui.wrap.firstChild.addClassName(newClass);
        var name = currentNode.text;
        if (!name.match(/(\(\d+\))/)) {
           name = params['general[name]'];
        } else {
            name = name.replace(/(.+)\(/,params['general[name]']+' (');
        }

        currentNode.setText(name);
    }
    tree.request(tree.saveUrl+categoryParam, params);
}
</script>
<?php endif; ?>