<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category   design_default
 * @package    Mage
 * @copyright  Copyright (c) 2008 Irubin Consulting Inc. DBA Varien (http://www.varien.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
?>
<?php
/**
 * Template for Mage_Adminhtml_Block_Catalog_Category_Cointainer
 */
?>

<div id="category-edit-container" class="category-content">
    <?php echo $this->getChildHtml('form') ?>
</div>
<script type="text/javascript">
//<![CDATA[

    var categoryForm = new varienForm('category_edit_form');

    categoryForm.submit= function (url){
      this.errorSections = $H({});
        this.canShowError = true;
        this.submitUrl = url;
        if(this.validator && this.validator.validate()){
            if(this.validationUrl){
                this._validate();
            }
            else{
                this._submit();
            }
              displayLoadingMask();
            return true;
        }
        return false;
    };

    function updateContent(url, params, refreshTree){
        var categoryContainer = $('category-edit-container');
        new Ajax.Updater(
            categoryContainer,
            url + (url.match(new RegExp('\\?')) ? '&isAjax=true' : '?isAjax=true' ),
            {
               parameters:  params || {},
               method:      'post',
               loaderArea:  categoryContainer,
               onComplete:  refreshTree?refreshTreeArea.bind(this):false,
               evalScripts: true
            }
        );
    }

    function refreshTreeArea(transport)
    {
        if (tree && tree.addNodeTo) {
            var parent = tree.getNodeById(tree.currentNodeId);
            var parameters = {
                text:        $('_generalname').value,
                draggable:   false,
                allowDrop:   tree.rootVisible,
                id:          $('_generalid').value,
                path:        $('_generalpath').value,
                expanded:    false,
                store_id:    tree.storeId,
                category_id: $('_generalid').value
            };
            console.log(parameters);
            var node = new Ext.tree.AsyncTreeNode(parameters);
            node.loaded = true;
            tree.addNodeTo = false;
            tree.currentNodeId = node.id;
            parent.appendChild(node);
            if (parent.expanded) {
                tree.selectCurrentNode();
            } else {
                var timer;
                parent.expand();
                var f = function(){
                    if(parent.expanded){ // done expanding
                        clearInterval(timer);
                        tree.selectCurrentNode();
                    }
                };
                timer = setInterval(f, 200);
                return;
            }
//            tree.selectCurrentNode();
        }
        else if (tree && tree.nodeForDelete) {
            var parentNode = tree.getNodeById(tree.nodeForDelete).parentNode;
            parentNode.removeChild(tree.getNodeById(tree.nodeForDelete));
            tree.nodeForDelete = false;
            tree.currentNodeId = false;
        }
    }

    function displayLoadingMask()
    {
       var loaderArea = $$('#html-body .wrapper')[0]; // Blocks all page
        Position.clone($(loaderArea), $('loading-mask'), {offsetLeft:-2});
        toggleSelectsUnderBlock($('loading-mask'), false);
        Element.show('loading-mask');
    }

    function categorySubmit(url, useAjax){

        useAjax = false;
        var activeTab = $('active_tab_id');
        if (activeTab) {
            if (activeTab.tabsJsObject && activeTab.tabsJsObject.activeTab) {
                activeTab.value = activeTab.tabsJsObject.activeTab.id;
            }
        }
      /*  if (!useAjax) {
            categoryForm.submit();
            return;
        }*/

        var params = {};
        var fields = $('category_edit_form').getElementsBySelector('input', 'select');
        for(var i=0;i<fields.length;i++){
            if (!fields[i].name) {
                continue;
            }
            params[fields[i].name] = fields[i].getValue();
        }

        if (tree && tree.storeId==0 && !tree.addNodeTo) {


            var currentNode = tree.getNodeById(tree.currentNodeId);

            if (currentNode) {


                if (params['general[is_active]']) {
                    var oldClass = 'no-active-category';
                    var newClass = 'active-category';
                } else {
                    var oldClass = 'active-category';
                    var newClass = 'no-active-category';
                }

                Element.removeClassName(currentNode.ui.wrap.firstChild, oldClass);
                Element.addClassName(currentNode.ui.wrap.firstChild, newClass);

                var name = currentNode.text;

                if (!name.match(/(\(\d+\))/)) {
                   name = params['general[name]'];
                } else {
                    name = name.replace(/(.+)\(/,params['general[name]']+' (');
                }
                currentNode.setText(name);
            }
        }

        categoryForm.submit();


        //updateContent(url, params, tree?true:false);
    }

//]]>
</script>