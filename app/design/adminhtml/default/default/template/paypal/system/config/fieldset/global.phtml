<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     default_default
 * @copyright   Copyright (c) 2009 Irubin Consulting Inc. DBA Varien (http://www.varien.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<?php
/**
 * @see Mage_Paypal_Block_System_Config_Fieldset_Global
 */
?>

<table class="paypal-global" id="paypal_checkout" cellspacing="0">
    <col width="90%" />
    <col width="10%" />
    <thead>
    </thead>
    <tbody>
        <tr>
            <td style="text-align: left;"><?php echo Mage::helper('paypal')->__('Select a PayPal Solution')?></td>
            <td style="text-align: right;"><a href="#"><?php echo Mage::helper('paypal')->__('Help')?></a></td>
        </tr>

        <tr>
            <td style="text-align: left;">
            <?php echo $this->getCheckboxHtml('paypal_global_wps') ?> <label for="paypal_global_wps"><?php echo Mage::helper('paypal')->__('Website Payments Standard')?></label>
            <?php if ($this->canUseInherit('paypal_global_wps')): ?>
                <div><?php echo $this->getInheritCheckboxHtml('paypal_global_wps') ?><?php echo $this->getInheritCheckboxLabelHtml('paypal_global_wps') ?></div>
            <?php endif; ?>
            </td>
            <td style="text-align: right;"><a href="#"><?php echo Mage::helper('paypal')->__('View Demo')?></a> | <a href="#"><?php echo Mage::helper('paypal')->__('Learn more')?></a></td>
        </tr>
        <tr>
            <td style="text-align: left;" colspan="2"><?php echo Mage::helper('paypal')->__('Accept PayPal payments on my shopping cart and product pages.')?></td>
        </tr>

        <tr>
            <td style="text-align: left;">
            <?php echo $this->getCheckboxHtml('paypal_global_wpp') ?> <label for="paypal_global_wpp"><?php echo Mage::helper('paypal')->__('Website Payments Pro')?></label>
            <?php if ($this->canUseInherit('paypal_global_wpp')): ?>
                <div><?php echo $this->getInheritCheckboxHtml('paypal_global_wpp') ?><?php echo $this->getInheritCheckboxLabelHtml('paypal_global_wpp') ?></div>
            <?php endif; ?>
            </td>
            <td style="text-align: right;"><a href="#"><?php echo Mage::helper('paypal')->__('View Demo')?></a> | <a href="#"><?php echo Mage::helper('paypal')->__('Learn more')?></a></td>
        </tr>
        <tr>
            <td style="text-align: left;" colspan="2"><?php echo Mage::helper('paypal')->__('Accept PayPal payments on my shopping cart and product pages, while accepting credit card payments utilizing PayPal as a processor.')?></td>
        </tr>

        <tr>
            <td style="text-align: left;">
            <?php echo $this->getCheckboxHtml('paypal_global_express') ?> <label for="paypal_global_express"><?php echo Mage::helper('paypal')->__('Express Checkout')?></label>
            <?php if ($this->canUseInherit('paypal_global_express')): ?>
                <div><?php echo $this->getInheritCheckboxHtml('paypal_global_express') ?><?php echo $this->getInheritCheckboxLabelHtml('paypal_global_express') ?></div>
            <?php endif; ?>
            </td>
            <td style="text-align: right;"><a href="#"><?php echo Mage::helper('paypal')->__('View Demo')?></a> | <a href="#"><?php echo Mage::helper('paypal')->__('Learn more')?></a></td>
        </tr>
        <tr>
            <td style="text-align: left;" colspan="2"><?php echo Mage::helper('paypal')->__('Accept PayPal payments on my shopping cart and product pages.')?></td>
        </tr>

        <tr>
            <td style="text-align: left;"><?php echo Mage::helper('paypal')->__('Payflow Pro Gateway')?></td>
            <td style="text-align: right;"><a href="#"><?php echo Mage::helper('paypal')->__('View Demo')?></a> | <a href="#"><?php echo Mage::helper('paypal')->__('Learn more')?></a></td>
        </tr>
        <tr>
            <td style="text-align: left;padding-left:20px;" colspan="2">
            <div>
                <?php echo $this->getCheckboxHtml('paypal_global_wpp_pe') ?> <label for="paypal_global_wpp_pe"><?php echo Mage::helper('paypal')->__('With PayPal Merchant Account – Accept PayPal payments on my shopping cart and product pages, while accepting credit card payments through the Payflow Pro Gateway utilizing PayPal as a processor.')?></label>
                <?php if ($this->canUseInherit('paypal_global_wpp_pe')): ?>
                    <div><?php echo $this->getInheritCheckboxHtml('paypal_global_wpp_pe') ?><?php echo $this->getInheritCheckboxLabelHtml('paypal_global_wpp_pe') ?></div>
                <?php endif; ?>
            </div>
            <br/>
            <div>
                <?php echo $this->getCheckboxHtml('paypal_global_express_pe') ?> <label for="paypal_global_express_pe"><?php echo Mage::helper('paypal')->__('With Express Checkout – Accept PayPal payments on my shopping cart and product pages through the Payflow Pro Gateway.')?></label>
                <?php if ($this->canUseInherit('paypal_global_express_pe')): ?>
                    <div><?php echo $this->getInheritCheckboxHtml('paypal_global_express_pe') ?><?php echo $this->getInheritCheckboxLabelHtml('paypal_global_express_pe') ?></div>
                <?php endif; ?>
            </div>
            <br/>
            <div>
                <?php echo $this->getCheckboxHtml('paypal_global_verisign') ?> <label for="paypal_global_verisign"><?php echo Mage::helper('paypal')->__('With External Merchant Account – Accept credit card payments for a non-PayPal merchant account through the Payflow Pro Gateway')?></label>
                <?php if ($this->canUseInherit('paypal_global_verisign')): ?>
                    <div><?php echo $this->getInheritCheckboxHtml('paypal_global_verisign') ?><?php echo $this->getInheritCheckboxLabelHtml('paypal_global_verisign') ?></div>
                <?php endif; ?>
            </div>
            </td>
        </tr>
    </tbody>
</table>

<script type="text/javascript">
decorateTable('paypal_checkout');

Event.observe(window, 'load', function() {
    var pConfig = new PaypalConfig;
    Element.observe('paypal_account_business_account', 'change', pConfig.trackBusinessAccount.bind(pConfig));
    Element.observe('paypal_account_merchant_country', 'change', pConfig.trackMerchantCountry.bind(pConfig));
    Element.observe('paypal_global_wpp', 'click', pConfig.trackWpp.bind(pConfig));
    Element.observe('paypal_global_wpp_pe', 'click', pConfig.trackWppPe.bind(pConfig));
    ['ec','wps','ecpe','payflowpro'].each(function(m) {
        Element.observe(pConfig.getMethodSwitcher(m).id, 'click', pConfig.trackMethod.bind(pConfig, m));
    });
    pConfig.fastMode = true;
    pConfig.trackMerchantCountry();
    pConfig.trackBusinessAccount();
    pConfig.trackWpp();
    pConfig.trackWppPe();
    pConfig.trackWps();
    ['ec','wps','ecpe','payflowpro'].each(function(m) {
        pConfig.trackMethod(m);
    });
    pConfig.fastMode = false;
    pConfig.destruct();
});

PaypalConfig = Class.create();
PaypalConfig.prototype = {
    initialize: function(){
        this.methods = $H({
            ec: $H({switcher: 'express', fieldset: 'express'}),
            wps: $H({switcher: 'wps', fieldset: 'wps'}),
            wpp: $H({switcher: 'wpp', fieldset: 'wpp'}),
            wpppe: $H({switcher: 'wpp_pe', fieldset: 'wpp_pe'}),
            ecpe: $H({switcher: 'express_pe', fieldset: 'express_pe'}),
            payflowpro: $H({switcher: 'verisign', fieldset: 'verisign'})
        });
        this.disabledMethods = [];
    },

    getMethods: function()
    {
        return this.methods;
    },

    getMethod: function(method)
    {
        return this.methods.get(method);
    },

    isDisabled: function(method)
    {
        return this.disabledMethods.indexOf(method) != -1;
    },

    getMethodFieldset: function(method)
    {
        var fieldsetId = 'paypal_' + this.getMethod(method).get('fieldset');
        return $(fieldsetId);
    },

    getMethodSwitcher: function(method)
    {
        var switcherId = 'paypal_global_' + this.getMethod(method).get('switcher');
        return $(switcherId);
    },

    getMethodSwitcherValue: function(method)
    {
        var switcherValueId = 'paypal_global_' + this.getMethod(method).get('switcher') + '_value';
        return $(switcherValueId);
    },

    getMethodSwitcherInherit: function(method)
    {
        var inheritId = 'paypal_global_' + this.getMethod(method).get('switcher') + '_inherit';
        return $(inheritId);
    },

    markMethodAsReadonly: function(method, readonly)
    {
        if (readonly == undefined) {
            readonly = true;
        }
        if (this.isDisabled(method) && !readonly) {
            return;
        }
        if (this.fastMode) {
            this.getMethod(method).set('readonly', readonly);
            return;
        }
        var inherit = this.getMethodSwitcherInherit(method);
        if (inherit != undefined) {
            inherit.disabled = readonly;
            if (!inherit.disabled && inherit.checked) {
                readonly = true;
            }
        }
        this.getMethodSwitcherValue(method).value = this.getMethodSwitcher(method).checked ? '1' : '0';
        this.getMethodSwitcher(method).disabled = readonly;
    },

    enableMethod: function(method, readonly)
    {
        if (this.isDisabled(method)) {
            return;
        }
        readonly = (readonly == undefined ? false : readonly);
        if (this.fastMode) {
            this.getMethod(method).set('disabled', false);
            this.getMethod(method).set('readonly', readonly);
            return;
        }
        this.getMethodSwitcher(method).checked = true;
        this.markMethodAsReadonly(method, readonly);
        this.toggleFieldset(this.getMethodFieldset(method), this.getMethodSwitcher(method));
    },

    disableMethod: function(method, readonly)
    {
        readonly = (readonly == undefined ? true : readonly);
        if (this.fastMode) {
            this.getMethod(method).set('disabled', true);
            this.getMethod(method).set('readonly', readonly);
            return;
        }
        this.getMethodSwitcher(method).checked = false;
        this.markMethodAsReadonly(method, readonly);
        this.toggleFieldset(this.getMethodFieldset(method), this.getMethodSwitcher(method));
    },

    trackMethod: function(method)
    {
        var switcher = this.getMethodSwitcher(method);
        if (!switcher.checked && this.fastMode || !this.fastMode) {
            this.toggleFieldset(this.getMethodFieldset(method), switcher);
        }
        this.getMethodSwitcherValue(method).value = switcher.checked ? '1' : '0';

        if (method == 'ec') {
            this.toggleApiCredentials();
        }
    },

    trackMerchantCountry: function()
    {
        var countryConfig = $H({
            'US':{
                'exclude_methods': []
            },
            'CA':{
                'exclude_methods': ['wpppe','ecpe']
            },
            'GB':{
                'exclude_methods': ['payflowpro']
            },
            'AU':{
                'exclude_methods': ['wpp','wpppe','ecpe']
            },
            'NZ':{
                'exclude_methods': ['wpp','wpppe','ecpe']
            },
            'DE':{
                'exclude_methods': ['wpp','wpppe','ecpe','payflowpro']
            },
            'other':{
                'exclude_methods': ['wpp','wpppe','ecpe','payflowpro']
            }
        });
        var country = $('paypal_account_merchant_country').value;
        var config = countryConfig.get(country);
        if (!config) {
            config = countryConfig.get('other');
        }

        var excludeMethods = config.exclude_methods;
        this.disabledMethods = excludeMethods;
        this.getMethods().keys().each(function(m) {
            if (excludeMethods.indexOf(m) != -1) {
                this.disableMethod(m);
            } else {
                this.markMethodAsReadonly(m, false);
            }
        }.bind(this));

        this.trackBusinessAccount();
        this.trackWpp();
        this.trackWppPe();
        this.trackWps();
    },

    trackBusinessAccount: function()
    {
        if (!$('paypal_account_business_account').value) {
            this.disableMethod('wps', true);
            this.disableMethod('ec', true);
            this.disableMethod('ecpe', true);
            this.disabledMethods.push('wps','ec','ecpe');
        } else {
            this.disabledMethods = this.disabledMethods.without('wps','ec','ecpe');
            this.markMethodAsReadonly('wps',false);
            this.markMethodAsReadonly('ec',false);
            this.markMethodAsReadonly('ecpe',false);
        }
        this.toggleApiCredentials();
    },

    toggleApiCredentials: function()
    {
        var visible = this.getMethodSwitcher('wpp').checked || this.getMethodSwitcher('ec').checked;
        var apiCredentials = [
            'row_paypal_general_api_username','row_paypal_general_api_password',
            'row_paypal_general_api_signature','row_paypal_general_use_proxy'
        ];
        apiCredentials.each(function(e) {
            visible ? this.enableRow(e) : this.disableRow(e);
        }.bind(this));
        if (visible && $('paypal_general_use_proxy').value == 1) {
            this.enableRow('row_paypal_general_proxy_host');
            this.enableRow('row_paypal_general_proxy_port');
        } else {
            this.disableRow('row_paypal_general_proxy_host');
            this.disableRow('row_paypal_general_proxy_port');
        }
    },

    trackWpp: function()
    {
        var enabled = this.getMethodSwitcher('wpp').checked;

        if (enabled) {
            this.enableMethod('wpp',false);
            this.enableMethod('ec',true);
        } else {
            this.disableMethod('wpp',false);
            this.markMethodAsReadonly('ec',false);
        }
        if (enabled || this.getMethodSwitcher('wpppe').checked) {
            this.enableRow('row_paypal_general_heading_api');
        } else {
            this.disableRow('row_paypal_general_heading_api');
        }
        this.toggleApiCredentials();
        this.trackWps();
    },

    trackWppPe: function()
    {
        var enabled = this.getMethodSwitcher('wpppe').checked;

        var wppPeGeneralRows = [
            'row_paypal_general_partner','row_paypal_general_user','row_paypal_general_vendor','row_paypal_general_pwd'
        ];
        wppPeGeneralRows.each(function(e) {
            enabled ? this.enableRow(e) : this.disableRow(e);
        }.bind(this));

        if (enabled) {
            this.enableMethod('wpppe',false);
            this.enableMethod('ecpe',true);
        } else {
            this.disableMethod('wpppe',false);
            this.markMethodAsReadonly('ecpe',false);
        }
        if (enabled || this.getMethodSwitcher('wpp').checked) {
            this.enableRow('row_paypal_general_heading_api');
        } else {
            this.disableRow('row_paypal_general_heading_api');
        }
        this.trackWps();
    },

    trackWps: function()
    {
        var disabled = this.getMethodSwitcher('wpp').checked || this.getMethodSwitcher('wpppe').checked;
        if (disabled) {
            this.disableMethod('wps', true);
        } else {
            this.markMethodAsReadonly('wps',false);
        }
    },

    enableRow: function(rowId)
    {
        $(rowId).select('input','select').each(function(e) {
            e.disabled = false;
        });
        $(rowId).show();
    },

    disableRow: function(rowId)
    {
        $(rowId).select('input','select').each(function(e) {
            e.disabled = true;
        });
        $(rowId).hide();
    },

    toggleFieldset: function(fieldset, checkbox)
    {
        var isHidden = !$(checkbox).checked;
        toggleValueElements(checkbox, fieldset, [], isHidden);
        isHidden ? $(fieldset).hide() : $(fieldset).show();
        var heading = $(fieldset).previous('div');
        var headingLink = heading.down('a');
        isHidden ? heading.addClassName('disabled') : heading.removeClassName('disabled');
        if (isHidden) {
            headingLink.oldHref = headingLink.href;
            headingLink.oldOnclick = headingLink.onclick;
            headingLink.onclick = "return false;";
            headingLink.href = "javascript:void(0)";
        } else if (headingLink.oldOnclick && headingLink.oldHref) {
            headingLink.onclick = headingLink.oldOnclick;
            headingLink.href = headingLink.oldHref;
        }
    },

    destruct: function()
    {
        this.getMethods().each(function(method) {
            if (method.value.get('disabled') != undefined) {
                method.value.get('disabled') ? this.disableMethod(method.key) : this.enableMethod(method.key);
            }
            if (method.value.get('readonly') != undefined) {
                this.markMethodAsReadonly(method.key, method.value.get('readonly'));
            }
        }.bind(this));
    }
}
</script>
