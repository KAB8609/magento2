<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category   design_default
 * @package    Mage
 * @copyright  Copyright (c) 2008 Irubin Consulting Inc. DBA Varien (http://www.varien.com)
 * @license    http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<?php echo $this->getFormInitScripts() ?>
<div class="content-header">
    <?php echo $this->getHeaderHtml() ?>
    <p class="content-buttons form-buttons"><?php echo $this->getButtonsHtml('header') ?></p>
</div>
<?php if( !$this->isSingleStoreMode() ): ?>
    <?php echo $this->getStoreSwitcherHtml() ?>
<?php endif; ?>

<form action="<?php echo $this->getSaveUrl() ?>" method="post" id="edit_form">
    <?php echo $this->getFormHtml() ?>

    <?php echo $this->getTagAssignAccordionHtml() ?>

    <script type="text/javascript">
    //<![CDATA[
        function saveAndContinueEdit(url) {
            var tagForm = new varienForm('edit_form');
            tagForm.submit(url);
        }

        var productLinksController = Class.create();

        productLinksController.prototype = {
            initialize : function(fieldId, products, grid) {
                this.saveField = $(fieldId);
                this.saveFieldId = fieldId;
                this.products    = $H(products);
                this.grid        = grid;
                this.tabIndex    = 1000;
                this.grid.rowClickCallback = this.rowClick.bind(this);
                this.grid.initRowCallback = this.rowInit.bind(this);
                this.grid.checkboxCheckCallback = this.registerProduct.bind(this);
                this.grid.rows.each(this.eachRow.bind(this));
                this.saveField.value = this.serializeObject(this.products);
                this.grid.reloadParams = {'products[]':this.products.keys()};
            },
            eachRow : function(row) {
                this.rowInit(this.grid, row);
            },
            registerProduct : function(grid, element, checked) {
                if(checked){
                    this.products.set(element.value, {"id":""+element.value+""});
                } else {
                    this.products.unset(element.value);
                }
                this.saveField.value = this.serializeObject(this.products);
                this.grid.reloadParams = {'products[]':this.products.keys()};
            },
            serializeObject : function(hash) {
                var clone = hash.clone();
                clone.each(function(pair) {
                    clone.set(pair.key, encode_base64(Object.toQueryString(pair.value)));
                });
                return clone.toQueryString();
            },
            rowClick : function(grid, event) {
                var trElement = Event.findElement(event, 'tr');
                var isInput   = Event.element(event).tagName == 'INPUT';
                if(trElement){
                    var checkbox = Element.select(trElement, 'input');
                    if(checkbox[0]){
                        var checked = isInput ? checkbox[0].checked : !checkbox[0].checked;
                        this.grid.setCheckboxChecked(checkbox[0], checked);
                    }
                }
            },
            inputChange : function(event) {
                var element = Event.element(event);
                if(element && element.checkboxElement && element.checkboxElement.checked){
                    this.products.get(element.checkboxElement.value)[element.name] = element.value;
                    this.saveField.value = this.serializeObject(this.products);
                }
            },
            rowInit : function(grid, row) {
                var checkbox = $(row).select('.checkbox')[0];
                var inputs = $(row).select('.input-text');
                if(checkbox && inputs.length > 0) {
                    checkbox.inputElements = inputs;
                    for(var i = 0; i < inputs.length; i++) {
                        inputs[i].checkboxElement = checkbox;
                        if(this.products.get(checkbox.value) && this.products.get(checkbox.value)[inputs[i].name]) {
                            inputs[i].value = this.products.get(checkbox.value)[inputs[i].name];
                        }
                        inputs[i].disabled = !checkbox.checked;
                        inputs[i].tabIndex = this.tabIndex++;
                        Event.observe(inputs[i],'keyup', this.inputChange.bind(this));
                        Event.observe(inputs[i],'change', this.inputChange.bind(this));
                    }
                }
            }
        };
    </script>

</form>

<?php if ($this->hasFooterButtons()): ?>
    <div class="content-footer">
        <p class="content-buttons form-buttons"><?php echo $this->getButtonsHtml('footer') ?></p>
    </div>
<?php endif; ?>
<script type="text/javascript">
    var editForm = new varienForm('edit_form', '<?php echo $this->getValidationUrl() ?>');
</script>
<?php echo $this->getFormScripts() ?>
<?php echo $this->getAcordionsHtml() ?>