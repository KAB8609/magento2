<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design_default
 * @package     Mage_Downloadable
 * @copyright   Copyright (c) 2008 Irubin Consulting Inc. DBA Varien (http://www.varien.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>

<?php
/**
 * @see Mage_Downloadable_Block_Adminhtml_Catalog_Product_Edit_Tab_Downloadable
 */
?>
<script type="text/javascript">
//<![CDATA[>

var uploaderTemplate = '<input type="hidden" id="[[idName]]_save" name="[[fileValueName]]" value="[[fileValue]]" />' +
                        '<div id="[[idName]]_list"></div>' +
                        '<div id="[[idName]]" class="uploader">' +
                            '<div class="buttons">' +
                                '<div id="[[idName]]_file-install-flash" style="display:none">' +
                                    '<?php echo Mage::helper('media')->__('This content requires last version of Adobe Flash Player. <a href="%s">Get Flash</a>', 'http://www.adobe.com/go/getflash/') ?>' +
                                '</div>' +
                            '</div>' +
                            '<div class="clear"></div>' +
                            '<div class="no-display" id="[[idName]]-template">' +
                                '<div id="{{id}}" class="file-row">' +
                                    '<span class="file-info">{{name}} ({{size}})</span>' +
                                    '<span class="delete-button"><button id="{{id}}-delete" type="button" class="scalable delete" onclick="[[uploaderObj]].removeFile(\'{{fileId}}\')" style=""><span>Remove</span></button></span>' +
                                    '<span class="progress-text"></span>' +
                                    '<div class="clear"></div>' +
                                '</div>' +
                            '</div>' +
                            '<div class="no-display" id="[[idName]]-template-progress">' +
                                '{{percent}}% {{uploaded}} / {{total}}' +
                            '</div>' +
                        '</div>';

var fileListTemplate = '<b>{{name}}</b> ({{size}})';

var Downloadable = {
    uploaderObj : $H({}),
    setUploaderObj : function(key, obj){
        return this.uploaderObj.set(key, obj);
    },
    getUploaderObj : function(key){
        try {
            return this.uploaderObj.get(key);
        } catch (e) {

        }
    }
};

Downloadable.FileUploader = Class.create();
Downloadable.FileUploader.prototype = {
    key : null, //key, identifier of uploader obj
    elmContainer : null, //insert Flex object and templates to elmContainer
    fileValueName : null, //name of field of JSON data of saved file
    idName : null, //id name of elements for unique uploader
    uploaderText: uploaderTemplate,
    uploaderSyntax : /(^|.|\r|\n)(\[\[(\w+)\]\])/,
    uploaderObj : $H({}),
    initialize: function (key, elmContainer, fileValueName, idName) {
        this.key = key;
        this.elmContainer = elmContainer;
        this.fileValueName = fileValueName;
        this.idName = idName;
        uploaderTemplate = new Template(this.uploaderText, this.uploaderSyntax);
        Element.insert(
            elmContainer,
            {'top' : uploaderTemplate.evaluate({
                    'idName' : this.idName,
                    'fileValueName' : this.fileValueName,
                    'fileValue' : '[]',
                    'uploaderObj' : 'Downloadable.getUploaderObj('+this.key+')'
                })
            }
        );
        Downloadable.setUploaderObj(
            key,
            new Flex.Uploader(this.idName, '<?php echo $this->getSkinUrl('media/uploader.swf') ?>', <?php echo $this->getConfigJson() ?>)
        );
        new Downloadable.FileList(this.idName, Downloadable.getUploaderObj(key));
    }
}

Downloadable.FileList = Class.create();
Downloadable.FileList.prototype = {
    file: [],
    containerId: '',
    container: null,
    uploader: null,
    fileListTemplate: fileListTemplate,
    templatePattern : /(^|.|\r|\n)({{(\w+)}})/,
    listTemplate : null,
    initialize: function (containerId, uploader) {
        this.containerId  = containerId,
        this.container = $(this.containerId);
        this.uploader = uploader;
        this.uploader.onFilesComplete = this.handleUploadComplete.bind(this);
        this.file = this.getElement('save').value.evalJSON();
        this.listTemplate = new Template(this.fileListTemplate, this.templatePattern);
        this.updateFiles();
    },
    getElement: function (name) {
        return $(this.containerId + '_' + name);
    },
    handleUploadComplete: function (files) {
        files.each(function(item) {
           if (!item.response.isJSON()) {
               if (console) {
                   console.log(item.response);
               }
               return;
           }
           var response = item.response.evalJSON();
           if (response.error) {
               return;
           }
           var newFile = {};
           newFile.file = response.file;
           newFile.name = response.name;
           newFile.size = this.uploader.formatSize(response.size);
           this.file.push(newFile);
           this.uploader.removeFile(item.id);
        }.bind(this));
        this.updateFiles();
    },
    updateFiles: function() {
        this.getElement('save').value = this.file.toJSON();
        this.file.each(function(row){
            this.getElement('list').innerHTML = this.listTemplate.evaluate(row);
        }.bind(this));
    }
}


Validation.addAllThese([
    ['validate-downloadable-file', 'Please specify File.', function(v,element) {
            return true;
        }]
    ]);
Validation.addAllThese([
    ['validate-downloadable-url', 'Please specify Url.', function(v,element) {
            linkType = element.up(0).down('input[value="url"]');
            if (linkType.checked && v == '') {
                return false;
            }
            return true;
        }]
    ]);
//]]>
</script>

<div id="alert_messages_block"><?php echo $this->getMessageHtml() ?></div>

<div class="entry-edit">
<?php echo $this->getChildHtml('accordion') ?>
</div>
<!--
<div><input type="hidden" name="affect_downloadable_information" value="1" /></div>
-->