<?php
/**
 * Magento Enterprise Edition
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Magento Enterprise Edition License
 * that is bundled with this package in the file LICENSE_EE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.magentocommerce.com/license/enterprise-edition
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category   design
 * @package    default_default
 * @copyright  Copyright (c) 2008 Irubin Consulting Inc. DBA Varien (http://www.varien.com)
 * @license    http://www.magentocommerce.com/license/enterprise-edition
 */
?>
<?php echo $this->getAddLayoutButtonHtml() ?>
<div class="no-display" id="page_group_container_template">
    <div class="page_group_container" id="page_group_container_{{id}}">
        <select class="page_group_select" name="widget_instance[{{id}}][page_group]" onchange="WidgetInstance.displayPageGroup(this.value+'_{{id}}')">
            <option value="">-- Please Select --</option>
            <optgroup label="Categories">
                <option value="anchor_categories">Anchor Categories</option>
                <option value="notanchor_categories">Not Anchor Categories</option>
            </optgroup>
            <optgroup label="Products">
                <option value="simple_products">Simple Products</option>
                <option value="grouped_products">Grouped Products</option>
            </optgroup>
            <optgroup label="Another Pages">
                <option value="all_pages">All Pages</option>
                <option value="pages">Specific Pages</option>
            </optgroup>
        </select>
        <div>
            <div class="no-display categories" id="anchor_categories_{{id}}">
                <input type="hidden" class="container_name" name="__[container_name]" value="widget_instance[{{id}}][anchor_categories]" />
                <input type="hidden" name="widget_instance[{{id}}][anchor_categories][page_id]" value="{{page_id}}" />
                <input type="hidden" class="layout_handle_pattern" name="widget_instance[{{id}}][anchor_categories][layout_handle]" value="^default$,^catalog_category_layered*" />
                <input type="radio" name="widget_instance[{{id}}][anchor_categories][for]" value="all" onclick="WidgetInstance.togglePageGroupChooser(this)" checked="checked" />All
                <input type="radio" name="widget_instance[{{id}}][anchor_categories][for]" value="specific" onclick="WidgetInstance.togglePageGroupChooser(this)" />Specific Categories
                <div class="no-display chooser" id="anchor_category_ids_{{id}}">
                    <?php echo $this->getAnchorCategoriesChooser() ?>
                </div>
            </div>
            <div class="no-display categories" id="notanchor_categories_{{id}}">
                <input type="hidden" class="container_name" name="__[container_name]" value="widget_instance[{{id}}][notanchor_categories]" />
                <input type="hidden" name="widget_instance[{{id}}][notanchor_categories][page_id]" value="{{page_id}}" />
                <input type="hidden" class="layout_handle_pattern" name="widget_instance[{{id}}][notanchor_categories][layout_handle]" value="^default$,catalog_category_default" />
                <input type="radio" name="widget_instance[{{id}}][notanchor_categories][for]" value="all" onclick="WidgetInstance.togglePageGroupChooser(this)" checked="checked" />All
                <input type="radio" name="widget_instance[{{id}}][notanchor_categories][for]" value="specific" onclick="WidgetInstance.togglePageGroupChooser(this)" />Specific Categories
                <div class="no-display chooser" id="notanchor_category_ids_{{id}}">
                    <?php echo $this->getNotanchorCategoriesChooser() ?>
                </div>
            </div>
            <div class="no-display products" id="simple_products_{{id}}">
                <input type="hidden" class="container_name" name="__[container_name]" value="widget_instance[{{id}}][simple_products]" />
                <input type="hidden" name="widget_instance[{{id}}][simple_products][page_id]" value="{{page_id}}" />
                <input type="hidden" class="layout_handle_pattern" name="widget_instance[{{id}}][simple_products][layout_handle]" value="^default$,,^catalog_product_view$,^PRODUCT_TYPE_simple$" />
                <input type="radio" class="for_all" name="widget_instance[{{id}}][simple_products][for]" value="all" onclick="WidgetInstance.togglePageGroupChooser(this)" checked="checked" />All
                <input type="radio" class="for_specific" name="widget_instance[{{id}}][simple_products][for]" value="specific" onclick="WidgetInstance.togglePageGroupChooser(this)" />Specific Products
                <input type="hidden" class="entities" name="widget_instance[{{id}}][simple_products][entities]" value="{{entities}}" />
                <div class="no-display chooser" id="simple_products_ids_{{id}}">
                    <?php echo $this->getProductsChooser() ?>
                </div>
            </div>
            <div class="no-display products" id="grouped_products_{{id}}">
                <input type="hidden" class="container_name" name="__[container_name]" value="widget_instance[{{id}}][grouped_products]" />
                <input type="hidden" name="widget_instance[{{id}}][grouped_products][page_id]" value="{{page_id}}" />
                <input type="hidden" class="layout_handle_pattern" name="widget_instance[{{id}}][grouped_products][layout_handle]" value="^catalog_product_view$,^PRODUCT_TYPE_grouped$" />
                <input type="radio" class="for_all"  name="widget_instance[{{id}}][grouped_products][for]" value="all" onclick="WidgetInstance.togglePageGroupChooser(this)" checked="checked" />All
                <input type="radio" class="for_specific" name="widget_instance[{{id}}][grouped_products][for]" value="specific" onclick="WidgetInstance.togglePageGroupChooser(this)" />Specific Products
                <div class="no-display chooser" id="grouped_products_ids_{{id}}">
                    <?php echo $this->getProductsChooser() ?>
                </div>
            </div>
            <div class="no-display all_pages" id="all_pages_{{id}}">
                <input type="hidden" class="container_name" name="__[container_name]" value="widget_instance[{{id}}][all_pages]" />
                <input type="hidden" name="widget_instance[{{id}}][all_pages][page_id]" value="{{page_id}}" />
                <input type="hidden" class="layout_handle_pattern" name="widget_instance[{{id}}][all_pages][layout_handle]" value="^default$" />
                <input type="hidden" class="for_all" name="widget_instance[{{id}}][all_pages][for]" value="all" />
            </div>
            <div class="no-display pages" id="pages_{{id}}">
                <input type="hidden" class="container_name" name="__[container_name]" value="widget_instance[{{id}}][pages]" />
                <input type="hidden" name="widget_instance[{{id}}][pages][page_id]" value="{{page_id}}" />
                <input type="hidden" class="for_all" name="widget_instance[{{id}}][pages][for]" value="all" />
                <div><?php echo $this->getLayoutsChooser() ?></div>
            </div>
        </div>
        <div>
            <?php echo $this->getRemoveLayoutButtonHtml() ?>
        </div>
    </div>
</div>
<div id="page_group_container"></div>
<script type="text/javascript">

var pageGroupTemplateId = 'page_group_container_template';

var WidgetInstance = {
    pageGroupTemplateId : 'page_group_container_template',
    pageGroupContainerId : 'page_group_container',
    templatePattern : /(^|.|\r|\n)({{(\w+)}})/,
    count : 0,
    activePageGroups : $H({}),
    activePageGroupChoosers : $H({}),
    addPageGroup : function(data) {
        if ((pageGroupTemplate= $(this.pageGroupTemplateId)) && (pageGroupContainer = $(this.pageGroupContainerId))) {
            if (!data.id) {
                data = {};
                data.id = this.count++;
                data.page_id = 0;
            }
            pageGroupTemplateObj = new Template(pageGroupTemplate.innerHTML, this.templatePattern);
            Element.insert(pageGroupContainer, {'bottom':pageGroupTemplateObj.evaluate(data)});
            if (data.group) {
                pageGroup = $(data.group+'_'+data.id);
                additional = {};
                additional.selectedBlock = data.block;
                if (data.entities_array) {
                    additional.entities_array = data.entities_array;
                }
                this.displayPageGroup(pageGroup, additional);
                if ($(this.pageGroupContainerId+'_'+data.id)) {
                    selectGroupElm = $(this.pageGroupContainerId+'_'+data.id).down('select.page_group_select');
                    for (var i=0; i < selectGroupElm.options.length; i++) {
                        if (selectGroupElm.options[i].value == data.group) {
                            selectGroupElm.options[i].selected = true;
                            break;
                        }
                    }
                }
                if (data.group == 'pages') {
                    layoutSelect = pageGroup.down('select#layout_handle');
                    if (layoutSelect) {
                        for (var i=0; i < layoutSelect.options.length; i++) {
                            if (layoutSelect.options[i].value == data.layout_handle) {
                                layoutSelect.options[i].selected = true;
                                this.showLayoutBlocksReferance(pageGroup, data.layout_handle, {selectedBlock:data.block});
                                break;
                            }
                        }
                    }
                }
                forElm = pageGroup.down('input.for_'+data.for);
                if (forElm) {
                    forElm.checked = true;
                    if (data.for != 'all') {
                        this.togglePageGroupChooser(forElm);
                    }
                }
            }
        }
    },
    removePageGroup : function(element) {
        container = element.up('div.page_group_container');
        if (container) {
            container.remove();
        }
    },
    showBlockContainer : function(container) {
        container = $(container);
        if (container) {
            container.removeClassName('no-display');
            container.show();
        }
    },
    hideBlockContainer : function(container) {
        container = $(container);
        if (container) {
            container.addClassName('no-display');
            container.hide();
        }
    },
    displayPageGroup : function(container, additional) {
        container = $(container);
        if (!additional) {
            additional = {};
        }
        if (activePageGroupId = this.activePageGroups.get(container.up('div.page_group_container').id)) {
            this.hideBlockContainer(activePageGroupId);
        }
        this.activePageGroups.set(container.up('div.page_group_container').id, container.id);
        this.showBlockContainer(container);
        if (chooser = container.down('div.chooser')) {
            entities = [];
            if (additional && additional.entities_array) {
                entities = additional.entities_array
            }
            chooser.select('input[type="checkbox"].products').each(function(elm){
//                alert('Collection Set Page');
                for (var i=0; i<entities.length; i++) {
                    if (entities[i] == elm.value) {
                        elm.checked = true;
                        break;
                    }
                }
                Event.observe(elm, 'change', function(){
                    value = '';
                    chooser.select('input[type="checkbox"].products').each(function(elm){
                        if (elm.checked) {
                            if (value) value = value+','+elm.value;
                            else value = elm.value;
                        }
                    });
                    entitiesElm = container.down('input[type="hidden"].entities');
                    if (entitiesElm) {
                        entitiesElm.value = value;
                    }
                });
            });
        }
        if (!container.down('div.block_container')) {
            layoutHandle = '';
            if (layoutHandleField = container.down('input.layout_handle_pattern')) {
                layoutHandle = layoutHandleField.value;
            }
            this.showLayoutBlocksReferance(container, layoutHandle, additional);
        }
    },
    togglePageGroupChooser : function(element) {
        element = $(element);
        if (element && (chooser = element.next('div.chooser'))) {
            if (chooser.hasClassName('no-display')) {
                chooser.removeClassName('no-display');
                chooser.show();
            } else {
                chooser.addClassName('no-display');
                chooser.hide();
            }
        }
    },
    showPageGroupChooser : function(element) {
        element = $(element);
        if (element && (chooser = element.next('div.chooser'))) {
            this.showBlockContainer(chooser);
        }
    },
    hidePageGroupChooser : function(element) {
        element = $(element);
        if (element && (chooser = element.next('div.chooser'))) {
            this.hideBlockContainer(chooser);
        }
    },
    showLayoutBlocksReferance : function (element, group, additional) {
        if (!additional) {
            additional = {};
        }
        if (element) {
            if (blockContainer = element.down('div.block_container')) {
                blockContainer.remove();
            }
            if (group) {
                var url = '<?php echo $this->getBlockChooserUrl() ?>';
                selected = '';
                if (additional.selectedBlock) {
                    selected = additional.selectedBlock;
                }
                new Ajax.Request(url, {
                    method: 'post',
                    parameters: {layout:group, selected:selected},
                    onSuccess: function(transport) {
                        try {
                            if (transport.responseText) {
                                blockContainerTemplate = '<div class="block_container">'+transport.responseText+'</div>';
                                Element.insert(element, {'bottom':blockContainerTemplate});
                                selectElm = element.down('div.block_container').down('select');
                                if (selectElm) {
                                    selectElm.name = element.down('input.container_name').value+'['+selectElm.name+']';
                                }
                            }
                        } catch (e) {
                            alert('Error occurs during loading block chooser.');
                        }
                    }
                });
            }
        }
    }
};

<?php foreach ($this->getPageGroups() as $pageGroup): ?>
    WidgetInstance.addPageGroup(<?php echo Zend_Json::encode($pageGroup) ?>);
<?php endforeach; ?>

</script>