<?php
/**
 * Magento Enterprise Edition
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Magento Enterprise Edition License
 * that is bundled with this package in the file LICENSE_EE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.magentocommerce.com/license/enterprise-edition
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category   design
 * @package    default_default
 * @copyright  Copyright (c) 2009 Irubin Consulting Inc. DBA Varien (http://www.varien.com)
 * @license    http://www.magentocommerce.com/license/enterprise-edition
 */
?>
<?php
/* @var $this Enterprise_Cms_Block_Adminhtml_Cms_Hierarchy_Edit_Tab_Pages */
?>
<table cellspacing="0" width="100%">
    <tr>
        <td width="50%" style="border-right:1px solid #ddd; padding:0 23px 23px 0;">
            <div id="tree-container" style="width:100%;height:400px;overflow:auto"></div>
        </td>
        <td style="padding:0 0 23px 23px;">
            <div style="padding-bottom: 5px;">
                <?php echo $this->getTreeButtonsHtml();?>
            </div>
            <div id="node_prop_container">
                <div class="entry-edit-head">
                    <h4 class="icon-head head-edit-form fieldset-legend"><?php echo $this->__('Node Properties')?></h4>
                </div>
                <div id="node_properties_fieldset" class="fieldset">
                    <div class="hor-scroll">
                        <input type="hidden" id="node_id" value="">
                        <input type="hidden" id="node_page_id" value="">
                        <table cellspacing="0" class="form-list">
                            <tbody><tr>
                                <td class="label"><label for="node_label"><?php echo $this->__('Node Title')?> <span class="required">*</span></label></td>
                                <td class="value"><span id="node_label_text" style="display: none;"></span><input id="node_label" value="" class="input-text" type="text"/></td>
                            </tr>
                            <tr>
                                <td class="label"><label for="node_identifier"><?php echo $this->__('URL Key')?> <span class="required">*</span></label></td>
                                <td class="value"><span id="node_identifier_text" style="display: none;"></span><input id="node_identifier" value="" class="input-text validate-identifier" type="text"/></td>
                            </tr>
                            <tr>
                                <td>&nbsp;</td>
                                <td><?php echo $this->getPagePropertiesButtons();?></td>
                            </tr></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </td>
    </tr>
</table>
<script type="text/javascript">
/**
 * Fix ext compatibility with prototype 1.6
 */
Ext.lib.Event.getTarget = function(e) {
    var ee = e.browserEvent || e;
    return ee.target ? Event.element(ee) : null;
};
hierarchyNodes = {
    nodes: <?php echo $this->getNodesJson()?>,
    initialize: function(){
        this.increment = 0;
        this.pageIdentifiers = $H({});
        this.tree = new Ext.tree.TreePanel('tree-container', {
            animate: false,
            loader: false,
            enableDD: true,
            containerScroll: true,
            rootVisible: true,
            lines: true
        });
        this.treeRoot = new Ext.tree.TreeNode({
            text: '<?php echo $this->__("Root")?>',
            id: '_root',
            allowDrop: true,
            allowDrag: false,
            expanded: true,
            cls: 'cms_node_root',
        });
        this.tree.setRootNode(this.treeRoot);
        this.createNodes();
        this.tree.getSelectionModel().addListener('selectionchange', this.onNodeSelect.bind(this));
        this.tree.addListener('beforeappend', this.onNodeAppend.bind(this));
        this.tree.render();
        this.treeRoot.select();
    },
    createNodes: function(){
        for (var i = 0, l = this.nodes.length; i < l; i++) {
            var node = new Ext.tree.TreeNode({
                id: this.nodes[i].node_id,
                text: this.nodes[i].label,
                page_id: this.nodes[i].page_id,
                identifier: this.nodes[i].identifier,
                cls: this.nodes[i].page_id > 0 ? 'cms_page' : 'cms_node',
                expanded: true,
                allowDrop: true,
                allowDrag: true
            });

            if (this.nodes[i].page_id) {
                this.pageIdentifiers.set(this.nodes[i].identifier, this.nodes[i].identifier);
            }

            if (parentNode = this.tree.getNodeById(this.nodes[i].parent_node_id)) {
                parentNode.appendChild(node);
            } else {
                this.treeRoot.appendChild(node);
            }
        }
    },
    onNodeSelect: function(model, node){
        if (!node || node.id == '_root') {
            $('node_prop_container').hide();
            this.pageGridLoad();
            return;
        }
        $('node_prop_container').show();

        $('node_id').value = node.id;
        $('node_page_id').value = node.attributes.page_id;
        var hasPageId = node.attributes.page_id != null;
        this._changeNodePropShow(hasPageId);

        if (!hasPageId) {
            $('node_label').value = node.text;
            $('node_identifier').value = node.attributes.identifier;
        } else {
            $('node_label_text').innerHTML = node.text;
            $('node_identifier_text').innerHTML = node.attributes.identifier;
        }

        this.nodePropReset();
        $('delete_node_button').show();
        $('cancel_node_button').hide();
        this.pageGridLoad();
    },
    onNodeAppend: function(tree,parent,node){
        var identifier = node.attributes.identifier;
        for(var i=0, l = parent.childNodes.length; i < l; i++) {
            if (identifier == parent.childNodes[i].attributes.identifier) {
                alert('<?php echo $this->__("Node with same Identifier alredy exists. Page do not added!")?>');
                return false;
            }
        }
        return true;
    },
    pageGridRowClick: function(container, evt){
        var tr = evt.findElement('tr');
        var checkbox = tr.down('.checkbox');
        var isInput = evt.element().tagName == 'INPUT';
        var checked = isInput ? checkbox.checked : !checkbox.checked;
        container.setCheckboxChecked(checkbox, checked);
    },
    pageGridAddSelected: function(){
        var rows = $$('#cms_page_grid .grid table tbody tr');
        rows.each(function(tr){
            var checkbox = tr.down('.checkbox');
            if (!checkbox || !checkbox.checked) {
                return;
            }
            var page_id = tr.down('.checkbox').value;
            var label = tr.down('.label').textContent;
            var identifier = tr.down('.identifier').textContent;
            var rootNode = this.tree.getSelectionModel().getSelectedNode();
            if (!rootNode) {
                rootNode = this.treeRoot;
            }
            rootNode.appendChild(new Ext.tree.TreeNode({
                id: '_' + this.increment,
                text: label,
                identifier: identifier,
                page_id: page_id,
                cls: 'cms_page',
                expanded: true,
                allowDrop: true,
                allowDrag: true
            }));
            this.pageIdentifiers.set(identifier, page_id);

            this.increment ++;

            checkbox.checked = false;
        }.bind(this));
        this.pageGridLoad();
    },
    collectChilds: function(node){
        if (node.id == '_root') {
            this.treeData = new Hash();
        } else {
            this.treeData.set(node.id, {
                node_id: node.id,
                parent_node_id: node.parentNode.id == '_root' ? null : node.parentNode.id,
                page_id: node.attributes.page_id,
                label: node.attributes.text,
                identifier: node.attributes.identifier,
                sort_order: node.parentNode.indexOf(node),
                level: node.getDepth()
            });
        }
        if (node.hasChildNodes()) {
            node.eachChild(this.collectChilds.bind(this));
        }
    },
    save: function(continue_edit){
        this.collectChilds(this.treeRoot);
        $('nodes_data').value = this.treeData.toJSON();
        $('continue_edit').value = continue_edit ? 1 : 0;
        editForm.submit();
    },
    nodePropValidate: function(){
        $('node_label').addClassName('required-entry');
        $('node_identifier').addClassName('required-entry');

        var isValid = true;
        $('node_properties_fieldset').select('input').each(function(el){
            isValid = Validation.validate(el) && isValid;
        });

        $('node_label').removeClassName('required-entry');
        $('node_identifier').removeClassName('required-entry');

        return isValid;
    },
    nodePropReset: function(){
        $('node_properties_fieldset').select('input').each(function(el){
            Validation.reset(el);
        });
    },
    _changeNodePropShow: function(hasPageId){
        var nodeElements = ['node_identifier','node_label'];
        var pageElements = ['node_identifier_text','node_label_text'];
        pageElements.each(function(id){
            if (!hasPageId) {
                $(id).hide();
            } else {
                $(id).show();
            }
            $(id).innerHTML = '';
        });
        nodeElements.each(function(id){
            if (hasPageId) {
                $(id).hide();
            } else {
                $(id).show();
            }
            $(id).value = '';
        });
        if (hasPageId) {
            $('save_node_button').hide();
        } else {
            $('save_node_button').show();
        }
    },
    newNodePage: function(){
        this.nodePropReset();
        $('node_id').value = '';
        $('node_page_id').value = '';
        this._changeNodePropShow(false);
        //this.tree.getSelectionModel().clearSelections();

        $('delete_node_button').hide();
        $('node_prop_container').show();
        $('cancel_node_button').show();
    },
    cancelNodePage: function(){
        var selectedNode = this.tree.getSelectionModel().getSelectedNode();
        if (selectedNode && selectedNode.id != '_root') {
            this.tree.getSelectionModel().clearSelections();
            selectedNode.select();
        } else {
            $('node_prop_container').hide();
        }
    },
    saveNodePage: function(){
        var hasNodeId = $('node_id').value != '';
        var hasPageId = $('node_page_id').value != '';
        var isValid = this.nodePropValidate();
        if (!isValid) {
            return;
        }

        if (hasNodeId) {
            var node_id = $('node_id').value;
            var node = this.tree.getNodeById(node_id);

            var identifier = $('node_identifier').value;
            for(var i=0, l = node.parentNode.childNodes.length; i < l; i++) {
                checkNode = node.parentNode.childNodes[i];
                if (checkNode.id != node_id && identifier == checkNode.attributes.identifier) {
                    alert('<?php echo $this->__("Node with same Identifier alredy exists!")?>');
                    return false;
                }
            }

            node.text = $('node_label').value;
            node.attributes.identifier = identifier;
        } else {
            var node = new Ext.tree.TreeNode({
                id: '_' + this.increment,
                text: $('node_label').value,
                identifier: $('node_identifier').value,
                page_id: null,
                cls: 'cms_node',
                expanded: true,
                allowDrop: true,
                allowDrag: true
            });

            this.increment ++;
            var parentNode = this.tree.getSelectionModel().getSelectedNode();
            if (!parentNode) {
                parentNode = this.treeRoot;
            }
            parentNode.appendChild(node);
        }
        node.select();
    },
    deleteNodePage: function(){
        if (!$('node_id').value) {
            return;
        }
        var node = this.tree.getNodeById($('node_id').value);
        if (node) {
            if (node.attributes.page_id) {
                this.pageIdentifiers.unset(node.attributes.identifier);
            }
            node.parentNode.select();
            node.parentNode.removeChild(node);
            this.pageGridLoad();
        }
    },
    pageGridLoad: function(){
        var node = this.tree.getSelectionModel().getSelectedNode();
        var fullReset = !node ? true : false;
        var identifiers = this.pageIdentifiers.clone();
        if (node) {
            node.eachChild(function(child){
                identifiers.set(child.attributes.identifier, true);
            });
        }

        var rows = $$('#cms_page_grid .grid table tbody tr');
        rows.each(function(tr){
            if (fullReset) {
                tr.removeClassName('invalid');
                tr.down('.checkbox').disabled = false;
            } else {
                var identifier = tr.down('.identifier').textContent;
                if (identifiers.get(identifier)) {
                    tr.addClassName('invalid');
                    tr.down('.checkbox').disabled = true;
                } else {
                    tr.removeClassName('invalid');
                    tr.down('.checkbox').disabled = false;
                }
            }
        });
    }
};
Ext.onReady(hierarchyNodes.initialize.bind(hierarchyNodes));
</script>

<div id="cms_page_grid_container">
    <div class="entry-edit">
        <div class="entry-edit-head">
            <div style="float: right;"><?php echo $this->getPageGridButtonsHtml() ?></div>
            <h4 class="fieldset-legend head-cms-page-grid icon-head"><?php echo $this->__('CMS Pages')?></h4>
        </div>
        <fieldset>
            <?php echo $this->getChildHtml('cms_page_grid')?>
        </fieldset>
    <div>
</div>

<script type="text/javascript">
<?php echo $this->getGridJsObject(); ?>.initCallback = hierarchyNodes.pageGridLoad.bind(hierarchyNodes);
</script>