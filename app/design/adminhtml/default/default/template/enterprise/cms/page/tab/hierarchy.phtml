<?php
/**
 * Magento Enterprise Edition
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Magento Enterprise Edition License
 * that is bundled with this package in the file LICENSE_EE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.magentocommerce.com/license/enterprise-edition
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category   design
 * @package    default_default
 * @copyright  Copyright (c) 2008 Irubin Consulting Inc. DBA Varien (http://www.varien.com)
 * @license    http://www.magentocommerce.com/license/enterprise-edition
 */
/* @var $this Enterprise_Cms_Block_Adminhtml_Cms_Page_Edit_Tab_Hierarchy */
?>
<div class="entry-edit">
    <div class="entry-edit-head">
        <h4 class="icon-head head-edit-form fieldset-legend"><?php echo $this->__('This Page belongs To') ?></h4>
    </div>
    <div class="fieldset fieldset-wide">
        <input type="hidden" name="node_ids" id="node_ids" value="<?php echo $this->getSelectedNodeIds() ?>" />
        <input type="hidden" name="website_root" id="website_root" value="<?php echo $this->getPage()->getWebsiteRoot() ?>" />
        <input type="hidden" name="nodes_data" id="nodes_data" value="" />
        <div id="hierrachy-nodes" class="tree x-tree"></div>
    </div>
</div>
<script type="text/javascript">
/**
 * Fix ext compatibility with prototype 1.6
 */
Ext.lib.Event.getTarget = function(e) {
    var ee = e.browserEvent || e;
    return ee.target ? Event.element(ee) : null;
};
hierarchyNodes = {
    nodes: <?php echo $this->getNodesJson()?>,
    page: <?php echo $this->getCurrentPageJson() ?>,
    initialize: function(){
        this.increment = 0;
        this.pageAssignedToWebsiteRoot = <?php echo $this->getPage()->getWebsiteRoot()?'true':'false' ?>;
        this.nodeIds = $('node_ids');
        this.tree = new Ext.tree.TreePanel('hierrachy-nodes', {
            animate: false,
            loader: false,
            enableDD: true,
            containerScroll: true,
            rootVisible: false,
            lines: true
        });

        this.treeRoot = new Ext.tree.TreeNode({
            id: 'tree_root',
            expanded: true,
            cls: 'cms_hierarchy_tree'
        });
        this.tree.setRootNode(this.treeRoot);

        this.createNodes();

        this.fixNodes(this.treeRoot);

        this.tree.render();
        this.tree.addListener('check', this.nodeChecked.bind(this));
        this.tree.addListener('nodedragover', this.onDragOver.bind(this));
        this.tree.addListener('move', this.saveTreeData.bind(this));
        this.treeRoot.select();
        this.saveTreeData();
    },
    createNodes: function(){
        for (var i = 0, l = this.nodes.length; i < l; i++) {
            var dd = (this.nodes[i].parent_node_id && this.nodes[i].current_page) ? true : false;
            var node = new Ext.tree.TreeNode({
                id: this.nodes[i].node_id,
                text: this.nodes[i].label,
                cls: this.nodes[i].current_page ? 'cur-page' : '',
                expanded: false,
                allowDrop: true,
                allowDrag: dd,
                uiProvider: this.nodes[i].current_page ? null : Ext.tree.CheckboxNodeUI,
                checked: this.nodes[i].page_exists,
                current_page: this.nodes[i].current_page
            });

            if (parentNode = this.tree.getNodeById(this.nodes[i].parent_node_id)) {
                parentNode.appendChild(node);
            } else {
                this.treeRoot.appendChild(node);
            }
        }
    },
    fixNodes: function(node) {
        var child = this.findCurrentPageChildNode(node);
        if (node.attributes.checked && !child) {
            this.addPageToNode(this.page, node);
        } else if (!node.attributes.checked && child) {
            node.removeChild(child);
        }
        var children = node.childNodes;
        if (children) {
            for (var i = 0; i < children.length; i++){
                this.fixNodes(children[i]);
            }
        }
    },
    nodeChecked: function(node) {
        var child = this.findCurrentPageChildNode(node);
        if(node.attributes.checked) {
            if (child) {
                return; //prevent issues with double event fire on checking checkbox without childs
            }
            this.addPageToNode(this.page, node);
        } else {
            if (child) {
                node.removeChild(child);
            }
        }
        this.saveTreeData();
    },
    addPageToNode: function(page, node) {
        var newNode = new Ext.tree.TreeNode({
            id: '_' + this.increment,
            text: page.label,
            identifier: null,
            page_id: page.id,
            expanded: false,
            current_page: true,
            allowDrop: false,
            allowDrag: true,
            cls: 'cur-page'
        });
        this.increment++;
        node.appendChild(newNode);
        node.getUI().addClass('x-tree-node-expanded'); // fix issues with styling for expanded nodes
    },
    findCurrentPageChildNode: function(node) {
        var children = node.childNodes;
        for (var i = 0; i < children.length; i++){
            if (children[i].attributes.current_page) {
                return children[i];
            }
        }
    },
    onDragOver: function(dragOverEvent) {
        if (dragOverEvent.point == 'append') {
            if (dragOverEvent.target != dragOverEvent.dropNode.parentNode) {
                return false;
            }
        } else {
            if (dragOverEvent.target.parentNode != dragOverEvent.dropNode.parentNode) {
                return false;
            }
        }
        return true;
    },
    saveTreeData: function(){
        this.collectChilds(this.treeRoot);
        $('nodes_data').value = this.treeData.toJSON();
    },
    collectChilds: function(node){
        if (node.id == 'tree_root') {
            this.treeData = new Hash();
        } else {
            this.treeData.set(node.id, {
                node_id: node.id,
                parent_node_id: node.parentNode.id == 'tree_root' ? null : node.parentNode.id,
                label: node.attributes.text,
                sort_order: node.parentNode.indexOf(node),
                current_page: node.attributes.current_page,
                page_exists: node.attributes.checked
            });
        }
        if (node.hasChildNodes()) {
            node.eachChild(this.collectChilds.bind(this));
        }
    }
};
Ext.onReady(hierarchyNodes.initialize.bind(hierarchyNodes));
</script>
