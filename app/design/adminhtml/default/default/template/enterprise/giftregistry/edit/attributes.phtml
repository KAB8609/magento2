<?php
/**
 * Magento Enterprise Edition
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Magento Enterprise Edition License
 * that is bundled with this package in the file LICENSE_EE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.magentocommerce.com/license/enterprise-edition
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     default_default
 * @copyright   Copyright (c) 2009 Irubin Consulting Inc. DBA Varien (http://www.varien.com)
 * @license     http://www.magentocommerce.com/license/enterprise-edition
 */
?>

<div class="entry-edit custom-options attribute-custom-options">
    <div class="entry-edit-head">
        <h4><?php echo $this->getFormTitle() ?></h4>
        <div class="right"><?php echo $this->getAddButtonHtml() ?></div>
    </div>

    <div id="attribute_options_container" class="box">
        <div id="attribute_options_container_top"></div>

        <?php echo $this->getTemplatesHtml() ?>

<script type="text/javascript">
//<![CDATA[
var firstStepTemplate =
	'<div class="option-box" id="option_{{id}}">'+
    '<table id="attribute_{{id}}" class="option-header" cellpadding="0" cellspacing="0">'+
    '<thead>'+
        '<tr>'+
            '<th><?php echo Mage::helper('enterprise_giftregistry')->__('Code') ?> <span class="required">*</span></th>'+
            '<th><?php echo Mage::helper('enterprise_giftregistry')->__('Input Type') ?> <span class="required">*</span></th>'+
            '<th><?php echo Mage::helper('enterprise_giftregistry')->__('Attribute Group') ?> <span class="required">*</span></th>'+
            '<th><?php echo Mage::helper('enterprise_giftregistry')->__('Label') ?> <span class="required">*</span></th>'+
            '<th><?php echo Mage::helper('enterprise_giftregistry')->__('Sort Order') ?></th>'+
            '<th class="a-right"><?php echo $this->jsQuoteEscape($this->getDeleteButtonHtml()) ?></th>'+
        '</tr>'+
    '</thead>'+
    '<tr>'+
        '<td><input type="text" class="required-entry input-text" id="attribute_{{id}}_code" name="attribute[{{id}}][code]" value="{{code}}"></td>'+
        '<td><?php echo $this->getTypeSelectHtml() ?></td>'+
        '<td><?php echo $this->getGroupSelectHtml() ?></td>'+
        '<td><input type="text" class="required-entry input-text" id="attribute_{{id}}_label" name="attribute[{{id}}][label]" value="{{label}}">{{checkboxScopeTitle}}</td>'+
        '<td><input type="text" class="input-text" id="attribute_{{id}}_sort_order" name="attribute[{{id}}][sort_order]" value="{{sort_order}}">{{checkboxScopeSort}}</td>'+
        '<td>&nbsp;</td>'+
    '</tr>'+
    '</table></div>';

var attributeOption = {
    div : $('attribute_options_container_top'),
    templateSyntax : /(^|.|\r|\n)({{(\w+)}})/,
    templateText : firstStepTemplate,
    itemCount : 1,
    add : function(data) {

        if(!data.id){
            data = {};
            data.id  = this.itemCount;
        }

        this.template = new Template(this.templateText, this.templateSyntax);
        Element.insert(this.div, {'after':this.template.evaluate(data)});

        if (data.type) {
            $A($('attribute_'+data.id+'_type').options).each(function(option){
                if (option.value==data.type) option.selected = true;
            });
        }
        if (data.group) {
            $A($('attribute_'+data.id+'_group').options).each(function(option){
                if (option.value==data.group) option.selected = true;
            });
        }

        if (data.checkboxScopeTitle) {
            if ($('attribute_'+data.id+'_label') && data.scopeTitleDisabled) {
                $('attribute_'+data.id+'_label').disable();
            }
        }
        if (data.checkboxScopeSort) {
            if ($('attribute_'+data.id+'_sort_order') && data.scopeSortDisabled) {
                $('attribute_'+data.id+'_sort_order').disable();
            }
        }

        this.itemCount++;
        this.bindRemoveButtons();
        attributeOptionType.bindSelectInputType();
    },
    remove : function(event){
        var element = $(Event.findElement(event, 'div'));
        if (element) {
            element.remove();
        }
    },
    bindRemoveButtons : function(){
        var buttons = $$('div.attribute-custom-options .delete-attribute-option');
        for(var i=0;i<buttons.length;i++){
            if(!$(buttons[i]).binded){
                $(buttons[i]).binded = true;
                Event.observe(buttons[i], 'click', this.remove.bind(this));
            }
        }
        var inputs = $$('div.attribute-custom-options button', 'div.attribute-custom-options input', 'div.attribute-custom-options select');
        inputs.each(function(el) { Event.observe(el, 'change', el.setHasChanges.bind(el));  } )
    }
}

var attributeOptionType = {
    templateSyntax : /(^|.|\r|\n)({{(\w+)}})/,
    loadStepTwo : function(event){

    },
    addDataToValues : function(data){

    },
    bindSelectInputType : function(){
        var types = $$('.select-attribute-option-type');
        for(var i=0;i<types.length;i++){
            if(!$(types[i]).binded){
                $(types[i]).binded = true;
                Event.observe(types[i], 'change', function(event){
                    attributeOptionType.loadStepTwo(event);
                });
            }
        }
    }
}

var attributeOptionScope = {
    addScope : function(event){
        var element = $(Event.element(event));
        fieldToDisable = $(element.readAttribute('id').sub('_use_default', ''));

        if (fieldToDisable.disabled) {
            fieldToDisable.enable();
        } else {
            fieldToDisable.disable();
        }
    },
    bindScopeCheckbox : function(){
        var checkboxes = $$('.attribute-option-scope-checkbox');
        for (var i=0;i<checkboxes.length;i++) {
            if (!$(checkboxes[i]).binded) {
                $(checkboxes[i]).binded = true;
                Event.observe(checkboxes[i], 'click', this.addScope.bind(this));
            }
        }
    }
}

if($('option_panel')){
    $('option_panel').remove();
}

attributeOption.bindRemoveButtons();

if($('<?php echo $this->getAddButtonId() ?>')){
    Event.observe('<?php echo $this->getAddButtonId() ?>', 'click', attributeOption.add.bind(attributeOption));
}

<?php foreach ($this->getOptionValues() as $_value): ?>
    attributeOption.add(<?php echo $_value->toJson() ?>);
<?php endforeach; ?>

attributeOptionScope.bindScopeCheckbox();
//]]>
</script>
</div>
</div>
