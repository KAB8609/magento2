<?php
/**
 * {license_notice}
 *
 * @category    Saas
 * @package     Saas_PrintedTemplate
 * @copyright   {copyright}
 * @license     {license_link}
 */
?>
<?php
/**
 * @var Saas_PrintedTemplate_Block_Adminhtml_Template_Edit $this
 */
?>
<div class="content-header">
    <h3 class="icon-head head-system-printed-template"><?php echo $this->getHeaderText() ?></h3>
    <p class="content-buttons form-buttons">
        <?php echo $this->getBackButtonHtml(); ?>
        <?php echo $this->getResetButtonHtml(); ?>
        <?php /** @todo: replace this checking to block */ ?>
        <?php if ($this->getEditMode()): ?>
            <?php echo $this->getDeleteButtonHtml(); ?>
        <?php endif; ?>
        <?php echo $this->getPreviewHtmlButtonHtml(); ?>
        <?php echo $this->getPreviewPdfButtonHtml(); ?>
        <?php echo $this->getSaveButtonHtml(); ?>
        <?php echo $this->getSaveAndContinueButtonHtml(); ?>
    </p>
</div>

<?php if (!$this->getEditMode()): ?>
<form action="<?php echo $this->getLoadUrl() ?>" method="post" id="printed_template_load_form">
    <?php echo $this->getBlockHtml('formkey')?>
    <div class="entry-edit">
        <div class="entry-edit-head">
            <h4 class="icon-head head-edit-form fieldset-legend">
            <?php echo Mage::helper('Saas_PrintedTemplate_Helper_Data')->__('Load Sample Template') ?>
            </h4>
            <div class="form-buttons"></div>
        </div>
        <div class="fieldset">
            <table class="form-list" cellspacing="0">
                <tbody>
                    <tr>
                        <td class="label">
                            <label for="template_select">
                            <?php echo Mage::helper('Saas_PrintedTemplate_Helper_Data')->__('Template') ?>
                            <span class="required">*</span>
                            </label>
                        </td>
                        <td class="value">
                            <select id="template_select" name="code" class="select required-entry">
                                <?php foreach ($this->getTemplateOptions() as $_option): ?>
                                <option value="<?php echo $_option['value'] ?>"><?php echo $this->escapeHtml($_option['label']) ?></option>
                                <?php endforeach; ?>
                            </select>
                        </td>
                        <td></td>
                    </tr>
                    <tr>
                        <td class="label">
                            <label for="locale_select">
                            <?php echo Mage::helper('Saas_PrintedTemplate_Helper_Data')->__('Sample Template') ?>
                            <span class="required">*</span>
                            </label>
                        </td>
                        <td class="value">
                            <select id="locale_select" name="locale" class="select required-entry">
                                <?php foreach ($this->getLocaleOptions() as $_option): ?>
                                <option value="<?php echo $_option['value'] ?>"<?php if ($_option['value']==$this->getCurrentLocale()): ?> selected="selected"<?php endif; ?>><?php echo $this->escapeHtml(Mage::helper('Saas_PrintedTemplate_Helper_Data')->__($_option['label'])) ?></option>
                                <?php endforeach; ?>
                            </select>
                        </td>
                        <td></td>
                    </tr>
                    <tr>
                        <td class="label">
                            <label>&nbsp;</label>
                        </td>
                        <td class="value">
                            <?php echo $this->getLoadButtonHtml() ?>
                        </td>
                        <td></td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</form>
<?php endif ?>

<script type="text/javascript">
//<![CDATA[
    Variables.unfoldVariablesGroup = function(unfoldLink) {
        var prefix = unfoldLink.id.replace('_unfold_link', '');
        var childsClass = prefix + '_child';
        var foldLinkId = prefix + '_fold_link';
        $$('.' + childsClass).each(function(el) {el.show();});
        $(unfoldLink).hide();
        $(foldLinkId).show();
        this.dialogWindow.updateHeight();
    };
    Variables.foldVariablesGroup = function(foldLink) {
        var prefix = foldLink.id.replace('_fold_link', '');
        var childsClass = prefix + '_child';
        var unfoldLinkId = prefix + '_unfold_link';
        $$('.' + childsClass).each(function(el) {el.hide();});
        $(foldLink).hide();
        $(unfoldLinkId).show();
        this.dialogWindow.content.setStyle({height: '0px'});
        this.dialogWindow.updateHeight();
    };
    Variables.openVariableChooser = function(variables) {
        if (this.variablesContent == null && variables) {
            this.variablesContent = '<ul>';
            this.variablesGroupsInc = 0;
            variables.each(function(variableGroup) {
                if (variableGroup.label && variableGroup.value) {
                    this.variablesGroupsInc++;
                    this.variablesContent += '<li id="variableGroup_' + this.variablesGroupsInc + '">'
                        + '<a id="variableGroup_' + this.variablesGroupsInc + '_unfold_link" href="javascript: void(0);" onclick="Variables.unfoldVariablesGroup(this);"><img src="<?php echo $this->getModuleViewFileUrl('wysiwyg/tiny_mce/plugins/magentovariable/img/nolines_plus.gif'); ?>" style="margin: 0 -3px -5px 0;" /></a>'
                        + '<a id="variableGroup_' + this.variablesGroupsInc + '_fold_link" href="javascript: void(0);" style="display: none;" onclick="Variables.foldVariablesGroup(this);"><img src="<?php echo $this->getModuleViewFileUrl('wysiwyg/tiny_mce/plugins/magentovariable/img/nolines_minus.gif'); ?>" style="margin: 0 -3px -5px 0;" /></a>'
                        + '<b>' + variableGroup.label + '</b>'
                        + '</li>';
                    (variableGroup.value).each(function(variable){
                        if (variable.value && variable.label) {
                            this.variablesContent += '<li style="padding-left: 20px; display: none;" class="variableGroup_' + this.variablesGroupsInc + '_child">' +
                                this.prepareVariableRow(variable.value, variable.label).replace('href="#"', 'href="javascript: void(0);"') + '</li>';
                        }
                    }.bind(this));
                }
            }.bind(this));
            this.variablesContent += '</ul>';
        }
        if (this.variablesContent) {
            this.openDialogWindow(this.variablesContent);
        }
    };

    MagentovariablePlugin.loadChooser = function(url, textareaId) {
        this.textareaId = textareaId;
        if (this.variables == null) {
            if (typeof(printedTemplateType) != 'undefined' && printedTemplateType) {
                url += 'template_type/' + printedTemplateType + '/';
            }
            new Ajax.Request(url, {
                parameters: {},
                onComplete: function (transport) {
                    if (transport.responseText.isJSON()) {
                        Variables.init(null, 'MagentovariablePlugin.insertVariable');
                        this.variables = transport.responseText.evalJSON();
                        this.openChooser(this.variables);
                    }
                }.bind(this)
             });
        } else {
            this.openChooser(this.variables);
        }
        return;
    };
//]]>
</script>

<form action="<?php echo $this->getSaveUrl() ?>" method="post" id="printed_template_edit_form">
    <?php echo $this->getBlockHtml('formkey')?>
    <fieldset>
        <?php echo $this->getFormHtml() ?>
    </fieldset>
</form>
<form action="<?php echo $this->getPreviewUrl() ?>" method="post" id="printed_template_preview_form" target="_blank">
    <?php echo $this->getBlockHtml('formkey')?>
    <div class="no-display">
        <input type="hidden" id="preview_text" name="text" value="" />
    </div>
</form>

<?php
    $wysiwygConfig = Mage::getSingleton('Saas_PrintedTemplate_Model_Wysiwyg_Config');
    $printedTemplate = $this->getPrintedTemplate();
    $deleteConfirmMessage = $this->__('Are you sure that you want to delete this template?');
    if ($printedTemplate->getId() && count($printedTemplate->getSystemConfigPathsWhereUsedCurrently())) {
        $deleteConfirmMessage .= ' ' . $this->__('Configuration settings where current template is selected will be set to default values.');
    }
?>
<script type="text/javascript">
//<![CDATA[
    var printedTemplateType = '<?php echo $printedTemplate->getEntityType() ?>';

    var formPrefix = '<?php echo $this->getChildBlock('form')->getForm()->getHtmlIdPrefix(); ?>';
    var editorFonts = '<?php echo $wysiwygConfig->getFonts(); ?>';
    var editorPageBreakSeparator = '<?php echo $wysiwygConfig->getPageBreakSeparator(); ?>';
    var editorButtonsToRemove = '<?php echo $wysiwygConfig->getButtonsToRemove(); ?>';
    editorButtonsToRemove = editorButtonsToRemove.split(',');
    if (typeof(tinyMCE) != 'undefined') {
        tinyMCE.onAddEditor.add(function (sender, editor) {
            var allowedEditors = [formPrefix + 'content', formPrefix + 'header', formPrefix + 'footer'];

            if (allowedEditors.indexOf(editor.id) > -1 || (editor.id == 'mce_fullscreen'
                    && typeof(this.oldSettings) != 'undefined' && allowedEditors.indexOf(this.oldSettings.id) > -1)) {
                editor.settings.theme_advanced_fonts = editorFonts;
                editor.settings.extended_valid_elements = 'style[dir<ltr?rtl|lang|media|title|type]';
                editor.settings.pagebreak_separator = editorPageBreakSeparator;
                editor.settings.magentoheader_separator = '<?php echo $wysiwygConfig->getHeaderSeparator(); ?>';
                editor.settings.magentofooter_separator = '<?php echo $wysiwygConfig->getFooterSeparator(); ?>';
                editor.settings.magentoheader_error_message = '<?php echo $this->jsQuoteEscape($wysiwygConfig->getHeaderErrorMessage()); ?>';
                editor.settings.magentofooter_error_message = '<?php echo $this->jsQuoteEscape($wysiwygConfig->getFooterErrorMessage()); ?>';
                // allow style tag in tinyMce content
                editor.settings.valid_children = "+body[style]";
                editor.onInit.add(function (ed) {
                    var btn;
                    for (var i = 0; i < editorButtonsToRemove.length; i++) {
                        btn = ed.controlManager.get(editorButtonsToRemove[i]);
                        if (typeof(btn) != 'undefined') {
                            btn.remove();
                        }
                    }
                });
            }
        });
    }

    var templateForm = jQuery('#printed_template_edit_form').mage('form').mage('validation');
    var templatePreviewForm = jQuery('#printed_template_preview_form').mage('form').mage('validation');
    var templateControl = {
        checkTemplate: function(successHandler) {
            var onComplete = function(response) {
                var responseJson = response.responseText.evalJSON();
                if (responseJson.error) {
                    alert(responseJson.message);
                }
                else if (typeof successHandler == 'function') {
                    successHandler.call(this);
                }
            }

            if (typeof tinyMCE != 'undefined') {
                tinyMCE.triggerSave();
            }

            new Ajax.Request('<?php echo $this->getCheckTemplateUrl() ?>', {
                method: 'post',
                parameters: templateForm.serialize(),
                onComplete: onComplete,
                onFailure: function() {
                    location.href = BASE_URL;
                }
            });
        },

        save: function() {
            this.checkTemplate(function() {
                templateForm.submit();
            });

            return false;
        },

        saveAndContinue: function() {
            var formElem = $('printed_template_edit_form');
            this.checkTemplate(function() {
                formElem.action = '<?php echo $this->getSaveAndContinueUrl() ?>';
                templateForm.submit();
            });

            return false;
        },

        preview: function(url) {

            var successHandler = function() {
                var formElem = $('printed_template_edit_form');
                var oldUrl = formElem.action;
                formElem.writeAttribute('target', '_blank');
                $('printedtemplate_name').removeClassName('required-entry');
                $('printedtemplate_content').removeClassName('required-entry');

                // Safari sequential form submit workaround
                if (url.indexOf('?') == -1) {
                    url += '?';
                } else {
                    url += '&';
                }
                url += 'r=' + Math.round(Math.random()*100000);
                //-------------------------------------------

                templateForm.attr('action', url);
                templateForm.submit();
                formElem.writeAttribute('target', '');
                $('printedtemplate_name').addClassName('required-entry');
                $('printedtemplate_content').addClassName('required-entry');
                formElem.action = oldUrl;
            }

            this.checkTemplate(successHandler);

            return false;
        },

        deleteTemplate: function() {
            if(window.confirm("<?php echo $this->jsQuoteEscape($deleteConfirmMessage); ?>")) {
                   window.location.href = '<?php echo $this->getDeleteUrl() ?>';
            }
        },

        load: function() {
            var form = jQuery('#printed_template_load_form').mage('validation');

            if (!form.valid()) {
                return;
            }

            this.variables = null;

            new Ajax.Request(form.attr('action'), {
               parameters: form.serialize(),
               area: $('printed_template_load_form'),
               onComplete: function (transport) {
                   if (transport.responseText.isJSON()) {
                       var fields = $H(transport.responseText.evalJSON()).toObject();
                       if (fields.name) {
                           $(formPrefix + "name").value = fields.name;
                       }

                       var headerAutoHeight = $(formPrefix + 'header_auto_height');
                       if (headerAutoHeight) {
                           headerAutoHeight.checked = fields.header_auto_height;
                           templateControl.updateHeightFields(headerAutoHeight, 'header');
                       }
                       if (fields.header_height) {
                           $(formPrefix + "header_height").value = fields.header_height;
                           $(formPrefix + "header_height_measurement").value = "<?php echo Zend_Measure_Length::MILLIMETER ?>";
                       }

                       var footerAutoHeight = $(formPrefix + 'footer_auto_height');
                       if (footerAutoHeight) {
                           footerAutoHeight.checked = fields.footer_auto_height;
                           templateControl.updateHeightFields(footerAutoHeight, 'footer');
                       }
                       if (fields.footer_height) {
                           $(formPrefix + "footer_height").value = fields.footer_height;
                           $(formPrefix + "footer_height_measurement").value = "<?php echo Zend_Measure_Length::MILLIMETER ?>";
                       }
                       if (fields.content) {
                           if (typeof tinyMCE == 'undefined' || !tinyMCE.getInstanceById(formPrefix + 'content')) {
                               $(formPrefix + "content").value = fields.content;
                           } else {
                               tinyMCE.getInstanceById(formPrefix + 'content').setContent(fields.content);
                           }
                       }
                   }
               }
            });

        },

        updateHeightFields: function (autoHeightCheckbox, type) {
            if (!autoHeightCheckbox || !type) {
                return false;
            }

            var height = $('printedtemplate_' + type + '_height');
            var heightMeasurement = $('printedtemplate_' + type + '_height_measurement');
            if (autoHeightCheckbox.checked) {
                height.disable();
                heightMeasurement.disable();
            } else {
                height.enable();
                heightMeasurement.enable();
            }
        }
    };


    var headerAutoHeight = $('printedtemplate_header_auto_height');
    var footerAutoHeight = $('printedtemplate_footer_auto_height');
    templateControl.updateHeightFields(headerAutoHeight, 'header');
    templateControl.updateHeightFields(footerAutoHeight, 'footer');
    //]]>
</script>

<style type="text/css">
    .form-list td.value .composite-element input.height-field {width: 60px !important; text-align: right; height: 17px;}
    .form-list td.value .composite-element select.height-measure-field {width: 210px !important;}

    .form-list td.value .composite-element input,
    .form-list td.value .composite-element select {display: inline;}

    .form-list td.value .composite-element {float: left; margin-right: 5px;}
</style>

