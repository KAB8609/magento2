<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     default_default
 * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<?php
/**
 * @see Saas_Paypal_Block_Adminhtml_System_Config_EnterBoarding
 * @var $this Saas_Paypal_Block_Adminhtml_System_Config_EnterBoarding
 */

/** @var Saas_Paypal_Helper_Data $paypalHelper */
$paypalHelper = Mage::helper('Saas_Paypal_Helper_Data');

?>
<?php $_account = $this->getAccount() ?>
<?php if ($this->isDisplayAccount() && !empty($_account)) : ?>
<tr id="row0_<?php echo $this->getHtmlId() ?>">
    <td class="label"><label><?php echo $this->getAccountLabel() ?></label></td>
    <td class="label pp-permissions-links" colspan="2"><div><?php echo $_account ?></div></td>
    <td></td>
</tr>
<?php endif; ?>

<tr id="row_<?php echo $this->getHtmlId() ?>">
    <td class="label"><label><?php echo $this->getStatusLabel() ?></label></td>
    <td class="label pp-permissions-links" colspan="2"><div id="<?php echo $this->getHtmlId()?>"><?php echo $this->getStatusName() ?></div></td>
    <td></td>
</tr>

<?php if ($this->isDisplayButton()) : ?>
<tr id="row2_<?php echo $this->getHtmlId() ?>">
    <td class="label"></td>
    <td class="label pp-permissions-links" colspan="2">
    <?php if (!$this->isPermissionActive()) : ?>
        <?php echo $this->__('You will need a PayPal business account to enable the solution.') ?>
        <a href="<?php echo $this->getCreateLink(); ?>" target="_blank"><?php echo $this->__('Click here to create an account') ?></a>
        <br />
        <?php echo $this->__('Already have a PayPal business account?')?>
    <?php endif; ?>
        <button onclick="enterBoarding('<?php echo $this->getPaymentMethod() ?>')" class="scalable" type="button" id="<?php echo $this->getHtmlId() ?>_button"><span><span><span><?php echo $this->getButtonLabel(); ?></span></span></span></button>
    </td>
    <td></td>
</tr>
<?php endif; ?>

<script type="text/javascript">
/**
 * Do EnterBoarding and redirect to PayPal page
 */
function enterBoarding(methodCode, isAccelerated)
{
    var acceleratedBoardingMessage = '<?php echo $this->jsQuoteEscape($this->__("You will be redirected to the PayPal site. All unsaved config data will be lost.")); ?>'
        + "\n"
        + '<?php echo $this->jsQuoteEscape($this->__("Once you log in to PayPal, you will need to grant permissions to Magento Go.")); ?>'
    var permissionsMessage = '<?php echo $this->jsQuoteEscape($this->__("After redirect to PayPal, your PayPal account settings will be reset. All unsaved config data will be lost.")); ?>';
    if (confirm(isAccelerated ? acceleratedBoardingMessage : permissionsMessage)) {

        new Ajax.Request('<?php echo $this->getEnterBoardingUrl() ?>', {
            parameters: {
                isAjax: 1,
                method: 'POST',
                paymentMethod: methodCode
            },
            onSuccess: function(transport) {
                var response = transport.responseText.evalJSON();
                if (response.error) {
                    alert(response.message);
                } else {
                    setLocation(response.url);
                }
            }
        });
    }
}

if (!FormElementDependenceController.prototype.redefined) {
    FormElementDependenceController.prototype.trackChange = function(e, idTo, valuesFrom) {
        var shouldShowUp = true;
        for (var idFrom in valuesFrom) {
            var from = $(idFrom);
            if (from) {
                var values = valuesFrom[idFrom]['values'];
                var isInArray = values.indexOf(from.value) != -1;
                var isNegative = valuesFrom[idFrom]['negative'];
                if (!from || isInArray && isNegative || !isInArray && !isNegative) {
                    shouldShowUp = false;
                }
            }
        }

        // toggle target row
        var headElement = $(idTo + '-head');
        if (shouldShowUp) {
            var currentConfig = this._config;
            if ($(idTo).select('input', 'select', 'td')) {
                $(idTo).select('input', 'select', 'td').each(function (item) {
                    // don't touch hidden inputs (and Use Default inputs too), bc they may have custom logic
                    if ((!item.type || item.type != 'hidden') && !($(item.id+'_inherit') && $(item.id+'_inherit').checked)
                        && !(currentConfig.can_edit_price != undefined && !currentConfig.can_edit_price)) {
                        $(item).addClassName('fd-enabled');
                        item.disabled = false;
                        jQuery(item).removeClass('ignore-validate');
                    }
                });
            }
            if (headElement) {
                headElement.show();
                if (headElement.hasClassName('open')) {
                    $(idTo).show();
                } else {
                    $(idTo).hide();
                }
            } else {
                $(idTo).show();
                if ($(idTo).tagName.toLowerCase() in ['input', 'select']) {
                    $(idTo).disabled = false;
                }
            }
        } else {
            if ($(idTo).select('input', 'select', 'td')) {
                $(idTo).select('input', 'select', 'td').each(function (item){
                    // don't touch hidden inputs (and Use Default inputs too), bc they may have custom logic
                    if ((!item.type || item.type != 'hidden') && !($(item.id+'_inherit') && $(item.id+'_inherit').checked)) {
                        $(item).removeClassName('fd-enabled');
                        item.disabled = true;
                        jQuery(item).addClass('ignore-validate');
                    }
                });
            }
            if (headElement) {
                headElement.hide();
            }
            $(idTo).hide();

            if ($(idTo).tagName.toLowerCase() in ['input', 'select']) {
                $(idTo).disabled = true;
            }

        }
        var rowElement = $('row_' + idTo);
        if (rowElement == undefined) {
            rowElement = $(idTo).up(this._config.levels_up);
        }
        if (rowElement) {
            if (shouldShowUp) {
                rowElement.show();
            } else {
                rowElement.hide();
            }
        }

        if (idTo == 'payment_paypal_group_all_in_one_wpp_us_wpp_required_settings_wpp_and_express_checkout_direct_boarding_status'
            || idTo == 'payment_paypal_alternative_payment_methods_express_checkout_us_express_checkout_required_express_checkout_required_express_checkout_status') {
            var elementList = [$('row0_'+idTo), $('row2_'+idTo)];
            for (var i = 0; i < elementList.length; i++)
            {
                if (elementList[i]) {
                    if (shouldShowUp) {
                        elementList[i].show();
                    } else {
                        elementList[i].hide();
                    }
                }
            }
        }
    }
}
FormElementDependenceController.prototype.redefined = 1;
/*
function(e, idTo, valuesFrom)
    {
        if (!$(idTo)) {
            return;
        }

        // define whether the target should show up
        var shouldShowUp = true;
        for (var idFrom in valuesFrom) {
            var from = $(idFrom);
            if (valuesFrom[idFrom] instanceof Array) {
                if (!from || valuesFrom[idFrom].indexOf(from.value) == -1) {
                    console.log(1);
                    console.log(idFrom);
                    shouldShowUp = false;
                }
            } else {
                if (!from || from.value != valuesFrom[idFrom]) {
                    console.log(2);
                    console.log(idFrom);
                    shouldShowUp = false;
                }
            }
        }

        // toggle target row
        if (shouldShowUp) {
            var currentConfig = this._config;
            $(idTo).up(this._config.levels_up).select('input', 'select', 'td').each(function (item) {
                // don't touch hidden inputs (and Use Default inputs too), bc they may have custom logic
                if ((!item.type || item.type != 'hidden') && !($(item.id+'_inherit') && $(item.id+'_inherit').checked)
                    && !(currentConfig.can_edit_price != undefined && !currentConfig.can_edit_price)) {
                    item.disabled = false;
                }
            });
            $(idTo).up(this._config.levels_up).show();
        } else {
            $(idTo).up(this._config.levels_up).select('input', 'select', 'td').each(function (item){
                // don't touch hidden inputs (and Use Default inputs too), bc they may have custom logic
                if ((!item.type || item.type != 'hidden') && !($(item.id+'_inherit') && $(item.id+'_inherit').checked)){
                    item.disabled = true;
                }
            });
            $(idTo).up(this._config.levels_up).hide();
        }

        // Saas changes
        // TODO: avoid copypaste, use inheritance, if possible
        if (idTo == 'payment_express_checkout_required_express_checkout_status'
            || idTo == 'payment_wpp_and_express_checkout_direct_boarding_status') {
            var elementList = [$('row0_'+idTo), $('row2_'+idTo)];
            for (var i = 0; i < elementList.length; i++)
            {
                if (elementList[i]) {
                    if (shouldShowUp) {
                        elementList[i].show();
                    } else {
                        elementList[i].hide();
                    }
                }
            }
        }

        var authMethodId;
        var usedCredentials;
        var hideStatus = false;

        switch (idTo) {
            //EC
            case 'payment_express_checkout_required_express_checkout_status':
                authMethodId = 'payment_express_checkout_required_express_checkout_authentication_method';
                usedCredentials = <?php echo intval($paypalHelper->isEcCredentials()) ?>;
                hideStatus = true;
                break;
            //WPP
            case 'payment_wpp_and_express_checkout_direct_boarding_status':
                authMethodId = 'payment_wpp_and_express_checkout_authentication_method';
                usedCredentials = <?php echo intval($paypalHelper->isWppOrWppUkCredentials()) ?>;
                hideStatus = true;
                break;
        }

        if (hideStatus && usedCredentials) {
            var rowToHide = $('row_' + idTo);
            var authMethod = $(authMethodId);

            if (rowToHide && authMethod && authMethod.value == 1 && $(idTo).innerHTML != 'Active') {
                rowToHide.hide();
            }
        }
    }
}
*/

</script>
