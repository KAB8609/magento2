<?php
/**
 * {license_notice}
 *
 * @category    design
 * @package     default_default
 * @copyright   {copyright}
 * @license     {license_link}
 */
?>
<?php
/**
 * @var $this Mage_Adminhtml_Block_Catalog_Product_Edit
 */
?>



<div class="content-header">
    <h3 class="icon-head head-products"><?php echo $this->getHeader() ?></h3>
    <p class="content-buttons form-buttons"><?php echo $this->getBackButtonHtml() ?>
    <?php echo $this->getCancelButtonHtml() ?>
    <?php if($this->getProductId()): ?>
        <?php echo $this->getDeleteButtonHtml() ?>
        <?php if($this->getProductSetId() && $this->getIsConfigured()): ?>
            <?php echo $this->getDuplicateButtonHtml() ?>
        <?php endif; ?>
    <?php endif; ?>
    <?php if($this->getProductSetId() && $this->getIsConfigured()): ?>
        <?php echo $this->getChangeAttributeSetButtonHtml() ?>
        <?php echo $this->getSaveButtonHtml() ?>
        <?php echo $this->getSaveAndEditButtonHtml() ?>
    <?php endif; ?>
    </p>
</div>
<form action="<?php echo $this->getSaveUrl() ?>" method="post" id="product_edit_form" enctype="multipart/form-data">
    <?php echo $this->getBlockHtml('formkey')?>
    <div style="display:none"></div>
</form>
<script type="text/javascript">
//<![CDATA[
    var productTemplateSyntax = /(^|.|\r|\n)({{(\w+)}})/;
    var productForm = new varienForm('product_edit_form', '<?php echo $this->getValidationUrl() ?>');
    productForm._processValidationResult = function(transport) {
        var response = transport.responseText.evalJSON();
        if (response.error){
            if (response.attribute && $(response.attribute)) {
                $(response.attribute).setHasError(true, productForm);
                Validation.ajaxError($(response.attribute), response.message);
                if (!Prototype.Browser.IE){
                    $(response.attribute).focus();
                }
            }
            else if ($('messages')) {
                $('messages').innerHTML = '<ul class="messages"><li class="error-msg"><ul><li>' + response.message + '</li></ul></li></ul>';
            }
        }
        else{
            productForm._submit();
        }
    };
    function saveAndContinueEdit(urlTemplate) {
        var template = new Template(urlTemplate, productTemplateSyntax);
        var url = template.evaluate({tab_id:product_info_tabsJsTabs.activeTab.id});
        productForm.submit(url);
    }
    function setSettings(urlTemplate, setElement, typeElement) {
        var template = new Template(urlTemplate, productTemplateSyntax);
        setLocation(template.evaluate({attribute_set:$F(setElement),type:$F(typeElement)}));
    }

     function setSuperSettings(urlTemplate, attributesClass, validateField) {
        var attributesFields = $$('.' + attributesClass);
        var attributes = Form.serializeElements(attributesFields, true).attribute;
        if(typeof attributes == 'string') {
            attributes = [attributes];
        }

        if(!attributes) {
            $(validateField).value = 'no-attributes';
        } else {
            $(validateField).value = 'has-attributes';
        }

        if (productForm.validator.validate()) {
            var template = new Template(urlTemplate, productTemplateSyntax);
            var url = template.evaluate({
                attributes: encode_base64(attributes.join(',')).replace(new RegExp('/','g'),'%2F').replace(new RegExp('=','g'),'%3D')
            });
            setLocation(url);
        }
    }

    function checkMaxLength(Object, MaxLen)
    {
        if (Object.value.length > MaxLen-1) {
            Object.value = Object.value.substr(0, MaxLen);
        }
        return 1;
    }

Event.observe(window, 'load', function() {
    var objName = '<?php echo $this->getSelectedTabId() ?>';
    if (objName) {
        obj = $(objName);
        //IE fix (bubbling event model)
        product_info_tabsJsTabs.setSkipDisplayFirstTab();
        product_info_tabsJsTabs.showTabContent(obj);
    }
    Product.AttributesBridge.setTabsObject(product_info_tabsJsTabs);
    //Fields auto-population

    //todo: get list of allowed placeholders for each field. Current implementation allows us to use
    //      any field, existing on product creation page
    (function ($) {
        var fieldsObject = {};
        fieldsObject._boundFields = {};
        //save relationship between fields
        fieldsObject._addBoundField = function (name, fieldToPopulateName, mask) {
            if ('undefined' === typeof this._boundFields[name]) {
                this._boundFields[name] = {};
                this._boundFields[name][fieldToPopulateName] = {};
            }
            this._boundFields[name][fieldToPopulateName] = {
                mask:mask,
                matches:mask.match(/{{([\w_]+?)}}/g)
            };
        };

        fieldsObject._getBoundFields = function () {
            return this._boundFields;
        };

        fieldsObject._getBoundField = function (name) {
            return this._boundFields[name];
        }
        var masks = <?php echo json_encode($this->getFieldsAutogenerationMasks())?>;

        for (var fieldToPopulateName in masks) {
            if (masks.hasOwnProperty(fieldToPopulateName)) {
                var mask = masks[fieldToPopulateName],
                    matches = mask.match(/{{([\w_]+?)}}/g),
                    fieldToPopulate = $('#' + fieldToPopulateName);
                if (null === matches) {
                    matches = [];
                }
                //fill in bound fields object
                if ('' !== mask && '' === fieldToPopulate.val()) {
                    var matchesCount = matches.length;
                    for (var i = 0; i < matchesCount; i++) {
                        var name = matches[i].slice(2, -2);
                        fieldsObject._addBoundField(name, fieldToPopulateName, mask);
                    }
                }
            }
        }
        //binding events
        var fields = fieldsObject._getBoundFields();
        for (var field in fields) {
            //bind updating fields on keyup
            if (fields.hasOwnProperty(field)) {
                $('#' + field).on('keyup', {'fieldName':field}, _populateField);
            }

            //observe binded fields
            for (var fieldToObserve in fields[field]) {
                if (fields[field].hasOwnProperty(fieldToObserve)) {
                    $('#' + fieldToObserve).bind('change', function () {
                        if ('' === this.value) {
                            //todo: bind event if value was cleared
                        } else {
                            //todo: unbind event if value was changed
                        }
                    });
                }
            }
        }

        /**
         * Fields population by name of observed field
         *
         * @param e
         * @private
         */
        function _populateField(e) {
            var fieldName = e.data.fieldName,
                fieldsToPopulate = fieldsObject._getBoundField(fieldName),
                value = $('#' + fieldName).val();
            for (var field in fieldsToPopulate) {
                if (fieldsToPopulate.hasOwnProperty(field)) {
                    var mask = fieldsToPopulate[field]['mask'],
                        matches = fieldsToPopulate[field]['matches'],
                        matchesCount = matches.length;

                    // Replace all placeholders in mask before updating field's value
                    for (var i = 0; i < matchesCount; i++) {
                        mask = mask.replace(matches[i], $('#' + matches[i].slice(2, -2)).val());
                    }
                    $('#' + field).val(mask);
                }
            }
        }
    })(jQuery);
});

Validation.addAllThese([
    ['validate-super-product-attributes', '<?php echo Mage::helper('Mage_Catalog_Helper_Data')->__('Please select one or more attributes.') ?>', function(v) {
                return (v != "no-attributes");
            }]]);
//]]>
</script>
