<?php
/**
 * {license_notice}
 *
 * @category    design
 * @package     default_default
 * @copyright   {copyright}
 * @license     {license_link}
 */
?>
<?php
/**
 * @var $this Mage_Adminhtml_Block_Catalog_Product_Edit
 */
?>



<div class="content-header">
    <h3 class="icon-head head-products"><?php echo $this->getHeader() ?></h3>
    <p class="content-buttons form-buttons"><?php echo $this->getBackButtonHtml() ?>
    <?php echo $this->getCancelButtonHtml() ?>
    <?php if($this->getProductId()): ?>
        <?php echo $this->getDeleteButtonHtml() ?>
        <?php if($this->getProductSetId() && $this->getIsConfigured()): ?>
            <?php echo $this->getDuplicateButtonHtml() ?>
        <?php endif; ?>
    <?php endif; ?>
    <?php if($this->getProductSetId() && $this->getIsConfigured()): ?>
        <?php echo $this->getChangeAttributeSetButtonHtml() ?>
        <?php echo $this->getSaveButtonHtml() ?>
        <?php echo $this->getSaveAndEditButtonHtml() ?>
    <?php endif; ?>
    </p>
</div>
<form action="<?php echo $this->getSaveUrl() ?>" method="post" id="product_edit_form" enctype="multipart/form-data">
    <?php echo $this->getBlockHtml('formkey')?>
    <div style="display:none"></div>
</form>
<script type="text/javascript">
//<![CDATA[
    var productTemplateSyntax = /(^|.|\r|\n)({{(\w+)}})/;
    var productForm = new varienForm('product_edit_form', '<?php echo $this->getValidationUrl() ?>');
    productForm._processValidationResult = function(transport) {
        var response = transport.responseText.evalJSON();
        if (response.error){
            if (response.attribute && $(response.attribute)) {
                $(response.attribute).setHasError(true, productForm);
                Validation.ajaxError($(response.attribute), response.message);
                if (!Prototype.Browser.IE){
                    $(response.attribute).focus();
                }
            }
            else if ($('messages')) {
                $('messages').innerHTML = '<ul class="messages"><li class="error-msg"><ul><li>' + response.message + '</li></ul></li></ul>';
            }
        }
        else{
            productForm._submit();
        }
    };
    function saveAndContinueEdit(urlTemplate) {
        var template = new Template(urlTemplate, productTemplateSyntax);
        var url = template.evaluate({tab_id:product_info_tabsJsTabs.activeTab.id});
        productForm.submit(url);
    }
    function setSettings(urlTemplate, setElement, typeElement) {
        var template = new Template(urlTemplate, productTemplateSyntax);
        setLocation(template.evaluate({attribute_set:$F(setElement),type:$F(typeElement)}));
    }

     function setSuperSettings(urlTemplate, attributesClass, validateField) {
        var attributesFields = $$('.' + attributesClass);
        var attributes = Form.serializeElements(attributesFields, true).attribute;
        if(typeof attributes == 'string') {
            attributes = [attributes];
        }

        if(!attributes) {
            $(validateField).value = 'no-attributes';
        } else {
            $(validateField).value = 'has-attributes';
        }

        if (productForm.validator.validate()) {
            var template = new Template(urlTemplate, productTemplateSyntax);
            var url = template.evaluate({
                attributes: encode_base64(attributes.join(',')).replace(new RegExp('/','g'),'%2F').replace(new RegExp('=','g'),'%3D')
            });
            setLocation(url);
        }
    }

    function checkMaxLength(Object, MaxLen)
    {
        if (Object.value.length > MaxLen-1) {
            Object.value = Object.value.substr(0, MaxLen);
        }
        return 1;
    }

Event.observe(window, 'load', function() {
    var objName = '<?php echo $this->getSelectedTabId() ?>';
    if (objName) {
        obj = $(objName);
        //IE fix (bubbling event model)
        product_info_tabsJsTabs.setSkipDisplayFirstTab();
        product_info_tabsJsTabs.showTabContent(obj);
    }
    Product.AttributesBridge.setTabsObject(product_info_tabsJsTabs);

    (function ($) {

        var masks = <?php echo $this->helper('Mage_Core_Helper_Data')->jsonEncode($this->getFieldsAutogenerationMasks())?>;
        var availablePlaceholders = <?php echo $this->helper('Mage_Core_Helper_Data')->jsonEncode($this->getAttributesAllowedForAutogeneration())?>;
        var Autogenerator = function(masks) {
            this._masks = masks || {};
            this._fieldReverseIndex = this._buildReverseIndex(this._masks);
        };

        $.extend(Autogenerator.prototype, {
            varRegexp: /{{([\w_]+?)}}/,
            varsRegexp: new RegExp('{{(' + availablePlaceholders.join('|') + ')}}', 'g'),
            data: {
                disabled: 'autogenerator-disabled'
            },
            bindAll: function(events) {
                var self = this;

                $.each(self._masks, function(field, mask) {
                    var disabler = function() {
                        $(this).data(self.data.disabled, $(this).val().replace(/\s/g, '') != '');
                    };
                    var $field = $('#' + field);
                    if (!$field.val() && mask.length > 0 && !self.varRegexp.test(mask)) {
                        $field.val(mask);
                    }
                    if ($field.length) {
                        disabler.call($field);
                        $field.bind('focus blur change keyup click', disabler);
                    }
                });

                $.each(self._fieldReverseIndex, function(field) {
                    var fields = this, $field = $('#' + field);
                    var filler = function(onlyText) {
                        $.each(fields, function() {
                            var $el = $('#' + this);
                            if ($el.data(self.data.disabled)) {
                                return;
                            }
                            if (onlyText === true && self.varRegexp.test(self._masks[this])) {
                                return;
                            }
                            var value = self._masks[this].replace(self.varsRegexp, function(maskfieldName) {
                                return $('#' + maskfieldName.slice(2, -2)).val();
                            });
                            $el.val(value);

                        });
                    };
                    if ($field.length) {
                        $field.bind(events || 'keyup change blur click', filler);
                        filler.call($field, true);
                    }

                });
            },
            _buildReverseIndex: function(masks) {
                var self = this;
                var fieldReverseIndex = {};
                $.each(masks, function(field, mask) {
                    $.each(mask.toString().match(self.varsRegexp) || [], function(key, maskName) {
                        var fieldName = maskName.slice(2, -2);
                        if (!(fieldName in fieldReverseIndex)) {
                            fieldReverseIndex[fieldName] = [];
                        }
                        fieldReverseIndex[fieldName].push(field);
                    })
                });
                return fieldReverseIndex;
            }
        });

        new Autogenerator(masks).bindAll();
    })(jQuery);
});

jQuery(function($) {
    var data = <?php echo $this->getJSData();?>;
    var TypeSwitcher = function(data) {
        this._data = data;
        this._data.$weight = $('#' + data.weight_id);
        this._data.$weightContainer = $('#element-tr-' + data.weight_id);
    };
    $.extend(TypeSwitcher.prototype, {
        attributesContainer: null,
        //Called after DOM is ready
        bindAll: function() {
            var attrContainer = this._getAttributesContainers(this._data.attributes),
                    currentType = this._data.current_type,
                    transitionalTypes = this._data.transitional_types,
                    isTransitionalType = this._data.is_transitional_type,
                    $weight = this._data.$weight,
                    $weightContainer = this._data.$weightContainer;
            //initial attribute hiding
            $.each(this._data.attributes, function(id, applyTo) {
                var isAppliedToTransition = false;
                $.each(transitionalTypes, function(k, v) {
                    if($.inArray(v, applyTo) !== -1 && currentType !== transitionalTypes['simple']) {
                        //If attribute can be shown in one of transitional types, don't hide it
                        isAppliedToTransition = true;
                        return false;
                    }
                });
                if (applyTo.length === 0) {
                    return true; //continue
                }
                if (($.inArray(currentType, applyTo) === -1 && isAppliedToTransition === false)
                        || !isTransitionalType) {
                    //Hide attribute if it's not applied to current type, none of the transitional types
                    //or current type is not transitional itself
                    attrContainer[id].css('display', 'none').addClass('transitional-disabled');
                }
                attrContainer[id].addClass('attribute-tr');
            });

            var tabItem = $('#' + this._data.tab_id).parent();

            //Hide Downloadable Information tab for simple
            if (currentType === transitionalTypes['simple']) {
                tabItem.css('display', 'none');
            } else if ($.inArray(currentType, transitionalTypes)) {
                $weight.attr('disabled', 'disabled');
                $weightContainer.addClass('transitional-disabled');
            }

            this._checkbox = $('#' + this._data.is_virtual_id);
            this._checkbox.bind('click', {_this: this, tabItem: tabItem}, this._switcher);
        },
        //all attributes selectors, used for hiding and showing
        _getAttributesContainers: function(data) {
            if (this.attributesContainer === null) {
                var attributes = {};
                $.each(data, function(id, mask) {
                    attributes[id] = $('#element-tr-' + id);
                });
                this.attributesContainer = attributes;
            }
            return this.attributesContainer;
        },
        //Showing and hiding attributes by Is Virtual switcher
        _switcher: function(event) {
            var attrContainer = event.data._this._getAttributesContainers(),
                    attributes = event.data._this._data.attributes,
                    currentType = event.data._this._data.current_type,
                    transitionalTypes = event.data._this._data.transitional_types,
                    $weight = event.data._this._data.$weight,
                    $weightContainer = event.data._this._data.$weightContainer;
            if ('checked' === $(this).attr('checked')) {
                event.data.tabItem.css('display', '');
                $weight.attr('disabled', 'disabled');
                $.each(attributes, function(id, applyTo) {
                    if (applyTo.length === 0) {
                        return true; //continue
                    }
                    $.each(transitionalTypes, function(k, v) {
                        if ($.inArray(v, applyTo) !== -1) {
                            attrContainer[id].css('display', '').removeClass('transitional-disabled');
                            $weightContainer.addClass('transitional-disabled');
                            return false;
                        }
                    });
                });
            } else {
                event.data.tabItem.css('display', 'none');
                $weight.removeAttr('disabled');
                $.each(attributes, function(id, applyTo) {
                    if (applyTo.length === 0) {
                        return true; //continue
                    }
                    if ($.inArray(transitionalTypes['simple'], applyTo) === -1) {
                        attrContainer[id].css('display', 'none').addClass('transitional-disabled');
                        $weightContainer.removeClass('transitional-disabled');
                    }
                });
            }
        }
    });
    new TypeSwitcher(data).bindAll();
});

Validation.addAllThese([
    ['validate-super-product-attributes', '<?php echo Mage::helper('Mage_Catalog_Helper_Data')->__('Please select one or more attributes.') ?>', function(v) {
        return (v != "no-attributes");
    }]
]);
//]]>
</script>
