<?php
/**
 * {license_notice}
 *
 * @category    design
 * @package     default_default
 * @copyright   {copyright}
 * @license     {license_link}
 */
 /* @var $this Mage_Adminhtml_Block_Catalog_Product_Edit_AttributeSet */
?>
<script id="product-template-selector-template" type="text/x-jquery-tmpl">
{{if !term && items.length && !$data.allShown()}}
<h5 class="title">Recent Items</h5>
{{/if}}
<ul data-mage-init="{&quot;menu&quot;:[]}">
    {{each items}}
    <li {{html optionData($value)}}><a href="#">${$value.label}</a></li>
    {{/each}}
</ul>
{{if !term && items.length && !$data.allShown()}}
<button data-mage-init="{actionLink:{event:&quot;showAll&quot;}}" class="action-show-all">
    <span>Show all Templates...</span>
</button>
{{/if}}
</script>
<script>
    jQuery(function ($) {
        $('#product-template-suggest')
            //.proxyEvent({events: {suggestselect: {to: '#product-edit-form'}}})
            .suggest(<?php echo Mage::helper('Mage_Core_Helper_Data')->jsonEncode($this->getSelectorOptions())?>)
            .on('suggestselect', function (e, selectedItem) {
                if (selectedItem.id) {
                    var uri = document.location.href.replace(/(\/|&|\?)?\bset(\/|=)\d+/g, '').replace(/#[^#]*$/, '');
                    uri += /\?/.test(uri) ? '&' : '?';
                    uri += 'set=' + window.encodeURIComponent(selectedItem.id);

                    var $form = $('#product-edit-form');
                    $form.attr('action', $form.attr('action').replace(/(\/|&|\?)?\bset(\/|=)\d+/g, ''));
                    $form.find('#attribute_set_id').attr('name', 'set').val(selectedItem.id);
                    $.ajax({
                        url: uri.replace('/edit/', '/new/') + '&popup=1',
                        type: 'post',
                        data: $form.serializeArray(),
                        dataType: 'html',
                        context: $('body'),
                        showLoader: true
                    }).done(function(data) {
                        var removedElementClass = 'removed';

                        var $page = $('body');
                        var $newPage = $(data);

                        var nameMapper = function() {
                            return $(this).attr('name');
                        };

                        //add new tab tabs or reorder
                        $page.find('#product_info_tabs .tabs').each(function(i, tabContainer) {
                            $newPage.find('#product_info_tabs .tabs').each(function(j, newTabContainer) {
                                if (i != j) {
                                    return
                                }
                                var $tabContainer = $(tabContainer);
                                $(tabContainer).find('li').removeClass(removedElementClass)
                                var $tabs = $(tabContainer)
                                    .find('li:not(.' + removedElementClass + ')  .tab-item-link:not(.ajax)');
                                var $newTabs = $(newTabContainer).find('.tab-item-link:not(.ajax)'),
                                    tabsNames = $tabs.map(nameMapper).toArray();

                                //hide not exists elements
                                $.each(
                                    _.difference(tabsNames, $newTabs.map(nameMapper).toArray()),
                                    function(index, tabName) {
                                        $tabContainer.find('[name=' + tabName + ']').closest('li')
                                            .addClass(removedElementClass);
                                        $page.find('#product_info_tabs_image-' + tabName)
                                            .addClass(removedElementClass);
                                    }
                                );

                                $(newTabContainer).find('.tab-item-link:not(.ajax)').each(function(index, tab) {
                                    var $tab = $(tab),
                                        tabName = nameMapper.apply($tab),
                                        $tabsContent = $tab.closest('li').clone();
                                    $tabsContent.find('.fieldset>.field').remove();
                                    if (nameMapper.apply($tabs.eq(index)) == tabName) {
                                        return true;
                                    }
                                    var $tabToMove = $.inArray(tabName, tabsNames) !== -1
                                        ? $tabs.filter(function() {
                                            return nameMapper.apply(this) === tabName;
                                        }).closest('li')
                                        : $tabsContent;
                                    if (index === 0) {
                                        $tabToMove.prependTo($tabContainer);
                                    } else {
                                        $tabToMove.insertAfter($tabs.eq(index - 1).closest('li'));
                                    }
                                    $tabToMove.removeClass(removedElementClass);
                                    $tabs = $tabContainer.find('li:not(.' + removedElementClass + ')  .tab-item-link:not(.ajax)');
                                });
                            });
                        });


                        var nameDataMapper = function() {
                            return $(this).data('elementId');
                        };
                        //add new element elements or reorder
                        $page.find('#product-edit-form-tabs .fieldset, #product_info_tabs .fieldset').each(function(i, fieldSet) {
                            $newPage.find('#product_info_tabs .fieldset').each(function(j, newFieldSet) {
                                if ($(fieldSet).attr('id') != $(newFieldSet).attr('id')) {
                                    return
                                }
                                var $elements = $(fieldSet).find('>.field:not(.' + removedElementClass + ')');
                                var $newFieldSet = $(newFieldSet);
                                var $newElements = $newFieldSet.find('>.field');

                                $elements.removeClass(removedElementClass);

                                var elementNames = $elements.map(nameDataMapper).toArray();

                                //hide not exists elements
                                $.each(
                                    _.difference(elementNames, $newElements.map(nameDataMapper).toArray()),
                                    function(index, elementId) {
                                        $page.find('#attribute-' + elementId + '-container')
                                            .addClass(removedElementClass)
                                            .addClass('.ignore-validate');
                                    }
                                );


                                $newElements.each(function(index, element) {
                                    var $element = $(element),
                                        elementId = nameDataMapper.apply($element);
                                    if (nameDataMapper.apply($elements.get(index)) == elementId) {
                                        return true;
                                    }
                                    var $elementToMove = $('.fieldset>.field[data-element-id="' + elementId +'"]');
                                    if ($elementToMove.length === 0) {
                                        $elementToMove = $element;
                                    }
                                    if (index === 0) {
                                        $elementToMove.prependTo(fieldSet);
                                    } else {
                                        $elementToMove.insertAfter($elements.get(index - 1))
                                    }
                                    $elementToMove.trigger('contentUpdated');
                                    $elementToMove.removeClass(removedElementClass).removeClass('.ignore-validate');
                                    $elements = $(fieldSet).find('>.field:not(.' + removedElementClass + ')');
                                });
                            });
                        });

                        $('#product-template-suggest-container .action-toggle>span').text(selectedItem.label);
                        $('#product_info_tabs').tabs('refresh').tabs("option", "active", 0);
                    });

                    $('#product-template-suggest')
                        .suggest('option', "ajaxData", {current_template_id: selectedItem.id})
                        .val('')
                        .trigger('change')
                        .trigger('blur');
                }

            }).focus();
    });
</script>
