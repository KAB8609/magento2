<?php
/**
 * {license_notice}
 *
 * @category    Mage
 * @package     Mage_Launcher
 * @copyright   {copyright}
 * @license     {license_link}
 */

/** @var $this Mage_Launcher_Block_Adminhtml_Storelauncher_Design_Drawer */
?>

<div class="themes-list-wrapper">

<?php echo Mage::helper('Mage_Launcher_Helper_Data')->__('First choose a store theme, then customize it for your business') ?>

<ul class="themes-list">
    <?php foreach ($this->getThemes() as $theme):?>
    <li>
        <div class="theme-item">
            <div class="theme-item-content">
                <ul>
                    <li class="theme-front">
                        <img src="<?php $theme->getPreviewImageUrl() ?>" alt="<?php echo $theme->getThemeTitle() ?>">
                    </li>
                    <li class="theme-back">
                        <dl>
                            <dt><?php echo $theme->getThemeTitle() ?></dt>
                            <dd>
                                <p><?php echo $this->__('Our responsive theme designed by Magento pros to be best in breed for Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis'); ?></p>
                                <div class="buttons">
                                    <a class="action-button button btn-theme-preview" href="<?php echo $this->getPreviewUrl($theme->getId())?>" target="_blank"><?php echo $this->__('Preview Theme'); ?></a>
                                    <button class="button btn-theme-choose"><?php echo $this->__('Choose Theme'); ?></button>
                                </div>
                            </dd>
                        </dl>
                    </li>
                </ul>
            </div>
        </div>
    </li>
    <?php endforeach; ?>
</ul>

</div>

<div class="theme-page hidden">
    <a href="#" class="button btn-edit edit-theme">Edit</a>
</div>

<script type="text/javascript">
    (function($) {
        $.widget("storeCreation.drawerPages", {
            options: {
                drawer: '#drawer',
                drawerHeader: '.drawer-header',
                drawerHeaderActions: '.actions',
                btnCloseDrawer: '.action-close-drawer',
                btnSaveDrawer: '.action-save-settings'
            },

            headerButtons: {},

            drawerPages: {},
            drawerPageCurrent: null,

            _create: function() {
                this.drawerHeader = $(this.options.drawerHeader);
                this.drawerHeaderActions = this.drawerHeader.find(this.options.drawerHeaderActions);
                this.btnCloseDrawer = $(this.options.btnCloseDrawer);
                this.btnSaveDrawer = $(this.options.btnSaveDrawer);
                this.headerButtonCreate({
                    name: 'close',
                    button: this.btnCloseDrawer,
                    click: $.proxy(this.destroy, this)
                });
                this.headerButtonCreate({
                    name: 'save',
                    button: this.btnSaveDrawer,
                    click: $.proxy(this.destroy, this)
                });
            },

            headerButtonCreate: function(buttonOptions) {
                var buttonObject;
                if (this.headerButtons[buttonOptions.name]) {
                    buttonObject = this.headerButtons[buttonOptions.name];
                    buttonObject.off('.headerButton');
                }
                var buttonVars = {
                    type: 'button',
                    cssClass: 'primary',
                    title: 'Button',
                    click: function() {},
                    afterShow: function() {}
                };
                $.extend(buttonVars, buttonOptions);

                if (buttonOptions.button) {
                    buttonObject = buttonOptions.button;
                }

                if (!buttonObject) {
                    buttonObject = $.tmpl('<button type="${type}" class="${cssClass}">${title}</button>', buttonVars);
                }

                this.drawerHeaderActions.prepend(buttonObject);
                buttonObject.on('click.headerButton', buttonVars.click);
                buttonObject.on('afterShow.headerButton', buttonVars.afterShow);

                this.headerButtons[buttonOptions.name] = buttonObject;
            },

            headerButtonHide: function(buttonName) {
                this.headerButtons[buttonName].addClass('hidden');
            },

            headerButtonHideAll: function() {
                $.each(this.headerButtons, $.proxy(function(buttonName) {
                    this.headerButtonHide(buttonName);
                }, this));
            },

            headerButtonShow: function(buttonName) {
                this.headerButtons[buttonName]
                    .removeClass('hidden')
                    .trigger('afterShow.headerButton');
            },

            drawerPageAdd: function(page) {
                if (this.drawerPages[page.name]) {
                    this.drawerPages[page.name].page.remove();
                    delete  this.drawerPages[page.name];
                }
                var pageElement = {
                    page: '',
                    buttons: 'close'
                };
                $.extend(pageElement, page);
                pageElement.page = $(pageElement.page);
                this.drawerPages[page.name] = pageElement;
                this.drawerPageHide(page.name);
            },

            drawerPageShow: function(name) {
                if (!name || !this.drawerPages[name]) {
                    return;
                }
                this.drawerPages[name].page.removeClass('hidden');
                this.headerButtonHideAll();
                $.each(this.drawerPages[name].buttons, $.proxy(function(i, buttonName) {
                    this.headerButtonShow(buttonName);
                }, this));
                this.drawerPageCurrent = name;
            },

            drawerPageHide: function(name) {
                if (name && this.drawerPages[name]) {
                    this.drawerPages[name].page.addClass('hidden');
                }
            },

            drawerPageSwitch: function(name) {
                this.drawerPageHide(this.drawerPageCurrent);
                this.drawerPageShow(name);
            }
        });
        $(document).ready(function() {
            'use strict';
            var currentThemeId = <?php echo $this->getThemeId() ? $this->getThemeId() : 'null'; ?>;
            $('#drawer')
                .drawerPages()
                .drawerPages('headerButtonCreate', {
                    name: 'skip',
                    title: '<?php echo Mage::helper('Mage_Launcher_Helper_Data')->__('Skip This for Now'); ?>',
                    click: function() {
                        $('#drawer').drawerPages('drawerPageSwitch', 'theme-page');
                    },
                    afterShow: function() {
                        if (!currentThemeId) {
                            $(this).addClass('hidden');
                        }
                    }
                })
                .drawerPages('drawerPageAdd', {
                    name: 'themes-list',
                    page: '.themes-list-wrapper',
                    buttons: ['skip', 'close']
                })
                .drawerPages('drawerPageAdd', {
                    name: 'theme-page',
                    page: '.theme-page',
                    buttons: ['save', 'close']
                })
                .drawerPages('drawerPageSwitch', currentThemeId ? 'theme-page' : 'themes-list')
            ;
            $('.edit-theme')
                .on('click', function() {
                    $('#drawer').drawerPages('drawerPageSwitch', 'themes-list');
                    return false;
                });
            $('.btn-theme-choose')
                .on('click', function() {
                    $('#drawer').drawerPages('drawerPageSwitch', 'theme-page');
                    // @TODO: Set current theme
                });
        });
    })(jQuery);
</script>
