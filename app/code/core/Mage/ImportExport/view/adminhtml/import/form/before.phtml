<?php
/**
 * {license_notice}
 *
 * @category    design
 * @package     default_default
 * @copyright   {copyright}
 * @license     {license_link}
 */
?>
<script type="text/javascript">
//<![CDATA[
    /**
     * Name and ID for iframe for data POST-ing.
     *
     * @var string
     */
    varienForm.prototype.ifrElemName = 'import_post_target_frame';

    /**
     * Handle value change in entity type selector
     *
     * @return void
     */
    varienForm.prototype.handleEntityTypeSelector = function()
    {
        if ($('entity') && $F('entity')) {
            $('head-import_format_version_fieldset').hide();
            $('import_format_version_fieldset').hide();
            $('file_format_version').selectedIndex = 0;
            $('head-customer_entity_fieldset').hide();
            $('customer_entity_fieldset').hide();
            $('customer_entity').disable();
            $('customer_entity').selectedIndex = 0;
            $('head-upload_file_fieldset').hide();
            $('upload_file_fieldset').hide();
            this.showAllBehaviours();

            switch ($F('entity')) {
                case 'customer':
                    $('head-import_format_version_fieldset').show();
                    $('import_format_version_fieldset').show();
                    break;
                case 'catalog_product':
                    $('head-upload_file_fieldset').show();
                    $('upload_file_fieldset').show();
                    break;
                default:
                    break;
            }
        } else {
            $('head-import_format_version_fieldset').hide();
            $('import_format_version_fieldset').hide();
            $('file_format_version').selectedIndex = 0;
            $('head-customer_entity_fieldset').hide();
            $('customer_entity_fieldset').hide();
            $('customer_entity').disable();
            $('customer_entity').selectedIndex = 0;
            $('head-upload_file_fieldset').hide();
            $('upload_file_fieldset').hide();
            this.showAllBehaviours();
        }
    };

    /**
     * Handle value change in import format version selector
     *
     * @return void
     */
    varienForm.prototype.handleImportFormatVersionSelector = function()
    {
        if ($('file_format_version') && $F('file_format_version')) {
            var allowedBehaviours = [];
            <?php
                $importVersion = array(
                    1 => Mage_ImportExport_Model_Source_Format_Version::VERSION_1,
                    2 => Mage_ImportExport_Model_Source_Format_Version::VERSION_2,
                );
            ?>
            switch ($F('file_format_version')) {
                case '<?php echo $importVersion[1] ?>':
                    $('head-customer_entity_fieldset').hide();
                    $('customer_entity_fieldset').hide();
                    $('customer_entity').disable();
                    $('customer_entity').selectedIndex = 0;
                    allowedBehaviours = <?php echo $this->getJsAllowedCustomerBehaviours($importVersion[1]) ?>;
                    break;
                case '<?php echo $importVersion[2] ?>':
                    $('head-customer_entity_fieldset').show();
                    $('customer_entity_fieldset').show();
                    $('customer_entity').enable();
                    allowedBehaviours = <?php echo $this->getJsAllowedCustomerBehaviours($importVersion[2]) ?>;
                    break;
                default:
                    break;
            }

            // hide not allowed behaviours
            if ($('behavior')) {
                var behaviourLength = $('behavior').length;
                var behaviourOptions = $('behavior').options;

                for (var i = 0; i < behaviourLength; i++) {
                    if (allowedBehaviours.include(behaviourOptions[i].value)) {
                        behaviourOptions[i].show();
                    } else if (behaviourOptions[i].value != '') {
                        behaviourOptions[i].hide();
                        if (behaviourOptions[i].selected) {
                            $('behavior').selectedIndex = 0;
                        }
                    }
                }
            }

            $('head-upload_file_fieldset').show();
            $('upload_file_fieldset').show();
        } else {
            $('head-customer_entity_fieldset').hide();
            $('customer_entity_fieldset').hide();
            $('customer_entity').disable();
            $('customer_entity').selectedIndex = 0;
            $('head-upload_file_fieldset').hide();
            $('upload_file_fieldset').hide();
        }
    };

    /**
     * Show all available behaviours
     *
     * @return void
     */
    varienForm.prototype.showAllBehaviours = function()
    {
        if ($('behavior')) {
            var behaviourLength = $('behavior').length;
            var behaviourOptions = $('behavior').options;
            for (var i = 0; i < behaviourLength; i++) {
                behaviourOptions[i].show();
            }
        }
    };

    /**
     * Post form data to dynamic iframe.
     *
     * @param string newActionUrl OPTIONAL Change form action to this if specified
     * @return void
     */
    varienForm.prototype.postToFrame = function(newActionUrl)
    {
        if(this.validate()){
            // create dynamic frame
            if (!$(this.ifrElemName)) {
                $('html-body').insert({
                    bottom:'<iframe name="' + this.ifrElemName + '" id="' + this.ifrElemName
                        + '" style="display:none;"/>'
                });
            }

            // show mask, temporary set new target and submit form
            var loadingMask = $('loading-mask');
            var formElem    = $(this.formId);
            var oldTarget   = formElem.target;
            var oldAction   = formElem.action;

            Element.clonePosition(loadingMask, $$('#html-body .wrapper')[0], {offsetLeft:-2});
            toggleSelectsUnderBlock(loadingMask, false);
            loadingMask.show();
            setLoaderPosition();
            formElem.target = this.ifrElemName;

            if (newActionUrl) {
                formElem.action = newActionUrl;
            }
            formElem.action += (formElem.action.lastIndexOf('?') != -1 ? '&' : '?')
                + 'form_key=' + encodeURIComponent(formElem.form_key.value);
            this._submit();
            formElem.target = oldTarget;
            formElem.action = oldAction;
        }
    };

    /**
     * Actions after data post complete. Hide load mask, remove iframe, run response processing method.
     *
     * @param object response
     * @return void
     */
    varienForm.prototype.postToFrameComplete = function(response)
    {
        var loadingMask = $('loading-mask');
        $(this.ifrElemName).remove();
        toggleSelectsUnderBlock(loadingMask, true);
        loadingMask.hide();
        this.postToFrameProcessResponse(response);
    };

    /**
     * Process response JSON.
     *
     * @param object response
     * @return void
     */
    varienForm.prototype.postToFrameProcessResponse = function(response)
    {
        if ('object' != typeof(response)) {
            return alert('Invalid response');
        }
        $H(response).each(function(pair) {
            switch (pair.key) {
                case 'show':
                case 'clear':
                case 'hide':
                    $H(pair.value).each(function(val) {if ($(val.value)) $(val.value)[pair.key]();});
                    break;
                case 'innerHTML':
                case 'value':
                    $H(pair.value).each(function(val) {
                        var el = $(val.key);
                        if (el) {
                            el[pair.key] = val.value;
                            // if element does not visible
                            el.offsetWidth || el.up('div.entry-edit').show();
                        }
                    });
                    break;
                case 'removeClassName':
                case 'addClassName':
                    $H(pair.value).each(function(val) {if ($(val.key)) $(val.key)[pair.key](val.value);});
                    break;
                default:
                    alert(pair.key + ': ' + pair.value);
                    break;
            }
        });
    };

    /**
     * Send form data to Start action when file is validated.
     *
     * @param string newActionUrl
     * @param string sourceFileField
     * @return void
     */
    varienForm.prototype.startImport = function(newActionUrl, sourceFileField)
    {
        $(sourceFileField).removeClassName('required-entry');
        this.postToFrame(newActionUrl);
        $(sourceFileField).addClassName('required-entry');
    };
//]]>
</script>
