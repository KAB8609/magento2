<?php
/**
 * {license_notice}
 *
 * @category    design
 * @package     enterprise_default
 * @copyright   {copyright}
 * @license     {license_link}
 */

/* @var $this Enterprise_Reward_Block_Checkout_Payment_Additional */
?>
<?php if ($this->getCanUseRewardPoints()): ?>
    <dl class="sp-methods checkout-reward checkout-onepage-payment-additional-reward" id="reward_placer">
        <dt>
            <input type="checkbox" name="payment[use_reward_points]" value="1" id="use_reward_points"<?php echo $this->useRewardPoints()?' checked="checked"':'' ?> class="checkbox" />
            <label for="use_reward_points"><?php echo Mage::helper('Enterprise_Reward_Helper_Data')->__('Use my reward points, %s available', Mage::helper('Enterprise_Reward_Helper_Data')->formatReward($this->getPointsBalance(), $this->getCurrencyAmount())); ?></label>
        </dt>
    </dl>

<!--<script type="text/javascript">-->
<!---->
<!--    if (payment) {-->
<!--        var rewardPaymentInit = function() {-->
<!--            if ($('use_reward_points')) {-->
<!--                $('use_reward_points').disabled = false;-->
<!--            }-->
<!--            this.switchRewardPointsCheckbox();-->
<!--        }-->
<!--        payment.addAfterInitFunction('reward', rewardPaymentInit.bind(payment));-->
<!--        var rewardPaymentValidate = function() {-->
<!--            if (quoteBaseGrandTotal < 0.0001) {-->
<!--                return true;-->
<!--            }-->
<!--            return false;-->
<!--        }-->
<!--        payment.addBeforeValidateFunction('reward', rewardPaymentValidate.bind(payment));-->
<!--    }-->
<!---->
<!--    (function($) {-->
<!--        head.js(-->
<!--            "--><?php //echo $this->getViewFileUrl('Enterprise_CustomerBalance::checkout/js/customerrewards.js') ?><!--",-->
<!--            "--><?php //echo $this->getViewFileUrl('Enterprise_CustomerBalance::checkout/js/onepagestorecredit.js') ?><!--",-->
<!--            function() {-->
<!--                $('#opc-payment').onePageStoreCredit({-->
<!--                    rewardPointsSubstracted: --><?php //if ($this->useRewardPoints()): ?><!--true--><?php //else: ?><!--false--><?php //endif; ?><!--,-->
<!--                    baseRewardCurrencyAmount: --><?php //echo (float)$this->getQuote()->getBaseRewardCurrencyAmount(); ?><!--,-->
<!--                    balance: --><?php //echo (float)$this->getCurrencyAmount(); ?><!--,-->
<!--                    quoteBaseGrandTotal: --><?php //echo (float)$this->getQuote()->getBaseRewardCurrencyAmount(); ?><!--,-->
<!--                    rewardPointsBlockSelector: '#customerbalance-placer',-->
<!--                    paymentMethodsSelector: '#checkout-payment-method-load',-->
<!--                    payment: payment,-->
<!--                    paymentForm: '#co-payment-form'-->
<!--                });-->
<!--            });-->
<!--    })(jQuery);-->
<!--</script>-->

<script type="text/javascript">
    //<![CDATA[
    var isEnoughPointsToCoverAmount = <?php if ($this->isEnoughPoints()): ?>true<?php else: ?>false<?php endif; ?>;
    var rewardPointsSubstracted = <?php if ($this->useRewardPoints()): ?>true<?php else: ?>false<?php endif; ?>;

    if (rewardPointsSubstracted) {
        quoteBaseGrandTotal += <?php echo (float)$this->getQuote()->getBaseRewardCurrencyAmount(); ?>;
        checkQuoteBaseGrandTotal = quoteBaseGrandTotal;
        rewardPointsSubstracted = false;
    }

    Payment.prototype.switchRewardPointsCheckbox = function() {
        if (!rewardPointsSubstracted && $('use_reward_points').checked) {
            quoteBaseGrandTotal -= <?php echo (float)$this->getCurrencyAmount(); ?>;
            rewardPointsSubstracted = true;
            checkQuoteBaseGrandTotal = quoteBaseGrandTotal;
        }
        if (rewardPointsSubstracted && !$('use_reward_points').checked) {
            quoteBaseGrandTotal += <?php echo (float)$this->getCurrencyAmount(); ?>;
            rewardPointsSubstracted = false;
            checkQuoteBaseGrandTotal = quoteBaseGrandTotal;
        }
        if (((checkQuoteBaseGrandTotal < 0.0001 || checkQuoteBaseGrandTotal > 0.0001) && quoteBaseGrandTotal == 0) || (quoteBaseGrandTotal > checkQuoteBaseGrandTotal)) {
            quoteBaseGrandTotal = checkQuoteBaseGrandTotal;
        }
        if (quoteBaseGrandTotal < 0.0001) {
            var elements = Form.getElements(this.form);
            for (var i=0; i<elements.length; i++) {
                if ($('use_reward_points').checked) {
                    if (elements[i].name == 'payment[method]') {
                        elements[i].disabled = true;
                    }
                }
                if (elements[i].name == 'payment[method]' && elements[i].value == 'free') {
                    if ($('use_reward_points').checked) {
                        elements[i].checked = false;
                        elements[i].disabled = true;
                        $(elements[i].parentNode).hide();
                    } else {
                        elements[i].checked = true;
                        elements[i].disabled = false;
                        $(elements[i].parentNode).show();
                        payment.switchMethod('free');
                    }
                }
            }
            if ($('use_reward_points').checked) {
                $('checkout-payment-method-load').hide();
                payment.switchMethod();
            } else {
                $('checkout-payment-method-load').show();
                payment.switchMethod(payment.lastUsedMethod);
            }
        } else {
            var elements = Form.getElements(this.form);
            for (var i=0; i<elements.length; i++) {
                if (elements[i].name == 'payment[method]') {
                    elements[i].disabled = false;
                }
            }
            $('checkout-payment-method-load').show();
            payment.switchMethod(payment.lastUsedMethod);
        }
    }
    if (payment) {
        var rewardPaymentInit = function() {
            if ($('use_reward_points')) {
                $('use_reward_points').disabled = false;
            }
            this.switchRewardPointsCheckbox();
        }
        payment.addAfterInitFunction('reward', rewardPaymentInit.bind(payment));
        var rewardPaymentValidate = function() {
            if (quoteBaseGrandTotal < 0.0001) {
                return true;
            }
            return false;
        }
        payment.addBeforeValidateFunction('reward', rewardPaymentValidate.bind(payment));
    }

//]]>
</script>
<?php endif; ?>
