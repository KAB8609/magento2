<?php
/**
 * {license_notice}
 *
 * @category    design
 * @package     default_default
 * @copyright   {copyright}
 * @license     {license_link}
 */
?>
<?php
/**
 * Attribute options control
 *
 * @var $this Mage_Adminhtml_Block_Catalog_Product_Attribute_Edit_Tab_Options
 */
?>

<fieldset class="fieldset">
    <legend class="legend"><span><?php echo Mage::helper('Mage_Catalog_Helper_Data')->__('Manage Titles (Size, Color, etc.)') ?></span></legend>
    <br>
    <div class="message message-info">
        <div class="message-inner">
            <div class="message-content"><?php echo Mage::helper('Mage_Catalog_Helper_Data')->__('If you do not specify an option value for a specific store view then the default (Admin) value will be used.') ?></div>
        </div>
    </div>

    <table class="data-table" cellspacing="0" id="attribute-labels-table">
        <tr>
            <?php foreach ($this->getStores() as $_store): ?>
            <th><?php echo $_store->getName() ?></th>
            <?php endforeach; ?>
        </tr>
        <tr>
            <?php $_labels = $this->getLabelValues() ?>
            <?php foreach ($this->getStores() as $_store): ?>
            <td>
                <input class="input-text<?php if ($_store->getId() == Mage_Core_Model_App::ADMIN_STORE_ID): ?> required-option<?php endif; ?>" type="text" name="frontend_label[<?php echo $_store->getId() ?>]" value="<?php echo $this->escapeHtml($_labels[$_store->getId()]) ?>"<?php if ($this->getReadOnly()):?> disabled="disabled"<?php endif;?>/>
            </td>
            <?php endforeach; ?>
        </tr>
    </table>
</fieldset>

<fieldset class="fieldset">
    <legend class="legend"><span><?php echo Mage::helper('Mage_Catalog_Helper_Data')->__('Manage Options (values of your attribute)') ?></span></legend>
    <br>
    <div id="matage-options-panel">
        <table class="data-table" cellspacing="0">
            <thead>
            <tr id="attribute-options-table">
                <th class="col-default"><?php echo Mage::helper('Mage_Catalog_Helper_Data')->__('Is Default') ?></th>
                <?php
                $storelist = $this->getStores();
                foreach ($storelist as $_store):
                    ?>
                    <th><?php echo $_store->getName() ?></th>
                    <?php endforeach;
                $storetotal = count($storelist) + 3;
                ?>
                <th class="col-position"><?php echo Mage::helper('Mage_Catalog_Helper_Data')->__('Position') ?></th>
                <th class="col-delete">&nbsp;</th>
            </tr>
            </thead>
            <tr class="no-display template" id="row-template">
                <td class="col-default"><input class="input-radio" type="radio" name="default[]" value="{{id}}" <?php if ($this->getReadOnly()):?> disabled="disabled"<?php endif;?>/></td>
                <?php foreach ($this->getStores() as $_store): ?>
                <td class="col-{{id}}"><input name="option[value][{{id}}][<?php echo $_store->getId() ?>]" value="{{store<?php echo $_store->getId() ?>}}" class="input-text<?php if ($_store->getId() == Mage_Core_Model_App::ADMIN_STORE_ID): ?> required-option<?php endif; ?>" type="text" <?php if ($this->getReadOnly() || $this->canManageOptionDefaultOnly()):?> disabled="disabled"<?php endif;?>/></td>
                <?php endforeach; ?>
                <td class="col-position"><input class="input-text" type="text" name="option[order][{{id}}]" value="{{sort_order}}" <?php if ($this->getReadOnly() || $this->canManageOptionDefaultOnly()):?> disabled="disabled"<?php endif;?>/></td>
                <td>
                    <input type="hidden" class="delete-flag" name="option[delete][{{id}}]" value="" />
                    <?php if (!$this->getReadOnly() && !$this->canManageOptionDefaultOnly()):?>
                    <?php echo $this->getDeleteButtonHtml() ?>
                    <?php endif;?>
                </td>
            </tr>
            <tfoot>
            <th colspan="<?php echo $storetotal; ?>">
                <?php if (!$this->getReadOnly() && !$this->canManageOptionDefaultOnly()):?>
                <?php echo $this->getAddNewButtonHtml() ?>
                <?php endif;?>
            </th>
            </tfoot>
        </table>
        <input type="hidden" id="option-count-check" value="" />
    </div>
</fieldset>
<script type="text/javascript">
    //<![CDATA[
    var optionDefaultInputType = 'radio';

    // IE removes quotes from element.innerHTML whenever it thinks they're not needed, which breaks html.
    var templateText =
            '<tr class="option-row">'+
                    '<td class="col-default"><input class="input-radio" type="{{intype}}" name="default[]" value="{{id}}" {{checked}} <?php if ($this->getReadOnly()):?> disabled="disabled"<?php endif;?>/><\/td>'+
            <?php foreach ($this->getStores() as $_store): ?>
                    '<td><input name="option[value][{{id}}][<?php echo $_store->getId() ?>]" value="{{store<?php echo $_store->getId() ?>}}" class="input-text<?php if ($_store->getId() == Mage_Core_Model_App::ADMIN_STORE_ID): ?> required-option<?php endif; ?>" type="text" <?php if ($this->getReadOnly() || $this->canManageOptionDefaultOnly()):?> disabled="disabled"<?php endif;?><?php if ($_store->getId() == Mage_Core_Model_App::ADMIN_STORE_ID && $this->canManageOptionDefaultOnly()):?> style="width:196px"<?php endif;?> /><\/td>'+
                <?php endforeach; ?>
                    '<td><input class="input-text" type="text" name="option[order][{{id}}]" value="{{sort_order}}" <?php if ($this->getReadOnly() || $this->canManageOptionDefaultOnly()):?> disabled="disabled"<?php endif;?>/><\/td>'+
                    '<td id="delete_button_container_{{id}}" class="col-delete">'+
                    '<input type="hidden" class="delete-flag" name="option[delete][{{id}}]" value="" />'+
            <?php if (!$this->getReadOnly() && !$this->canManageOptionDefaultOnly()):?>
                <?php echo Mage::helper('Mage_Core_Helper_Data')->jsonEncode($this->getDeleteButtonHtml()) ?> +
                <?php endif;?>
                    '<\/td>'+
                    '<\/tr>';

    var attributeOption = {
        table: $('attribute-options-table'),
        templateSyntax: /(^|.|\r|\n)({{(\w+)}})/,
        templateText: templateText,
        itemCount: 0,
        totalItems: 0,
        isReadOnly: <?php echo (int)$this->getReadOnly(); ?>,
        add: function(data) {
            this.template = new Template(this.templateText, this.templateSyntax);
            var isNewOption = false;
            if (typeof data.id == 'undefined') {
                data = {'id': 'option_' + this.itemCount};
                isNewOption = true;
            }
            if (!data.intype) {
                data.intype = optionDefaultInputType;
            }
            Element.insert(this.table, {after: this.template.evaluate(data)});
            if (isNewOption && !this.isReadOnly) {
                this.enableNewOptionDeleteButton(data.id);
            }
            this.bindRemoveButtons();
            this.itemCount++;
            this.totalItems++;
            this.updateItemsCountField();
        },
        remove: function(event) {
            var element = $(Event.findElement(event, 'tr')); // !!! Button already have table parent in safari
            // Safari workaround
            element.ancestors().each(function(parentItem){
                if (parentItem.hasClassName('option-row')) {
                    element = parentItem;
                    throw $break;
                } else if (parentItem.hasClassName('box')) {
                    throw $break;
                }
            });

            if (element) {
                var elementFlags = element.getElementsByClassName('delete-flag');
                if (elementFlags[0]) {
                    elementFlags[0].value = 1;
                }

                element.addClassName('no-display');
                element.addClassName('template');
                element.hide();
                this.totalItems--;
                this.updateItemsCountField();
            }
        },
        updateItemsCountField: function() {
            $('option-count-check').value = this.totalItems > 0 ? '1' : '';
        },
        enableNewOptionDeleteButton: function(id) {
            $$('#delete_button_container_' + id + ' button').each(function(button) {
                button.enable();
                button.removeClassName('disabled');
            });
        },
        bindRemoveButtons: function() {
            var buttons = $$('.delete-option');
            for(var i=0;i<buttons.length;i++){
                if(!$(buttons[i]).binded){
                    $(buttons[i]).binded = true;
                    Event.observe(buttons[i], 'click', this.remove.bind(this));
                }
            }
        }
    }
    if ($('row-template')) {
        $('row-template').remove();
    }
    attributeOption.bindRemoveButtons();

if ($('add_new_option_button')) {
    Event.observe('add_new_option_button', 'click', attributeOption.add.bind(attributeOption));
}
<?php foreach ($this->getOptionValues() as $_value): ?>
    attributeOption.add(<?php echo $_value->toJson() ?>);
        <?php endforeach; ?>
    //]]>
</script>
