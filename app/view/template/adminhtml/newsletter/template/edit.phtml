<div class="content-header">
    <table cellspacing="0" class="grid-header"> 
        <tr>
            <td style="width:30%;"><h2><?=$this->getHeaderText()?></h2></td>
            <td class="form-buttons">
                <?=$this->getBackButtonHtml();?>
                <?if(!$this->isTextType()):?>
                <?=$this->getToPlainButtonHtml();?>
                <?=$this->getToHtmlButtonHtml();?>
                <?endif?>
                <?=$this->getSaveButtonHtml();?>
                <?=$this->getPreviewButtonHtml();?>
                <?if($this->getEditMode()):?>
                <?=$this->getDeleteButtonHtml();?>
                <?endif?>
            </td>
        </tr>
    </table>
</div>
<form action="<?=$this->getSaveUrl()?>" method="POST" id="newsletter_template_edit_form">
<input type="hidden" id="change_flag_element" name="_change_type_flag" value="" />
<?=$this->getForm()?>
</form>
<form action="<?=$this->getPreviewUrl()?>" method="POST" id="newsletter_template_preview_form" target="_blank">
<input type="hidden" id="preview_type" name="type" value="<?=$this->isTextType()?1:2?>" />
<input type="hidden" id="preview_text" name="text" value="" />
</form>
<script type="text/javascript" language="javascript">
    var templateForm = new varienForm('newsletter_template_edit_form');
    var templatePreviewForm = new varienForm('newsletter_template_preview_form');
    var templateControl = {
        unconvertedText: '',
        typeChange: false,
        init: function () {
        	if ($('convert_button_back')) { 
        		$('convert_button_back').hide();
        	}
        },
        stripTags: function () {
            if(!window.confirm("<?=__('Do you want to convert it to plain text?')?>")) { 
                return false;
            }
            tinyMCE.execCommand('mceRemoveControl', false, 'text');
            this.unconvertedText = $('text').value; 
            $('convert_button').hide();
            $('text').value =  $('text').value.stripScripts().stripTags();
            $('convert_button_back').show();
            this.typeChange = true;
            return false;
        },
        unStripTags: function () {
            $('convert_button').show();
            $('convert_button_back').hide();
            $('text').value =  this.unconvertedText;
            tinyMCE.execCommand('mceAddControl', false, 'text');
            this.typeChange = false;
            return false;
        },
        save: function() {
            if (this.typeChange) {
                $('change_flag_element').value = '1';
            }
            templateForm.submit();
            return false;
        },        
        preview: function() {
            if (this.typeChange) {
                $('preview_type').value = 1;
            }
            if (typeof tinyMCE == 'undefined' || !tinyMCE.getInstanceById('text')) {
                $('preview_text').value = $('text').value;
            } else { 
                 $('preview_text').value = tinyMCE.getInstanceById('text').getHTML();
            }
            templatePreviewForm.submit();
            return false;
        },
        
        deleteTemplate: function() {
            if(window.confirm("<?=__('Are you sure that you want to delete this template?')?>")) { 
               	window.location.href = '<?=$this->getDeleteUrl()?>';
            }
        }
    };
    
    templateControl.init();
</script>
