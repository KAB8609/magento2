<!-- Addresses list -->
<table cellspacing="0" class="form-edit">
<tr>
<td class="content-left-nav address-list">
	<h4 class="icon-head head-customer-address-list" style="float:left">Customer Addresses</h4>
    <button id="add_address_button" type="button" class="scalable" onclick="customerAddresses.addNewAddress()">
        <table cellspacing="0">
            <tr>
                <td class="tl"></td>
                <td class="tr"></td>
            </tr>
            <tr>
                <td class="ml"><?=__('Add new')?></td>
                <td class="mr"></td>
            </tr>
            <tr>
                <td class="bl"></td>
                <td class="br"></td>
            </tr>
        </table>
    </button>	
	<ul id="address_list">
	<?if($addressCollection->getSize()):?>
        <?foreach ($addressCollection as $_address):?>
		<li id="address_item_<?=$_address->getId()?>">
    		<div class="delete-address">
    		     <a href="#" name="delete_address" id="delete_new_item"><?=__('Delete address')?></a>
    		</div>
            <address>
            <?=$_address->toString("<b>{{firstname}} {{lastname}}</b><br/>{{street}}<br/>{{city}}, {{regionName}} {{postcode}}<br/>T: {{telephone}}")?>
            </address>
            <div class="address-type">
        		<input type="radio" value="<?=$_address->getId()?>" id="address_item_billing<?=$_address->getId()?>" name="default_billing" title="<?=__('Set as default billing address')?>"<?if($_address->getId()==$customer->getDefaultBilling()):?> checked="true"<?endif;?>/>&nbsp;<label for="address_item_billing<?=$_address->getId()?>"><?=__('Default billing')?></label>
        		<input type="radio" value="<?=$_address->getId()?>" id="address_item_shipping<?=$_address->getId()?>" name="default_shipping" title="<?=__('Set as default shipping address')?>"<?if($_address->getId()==$customer->getDefaultShipping()):?> checked="true"<?endif;?>/>&nbsp;<label for="address_item_shipping<?=$_address->getId()?>"><?=__('Default shipping')?></label>
            </div>
		</li>
		<?endforeach;?>
	<?else:?>
		<li id="new_item">
            <div class="delete-address" style="display:none">
                <a href="#" name="delete_address" id="delete_new_item"><?=__('Delete address')?></a>
            </div>
            <address>
                New customer address
            </address>
            <div class="address-type">
                <input type="radio" id="new_item_billing" name="default_billing" value="new" title="<?=__('Set as default billing address')?>" checked="true"/>&nbsp;<label for="new_item_billing"><?=__('Default billing')?></label>
                <input type="radio" id="new_item_shipping" name="default_shipping" value="new" title="<?=__('Set as default shipping address')?>" checked="true"/>&nbsp;<label for="new_item_shipping"><?=__('Default shipping')?></label>
            </div>
		</li>
	<?endif;?>
	</ul>
</td>
<td>
<!-- Addresses forms -->
	<div class="entry-edit" id="address_form_container">
		<?if($addressCollection->getSize()):?>
					<?foreach ($addressCollection as $_address):?>
					<div id="form_address_item_<?=$_address->getId()?>" style="display:none">
					<?
							$this->getFormObject()->setValues($_address->getData())
									->setHtmlIdPrefix($_address->getId())
									->setFieldNamePrefix('address['.$_address->getId().']')
					?>
					<?=$this->getFormObject()->getHtml()?>
					<input type="hidden" name="address[<?=$_address->getId()?>][_deleted]" id="deleted_address_item_<?=$_address->getId()?>">
					</div>
					<?endforeach;?>
			<?else:?>
			<div id="form_new_item" style="display:none">
			<?$this->getFormObject()->setFieldNamePrefix('address[new]')?>
			<?=$this->getFormObject()->getHtml()?>
			</div>
			<?endif;?>
	</div>


	<!-- Template for adding address item to list -->
	<?$_templatePrefix = '_template_'?>
	<div id="address_item_template" class="no-display template">
		<div class="delete-address">
		     <a href="#" name="delete_address" id="delete_new_item"><?=__('Delete address')?></a>
		</div>
		<address>New address</address>
		<div class="address-type">
            <input type="radio" value="<?=$_templatePrefix?>" id="address_item_billing<?=$_templatePrefix?>" name="default_billing" title="<?=__('Set as default billing address')?>"/>&nbsp;<label for="address_item_billing<?=$_templatePrefix?>"><?=__('Default billing')?></label>
            <input type="radio" value="<?=$_templatePrefix?>" id="address_item_shipping<?=$_templatePrefix?>" name="default_shipping" title="<?=__('Set as default shipping address')?>"/>&nbsp;<label for="address_item_shipping<?=$_templatePrefix?>"><?=__('Default shipping')?></label>
		</div>
	</div>

	<!-- Address form template -->
	<div id="address_form_template" class="no-display template">
	<?
			// Set form template elements prefix
			$this->getFormObject()->setHtmlIdPrefix($_templatePrefix)
					->setValues(array())
					->setFieldNamePrefix('address['.$_templatePrefix.']');
	?>
	<?=$this->getFormObject()->getHtml()?>
	</div>


<!-- -->
<script type="text/javascript">
var addressesModel = Class.create();
addressesModel.prototype = {
    initialize : function() {
        this.activeItem   = null;
        this.itemTemplate = $('address_item_template');
        this.formTemplate = $('address_form_template');
        this.itemContainer= $('address_list');
        this.formContainer= $('address_form_container');
        this.baseItemId   = 'new_item';
        this.itemContentTemplate = new Template('<b>#{firstname} #{lastname}</b><br/>#{street}<br/>#{city}, #{regionName} #{postcode}<br/>T: #{telephone}');

        this.onNewAddressClick  = this.addNewAddress.bindAsEventListener(this);
        this.onItemMouseOver    = this.itemMouseOver.bindAsEventListener(this);
        this.onItemMouseOut     = this.itemMouseOut.bindAsEventListener(this);
        this.onItemMouseClick   = this.itemMouseClick.bindAsEventListener(this);
        this.onItemFormFieldChange = this.syncFormData.bindAsEventListener(this);
        
        this.loader = new varienLoader(true);
        this.regionsUrl = '<?=$this->getRegionsUrl()?>';
        
        this.reloadItemList();
        
        for(var i=0,n=this.itemList.length; i<n; i++){
            if(this.itemList[i].id){
                this.addItemObservers(this.itemList[i]);
                this.initItem(this.itemList[i]);
            }
        }
        if($('add_new_address_button')){
            Event.observe('add_new_address_button', 'click', this.onNewAddressClick)
        }
        
        this.setActiveItem(this.itemList[0]);
        this.setAddressAsDefault();
        this.bindCountryRegionRelation();
    },
    reloadItemList : function(){
        this.itemList = $$('#address_list li');
        this.itemCount= this.itemList.length;
    },
    initItem : function(item){
        if($('form_'+item.id)){
            item.formBlock = $('form_'+item.id);
            Element.hide($('form_'+item.id));
            $('form_'+item.id).changeRelation = item;
            $('form_'+item.id).addressItem = item;
        }
    },
    addItemObservers : function(item){
        if(item.id){
            Event.observe(item, 'mouseover', this.onItemMouseOver);
            Event.observe(item, 'mouseout', this.onItemMouseOut);
            Event.observe(item, 'click', this.onItemMouseClick);
        }
    },
    addNewAddress : function(event){
        if(this.canCreateNewAddress){
            this.itemCount++;
            // create new form elements
            var newForm = document.createElement('div');
            newForm.id = 'form_'+this.baseItemId+this.itemCount;
            newForm.innerHTML = this.prepareTemplate(this.formTemplate.innerHTML);
            this.formContainer.appendChild(newForm);
            Element.hide(newForm);

            // create new item
            var newItem = document.createElement('li');
            newItem.isNewAddress = true; // set is new flag
            newItem.id = this.baseItemId+this.itemCount;
            newItem.innerHTML = this.prepareTemplate(this.itemTemplate.innerHTML)
            newItem.formBlock = newForm;
            this.itemContainer.appendChild(newItem);

            newForm.changeRelation = newItem;
            newForm.addressItem = newItem;
            this.addItemObservers(newItem);
            this.setActiveItem(newItem);
            customerForm.initFormElements();
            this.bindCountryRegionRelation(newForm.id);
        }
        this.reloadItemList();
        //Event.stop(event);
    },
    prepareTemplate : function(template){
        return template.replace(/<?=$_templatePrefix?>/g, '_item'+this.itemCount);
    },
    canCreateNewAddress : function(){
        return true;
    },
    itemMouseOver : function(event){
        var element = Event.findElement(event, 'li');
        Element.addClassName(element, 'over');
    },
    itemMouseOut : function(event){
        var element = Event.findElement(event, 'li');
        Element.removeClassName(element, 'over');
    },
    itemMouseClick : function(event){
        var element = Event.findElement(event, 'li'); // find top item
        var elem = Event.element(event); // exact element clicked
        if ( (elem.tagName == 'A') && ( elem.name == 'delete_address') ) {
            this.deleteAddress(element);
            Event.stop(event);
        } 
        else if(elem.tagName == 'INPUT') {
            this.setAddressAsDefault(element);
        }
        else {
            this.setActiveItem(element);
        }
    },
    setAddressAsDefault : function(){
        for(var i in this.itemList){
            if(this.itemList[i].id){
                var inputs = $(this.itemList[i].id).getElementsBySelector('input');
                var isActive = false;
                for(var j in inputs){
                    if(inputs[j].type=='radio' && inputs[j].checked){
                        isActive = true;
                    }
                }
                this.toggleDeleteButton(this.itemList[i], !isActive);
            }
        }
    },
    toggleDeleteButton : function(item, flag){
        if(flag){
            $(item).getElementsBySelector('.delete-address').each(Element.show);
        } else {
            $(item).getElementsBySelector('.delete-address').each(Element.hide);
        }
    },
    setActiveItem : function(item){
        if(this.activeItem){
            Element.removeClassName(this.activeItem, 'on');
            if($('form_'+this.activeItem.id)){
                Element.hide($('form_'+this.activeItem.id));
            }
        }
        Element.addClassName(item, 'on');
        if($('form_'+item.id)){
            $('form_'+item.id).changeRelation = item;
            $('form_'+item.id).addressItem = item;
            Element.show($('form_'+item.id));
            //new Effect.Appear($('form_'+item.id), {duration : 0.3 });
            //$('form_'+item.id).focus();
            this.addFieldChangeObserver($('form_'+item.id));
        }
        this.activeItem = item;
    },
    getFormContainerFields : function(container){
        var fields = $$('#'+container.id+' input', '#'+container.id+' select', '#'+container.id+' textarea');
        return fields;
    },
    addFieldChangeObserver : function(container){
        var fields = this.getFormContainerFields(container);
        for(var i in fields){
            Event.observe(fields[i], 'change', this.onItemFormFieldChange);
        }

    },
    syncFormData : function(event){
        var container = false;
        var elm = Event.element(event);
        while(elm.tagName != 'BODY') {
            if(elm.addressItem){
                container = elm;
            }
            elm = elm.parentNode;
        }
        if(container){
            var data = {};
            var fields = this.getFormContainerFields(container);
            for(var i in fields){
                if(fields[i].id){
                    var id = fields[i].id.replace(/\_item\d*$/, '');
                    id = id.replace(/\d*$/, '');
                    data[id] = fields[i].value;
                }
            }
            var itemContainer = container.addressItem.getElementsBySelector('address');
            if(itemContainer[0]){
                itemContainer[0].innerHTML = this.itemContentTemplate.evaluate(data);
            }
        }
    },
    deleteAddress : function(item){
        if(confirm('<?=__('Do you want delete this address?')?>')){
            if( item.isNewAddress){
                if ( this.activeItem == item ) this.formContainer.removeChild(item.formBlock);
            } else {
                if($('deleted_'+item.id)){
                    $('deleted_'+item.id).value = 1;
                }
            }
            if ( this.activeItem == item ) this.setActiveItem(this.itemList[0]);
            this.itemContainer.removeChild(item);  
            this.reloadItemList();          
        }
    },
    bindCountryRegionRelation : function(paerntId){
        if(paerntId){
            // todo: fix bug in IE
            var countryElements = $$('#'+paerntId+' .countries');
        }
        else{
            var countryElements = $$('.countries');
        }
        for(var i in countryElements){
            Event.observe(countryElements[i], 'change', this.reloadRegionField.bind(this));
        }
    },
    reloadRegionField : function(event){
        var countryElement = Event.element(event);
        if(countryElement.id){
            var regionElement  = $(countryElement.id.replace(/country_id/, 'region'));
            if(regionElement){
                this.regionElement = regionElement;
                var url = this.regionsUrl+'parent/'+countryElement.value;
                this.loader.load(url, {}, this.refreshRegionField.bind(this));
            }
        }
    },
    refreshRegionField : function(serverResponce){
        if(serverResponce){
            var data = eval('(' + serverResponce + ')');
            var value = this.regionElement.value;
            if (data.length) {
                var html = '<select name="'+this.regionElement.name+'" id="'+this.regionElement.id+'" class="'+this.regionElement.className+'" title="'+this.regionElement.title+'">';
                for (var i in data){
                    if(data[i].value) {
                        html+= '<option value="'+data[i].value+'"';
                        if(this.regionElement.value && (this.regionElement.value == data[i].value || this.regionElement.value == data[i].label)){
                            html+= ' selected';
                        }
                        html+='>'+data[i].label+'</option>';
                    }
                }
                html+= '</select>';
                new Insertion.Before(this.regionElement, html);
                Element.remove(this.regionElement);
            }
            else{
                var html = '<input type="text" name="'+this.regionElement.name+'" id="'+this.regionElement.id+'" class="'+this.regionElement.className+'" title="'+this.regionElement.title+'">';
                new Insertion.Before(this.regionElement, html);
                Element.remove(this.regionElement);
            }
        }
    }
}

customerAddresses = new addressesModel();
</script>
</td>
</tr></table>