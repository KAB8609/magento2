<!-- Addresses list -->
<div class="content-left-nav address-list">
	<h3>Customer Addresses</h3>
	<ul id="address_list">
	<?if($addressCollection->getSize()):?>
        <?foreach ($addressCollection as $_address):?>
		<li id="address_item_<?=$_address->getId()?>">
			<address>
			<?=$_address->toString("<b>{{firstname}} {{lastname}}</b><br/>{{street}}<br/>{{city}}, {{regionName}} {{postcode}}<br/>T: {{telephone}}")?>
			</address>			
			<?if(!$_address->isPrimary()):?>
			<strong class="button"><span><a href="#" name="delete_address"><?=__('delete address')?></a></span></strong>
			<?endif;?>
		</li>
		<?endforeach;?>
	<?else:?>
		<li id="new_item">
			<address>
			 New customer address
			</address>
			<strong class="button"><span><a href="#"><?=__('delete address')?></a></span></strong>
		</li>
	<?endif;?>
	</ul>
</div>
<!-- Addresses forms -->
<div class="entry-edit" id="address_form_container">
	<?if($addressCollection->getSize()):?>
        <?foreach ($addressCollection as $_address):?>
        <div id="form_address_item_<?=$_address->getId()?>">
        <?
            $form->setValues($_address->getData())
                ->setHtmlIdPrefix($_address->getId())
                ->setFieldNamePrefix('address['.$_address->getId().']')
        ?>
        <?foreach ($form->getElements() as $_element):?>
            <?=$this->drawElement($_element)?>
        <?endforeach;?>
        </div>
        <?endforeach;?>
    <?else:?>
    <div id="form_new_item">
    <?$form->setFieldNamePrefix('address[new]')?>
    <?foreach ($form->getElements() as $_element):?>
        <?=$this->drawElement($_element)?>
    <?endforeach;?>
    </div>
    <?endif;?>
</div>


<!-- Template for adding address item to list -->
<?$_templatePrefix = '_template_'?>
<div id="address_item_template" class="no-display template">
	<address>New address</address>
	<strong class="button"><span><a href="#" name="delete_address"><?=__('delete address')?></a></span></strong>
</div>

<!-- Address form template -->
<div id="address_form_template" class="no-display template">
<?
    // Set form template elements prefix
    $form->setHtmlIdPrefix($_templatePrefix)
        ->setValues(array())
        ->setFieldNamePrefix('address['.$_templatePrefix.']');
?>
<?foreach ($form->getElements() as $_element):?>
    <?=$this->drawElement($_element)?>
<?endforeach;?>

</div>


<!-- -->
<script type="text/javascript">
var addressesModel = Class.create();
addressesModel.prototype = {
    initialize : function() {
        this.activeItem   = null;
        this.itemTemplate = $('address_item_template');
        this.formTemplate = $('address_form_template');
        this.itemList     = $$('#address_list li');
        this.itemContainer= $('address_list');
        this.formContainer= $('address_form_container');
        this.itemCount    = this.itemList.length;
        this.baseItemId   = 'new_item';
        this.itemContentTemplate = new Template('<b>#{firstname} #{lastname}</b><br/>#{street}<br/>#{city}, #{regionName} #{postcode}<br/>T: #{telephone}');
        
        this.onNewAddressClick  = this.addNewAddress.bindAsEventListener(this);
        this.onItemMouseOver    = this.itemMouseOver.bindAsEventListener(this);
        this.onItemMouseOut     = this.itemMouseOut.bindAsEventListener(this);
        this.onItemMouseClick   = this.itemMouseClick.bindAsEventListener(this);
        this.onItemFormFieldChange = this.syncFormData.bindAsEventListener(this);
        this.onItemDelete       = this.deleteAddress.bindAsEventListener(this);
        
        for(var i in this.itemList){
            this.addItemObservers(this.itemList[i]);
            this.initItem(this.itemList[i]);
        }
        if($('add_new_address_button')){
            Event.observe('add_new_address_button', 'click', this.onNewAddressClick)
        }
        
        this.setActiveItem(this.itemList[0]);
    },
    initItem : function(item){
        if($('form_'+item.id)){
            item.formBlock = $('form_'+item.id);
            Element.hide($('form_'+item.id));
            $('form_'+item.id).changeRelation = item;
            $('form_'+item.id).addressItem = item;
        }        
    },    
    addItemObservers : function(item){
        if(item.id){
            Event.observe(item, 'mouseover', this.onItemMouseOver);
            Event.observe(item, 'mouseout', this.onItemMouseOut);
            Event.observe(item, 'click', this.onItemDelete);
            Event.observe(item, 'click', this.onItemMouseClick);
        }
    },
    addNewAddress : function(event){
        if(this.canCreateNewAddress){
            this.itemCount++;
            // create new form elements
            var newForm = document.createElement('div');
            newForm.id = 'form_'+this.baseItemId+this.itemCount;
            newForm.innerHTML = this.prepareTemplate(this.formTemplate.innerHTML);
            this.formContainer.appendChild(newForm);
            Element.hide(newForm);
            
            // create new item
            var newItem = document.createElement('li');
            newItem.isNewAddress = true; // set is new flag
            newItem.id = this.baseItemId+this.itemCount;
            newItem.innerHTML = this.prepareTemplate(this.itemTemplate.innerHTML)
            newItem.formBlock = newForm;
            this.itemContainer.appendChild(newItem);
            
            newForm.changeRelation = newItem;
            newForm.addressItem = newItem;
            this.addItemObservers(newItem);
            this.setActiveItem(newItem);
            customerForm.initFormElements();
        }
        Event.stop(event);
    },
    prepareTemplate : function(template){
        return template.replace(/<?=$_templatePrefix?>/g, '_item'+this.itemCount);
    },
    canCreateNewAddress : function(){
        return true;
    },
    itemMouseOver : function(event){
        var element = Event.findElement(event, 'li');
        Element.addClassName(element, 'over');
    },
    itemMouseOut : function(event){
        var element = Event.findElement(event, 'li');
        Element.removeClassName(element, 'over');
    },
    itemMouseClick : function(event){
        var element = Event.findElement(event, 'li');
        this.setActiveItem(element)
    },
    setActiveItem : function(item){
        if(this.activeItem){
            Element.removeClassName(this.activeItem, 'on');
            if($('form_'+this.activeItem.id)){
                Element.hide($('form_'+this.activeItem.id));
            }
        }
        Element.addClassName(item, 'on');
        if($('form_'+item.id)){
            $('form_'+item.id).changeRelation = item;
            $('form_'+item.id).addressItem = item;
            Element.show($('form_'+item.id));
            //new Effect.Appear($('form_'+item.id), {duration : 0.3 });
            $('form_'+item.id).focus();
            this.addFieldChangeObserver($('form_'+item.id));
        }
        this.activeItem = item;
    },
    getFormContainerFields : function(container){
        var fields = $$('#'+container.id+' input', '#'+container.id+' select', '#'+container.id+' textarea');
        return fields;
    },
    addFieldChangeObserver : function(container){
        var fields = this.getFormContainerFields(container);
        for(var i in fields){
            Event.observe(fields[i], 'change', this.onItemFormFieldChange);
        }
        
    },
    syncFormData : function(event){
        var container = false;
        var elm = Event.element(event);
        while(elm.tagName != 'BODY') {
            if(elm.addressItem){
                container = elm;
            }
            elm = elm.parentNode;
        }
        if(container){
            var data = {};
            var fields = this.getFormContainerFields(container);
            for(var i in fields){
                if(fields[i].id){
                    var id = fields[i].id.replace(/\_item\d*$/, '');
                    id = id.replace(/\d*$/, '');
                    data[id] = fields[i].value;
                }
            }
            var itemContainer = container.addressItem.getElementsBySelector('address');
            if(itemContainer[0]){
                itemContainer[0].innerHTML = this.itemContentTemplate.evaluate(data);
            }
        }
    },
    deleteAddress : function(event){
        var deleteLink = Event.findElement(event, 'a');
        if(deleteLink && deleteLink.name=='delete_address'){
            var item = Event.findElement(event, 'li');
            if(item.isNewAddress){
                this.formContainer.removeChild(item.formBlock);
            }
            else{
                alert(123);
            }
            this.itemContainer.removeChild(item);
        }
        this.setActiveItem(this.itemList[0]);
        Event.stop(event);
    }
}
customerAddresses = new addressesModel();
</script>