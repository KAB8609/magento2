<!-- -->
<?$_templatePrefix = '_template_'?>
<div id="address_item_template" class="no-display template">
	<address>New address</address>
</div>

<!-- -->
<div id="address_form_template" class="no-display template">
<?$form->setHtmlIdPrefix($_templatePrefix)?>
<?foreach ($form->getElements() as $_element):?>
    <?=$this->drawElement($_element)?>
<?endforeach;?>
</div>

<!-- -->
<div class="address-list" style="margin-right:20px">
	<h3>Customer Addresses</h3>
	<ul id="address_list">
	<?if($addressCollection->getSize()):?>
        <?foreach ($addressCollection as $_address)?>
		<li>
			<address>Minu Oh<br/>
				3402 Motor Ave Suite B<br/>
				Los Angeles, CA 90034<br/>
				T | 310-123-1234
			</address>
		</li>
		<??>
	<?else:?>
		<li id="new_item">
			<address>
			 New customer address
			</address>
		</li>
	<?endif;?>
	</ul>
</div>
<?$form->setHtmlIdPrefix('')?>
<div class="entry-edit" id="address_form_container">
    <div id="form_new_item">
    <?foreach ($form->getElements() as $_element):?>
        <?=$this->drawElement($_element)?>
    <?endforeach;?>
    </div>
</div>

<!-- -->
<script type="text/javascript">
var addressesModel = Class.create();
addressesModel.prototype = {
    initialize : function() {
        this.activeItem   = null;
        this.itemTemplate = $('address_item_template');
        this.formTemplate = $('address_form_template');
        this.itemList     = $$('#address_list li');
        this.itemContainer= $('address_list');
        this.formContainer= $('address_form_container');
        this.itemCount    = this.itemList.length;
        this.baseItemId   = 'address_item';
        this.itemContentTemplate = new Template('{firstname} {lastname}');
        
        this.onNewAddressClick  = this.addNewAddress.bindAsEventListener(this);
        this.onItemMouseOver    = this.itemMouseOver.bindAsEventListener(this);
        this.onItemMouseOut     = this.itemMouseOut.bindAsEventListener(this);
        this.onItemMouseClick   = this.itemMouseClick.bindAsEventListener(this);
        this.onItemFormFieldChange = this.syncFormData.bindAsEventListener(this);
        
        for(var i in this.itemList){
            this.addItemObservers(this.itemList[i]);
        }
        if($('add_new_address_button')){
            Event.observe('add_new_address_button', 'click', this.onNewAddressClick)
        }
        
        this.setActiveItem(this.itemList[0]);
    },
    addItemObservers : function(item){
        Event.observe(item, 'mouseover', this.onItemMouseOver);
        Event.observe(item, 'mouseout', this.onItemMouseOut);
        Event.observe(item, 'click', this.onItemMouseClick);
    },
    addNewAddress : function(event){
        if(this.canCreateNewAddress){
            this.itemCount++;

            var newForm = document.createElement('div');
            newForm.id = 'form_'+this.baseItemId+this.itemCount;
            newForm.innerHTML = this.prepareTemplate(this.formTemplate.innerHTML);
            this.formContainer.appendChild(newForm);
            Element.hide(newForm);
            
            var newItem = document.createElement('li');
            newItem.id = this.baseItemId+this.itemCount;
            newItem.innerHTML = this.prepareTemplate(this.itemTemplate.innerHTML)
            this.itemContainer.appendChild(newItem);
            
            newForm.changeRelation = newItem;
            this.addItemObservers(newItem);
            this.setActiveItem(newItem);
            customerForm.initFormElements();
        }
        Event.stop(event);
    },
    prepareTemplate : function(template){
        return template.replace(/<?=$_templatePrefix?>/g, this.itemCount);
    },
    canCreateNewAddress : function(){
        return true;
    },
    itemMouseOver : function(event){
        var element = Event.findElement(event, 'li');
        Element.addClassName(element, 'over');
    },
    itemMouseOut : function(event){
        var element = Event.findElement(event, 'li');
        Element.removeClassName(element, 'over');
    },
    itemMouseClick : function(event){
        var element = Event.findElement(event, 'li');
        this.setActiveItem(element)
    },
    setActiveItem : function(item){
        if(this.activeItem){
            Element.removeClassName(this.activeItem, 'on');
            if($('form_'+this.activeItem.id)){
                Element.hide($('form_'+this.activeItem.id));
            }
        }
        Element.addClassName(item, 'on');
        if($('form_'+item.id)){
            $('form_'+item.id).changeRelation = item;
            Element.show($('form_'+item.id));
        }
        this.activeItem = item;
    },
    syncFormData : function(event){
        
    }
}
customerAddresses = new addressesModel();
</script>