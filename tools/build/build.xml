<?xml version="1.0" encoding="UTF-8"?>
<project name="magento">
    <property name="dir.src" value="${teamcity.build.checkoutDir}"/>
    <property name="dir.build" value="${dir.src}/build"/>
    <property name="dir.artifacts" value="${dir.src}/artifacts"/>
    <property name="dir.reports" value="${dir.artifacts}/reports"/>
    <property name="dir.docs" value="${dir.artifacts}/docs"/>
    <property name="dir.websites" value="${dir.src}/websites"/>

    <!-- SVN User credentials -->
    <property name="svn.user" value="teamcity"/>
    <property name="svn.password" value="JbnJ1lm53V3"/>

    <target name="install" description="Installing Magento instance.">
        <exec executable="/bin/sh" failonerror="true">
            <arg value="install.sh"/>
            <arg value="${teamcity.buildConfName}"/>
            <arg value="${build.number}"/>
        </exec>
    </target>

    <target name="clean" description="Removes all data which can be created by build script.">
        <delete dir="${dir.artifacts}"/>
        <delete dir="${dir.websites}"/>
    </target>

    <target name="prepare" depends="clean" description="prepare basic (clean) ENV for instance.">
        <mkdir dir="${dir.websites}"/>
        <chmod dir="${dir.websites}" perm="777"/>

        <chmod dir="${dir.src}/media" perm="777"/>
        <chmod dir="${dir.src}/var" perm="777"/>
        <chmod dir="${dir.src}/app/etc" perm="777"/>

        <mkdir dir="${dir.reports}"/>
        <mkdir dir="${dir.docs}"/>

        <!--DB name problem should use script-->
        <exec executable="/bin/sh" failonerror="true">
            <arg value="prepare.sh"/>
            <arg value="${teamcity.buildConfName}"/>
            <arg value="${build.number}"/>
        </exec>
    </target>

    <target name="copy-previous-env" depends="prepare"
            description="Prepare ENV (DB, websites folder) from previous instance.">
        <exec executable="/bin/sh" failonerror="true">
            <arg value="prepare-previous.sh"/>
            <arg value="${teamcity.buildConfName}"/>
            <arg value="${build.number}"/>
            <arg value="${teamcity.buildType.id}"/>
        </exec>
    </target>

    <target name="prepare-sample-data-ce" depends="prepare" description="Prepare ENV with sample data for CE instance.">
        <exec executable="/bin/sh" failonerror="true">
            <arg value="prepare-sample-data.sh"/>
            <arg value="${teamcity.buildConfName}"/>
            <arg value="${build.number}"/>
        </exec>
    </target>

    <target name="prepare-sample-data-ee" depends="prepare"
            description="Prepare ENV with sample data for EE instance."/>
    <target name="prepare-sample-data-pe" depends="prepare"
            description="Prepare ENV with sample data for PE instance."/>

    <target name="brutetest" description="Basic validation for Magento installation.">
        <exec executable="/bin/sh" failonerror="true">
            <arg value="brutetest.sh"/>
            <arg value="${teamcity.buildConfName}"/>
            <arg value="${build.number}"/>
        </exec>
    </target>

    <target name="update-current" description="Update 'current' symlink and successful in scope of build name.">
        <exec executable="/bin/sh" failonerror="true">
            <arg value="finalize.sh"/>
            <arg value="${teamcity.buildConfName}"/>
            <arg value="${build.number}"/>
            <arg value="${teamcity.buildType.id}"/>
        </exec>
    </target>

    <target name="archive-builds" description="Arcvhive all builds in scope of build name.">
        <exec executable="/bin/sh" failonerror="false">
            <arg value="archive.sh"/>
            <arg value="${teamcity.buildConfName}"/>
            <arg value="${build.number}"/>
        </exec>
    </target>

    <!-- targets to clean current checkout for specific build type -->
    <target name="prepare-trunk" description="Prepare trunk checkout.">
        <copy file="XEnterprise_Enabler.xml" tofile="${dir.src}/app/etc/modules/XEnterprise_Enabler.xml"
              failonerror="true"/>
    </target>

    <target name="prepare-enterprise" description="Prepare enterprise edution checkout.">
        <property name="dir.staging" value="${dir.src}/staging"/>
        <mkdir dir="${dir.staging}"/>
        <chmod dir="${dir.staging}" perm="777"/>
    </target>

    <target name="prepare-professional" description="Prepare professional edition checkout.">
        <antcall target="prepare-enterprise"/>
    </target>

    <target name="clean-unreleased" description="Cleaning checkout from unreleased things">
        <exec executable="svn" failonerror="false" dir="${dir.src}">
            <arg value="rm app/code/core/Mage/XmlConnect"/>
        </exec>
        <exec executable="svn" failonerror="false" dir="${dir.src}">
            <arg value="rm app/design/frontend/base/default/layout/xmlconnect.xml"/>
        </exec>
        <exec executable="svn" failonerror="false" dir="${dir.src}">
            <arg value="rm app/design/frontend/enterprise/default/layout/xmlconnect.xml"/>
        </exec>
        <exec executable="svn" failonerror="false" dir="${dir.src}">
            <arg value="rm app/design/adminhtml/default/default/template/xmlconnect"/>
        </exec>
        <exec executable="svn" failonerror="false" dir="${dir.src}">
            <arg value="rm app/design/adminhtml/default/default/layout/xmlconnect.xml"/>
        </exec>
        <exec executable="svn" failonerror="false" dir="${dir.src}">
            <arg value="rm app/etc/modules/Mage_XmlConnect.xml"/>
        </exec>
        <exec executable="svn" failonerror="false" dir="${dir.src}">
            <arg value="rm app/locale/en_US/Mage_XmlConnect.csv"/>
        </exec>
        <exec executable="svn" failonerror="false" dir="${dir.src}">
            <arg value="rm skin/frontend/base/default/images/xmlconnect"/>
        </exec>
        <exec executable="svn" failonerror="false" dir="${dir.src}">
            <arg value="rm skin/frontend/enterprise/default/images/xmlconnect"/>
        </exec>
        <exec executable="svn" failonerror="false" dir="${dir.src}">
            <arg value="rm skin/frontend/default/default/images/xmlconnect"/>
        </exec>
        <exec executable="svn" failonerror="false" dir="${dir.src}">
            <arg value="rm skin/adminhtml/default/default/xmlconnect"/>
        </exec>
        <exec executable="svn" failonerror="false" dir="${dir.src}">
            <arg value="rm skin/adminhtml/default/default/images/xmlconnect"/>
        </exec>
        <exec executable="svn" failonerror="false" dir="${dir.src}">
            <arg value="rm skin/adminhtml/default/enterprise/images/xmlconnect_tab.png"/>
        </exec>
        <exec executable="svn" failonerror="false" dir="${dir.src}">
            <arg value="rm media/xmlconnect"/>
        </exec>
        <exec executable="svn" failonerror="false" dir="${dir.src}">
            <arg value="rm js/jscolor"/>
        </exec>
        <exec executable="svn" failonerror="false" dir="${dir.src}">
            <arg value="rm app/code/core/Enterprise/SalesPool"/>
        </exec>
        <exec executable="svn" failonerror="false" dir="${dir.src}">
            <arg value="rm app/design/frontend/enterprise/default/template/salespool"/>
        </exec>
        <exec executable="svn" failonerror="false" dir="${dir.src}">
            <arg value="rm app/design/frontend/enterprise/default/layout/salespool.xml"/>
        </exec>
        <exec executable="svn" failonerror="false" dir="${dir.src}">
            <arg value="rm app/design/adminhtml/default/default/template/enterprise/salespool"/>
        </exec>
        <exec executable="svn" failonerror="false" dir="${dir.src}">
            <arg value="rm app/design/adminhtml/default/default/layout/enterprise/salespool.xml"/>
        </exec>
        <exec executable="svn" failonerror="false" dir="${dir.src}">
            <arg value="rm app/etc/modules/Enterprise_SalesPool.xml"/>
        </exec>
    </target>

    <target name="clean-ce" depends="clean-unreleased" description="Clean checkout from specific stuff for CE."/>

    <target name="clean-ee" depends="clean-unreleased" description="Clean checkout from specific stuff for EE.">
        <exec executable="svn" failonerror="true" dir="${dir.src}">
            <arg value="rm app/design/frontend/pro"/>
        </exec>
        <exec executable="svn" failonerror="true" dir="${dir.src}">
            <arg value="rm app/design/install/default/pro"/>
        </exec>
        <exec executable="svn" failonerror="true" dir="${dir.src}">
            <arg value="rm skin/adminhtml/default/pro"/>
        </exec>
        <exec executable="svn" failonerror="true" dir="${dir.src}">
            <arg value="rm skin/frontend/pro"/>
        </exec>
        <exec executable="svn" failonerror="true" dir="${dir.src}">
            <arg value="rm skin/install/default/pro"/>
        </exec>
        <exec executable="svn" failonerror="true" dir="${dir.src}">
            <arg value="rm errors/pro"/>
        </exec>
        <exec executable="svn" failonerror="true" dir="${dir.src}">
            <arg value="rm downloader/template/professional"/>
        </exec>
    </target>

    <target name="clean-pe" depends="clean-unreleased" description="Clean checkout from specific stuff for PE."/>

    <target name="phpcpd" description="CPD report.">
        <exec dir="${dir.src}" executable="phpcpd" failonerror="false">
            <arg line="--log-pmd '${dir.reports}/cpd-report.xml'
                        --exclude lib/Zend
                        --exclude lib/PEAR
                        --exclude lib/phpseclib
                        --exclude lib/googlecheckout
                        --exclude downloader/lib
                        --exclude lib/Apache
                        --exclude tools
                        --exclude tests
                        --min-tokens 50
                        --min-lines 3
                        ."/>
        </exec>
        <xslt in="${dir.reports}/cpd-report.xml" style="${dir.build}/cpd-report.xlst"
              out="${dir.reports}/cpd-report.html"/>
        <echo>##teamcity[publishArtifacts '${dir.reports}/cpd-report.html']</echo>
    </target>

    <target name="pdepend" description="Dependencies report.">
        <exec dir="${dir.src}" executable="pdepend" failonerror="false">
            <arg line="--jdepend-xml='${dir.reports}/depend.xml'
                        --jdepend-chart='${dir.reports}/depend.svg'
                        --overview-pyramid='${dir.reports}/depend-pyramid.svg'
                        --summary-xml='${dir.reports}/depend-summary.xml'
                        --ignore='lib/Zend,lib/PEAR,lib/phpseclib,lib/googlecheckout,downloader/lib,lib/Apache,tools,tests'
                        --optimization=best
                        . "/>
        </exec>
        <xslt in="${dir.reports}/depend.xml" style="${dir.build}/depend.xsl" out="${dir.reports}/depend.html"/>
        <copy file="depend-charts.html" tofile="${dir.reports}/depend-charts.html" failonerror="true"/>
        <echo>##teamcity[publishArtifacts '${dir.reports}/depend-charts.html']</echo>
        <echo>##teamcity[publishArtifacts '${dir.reports}/depend.html']</echo>
        <echo>##teamcity[publishArtifacts '${dir.reports}/*.svg']</echo>
    </target>

    <target name="phpmd" description="PMD report.">
        <exec dir="${dir.src}" executable="phpmd" failonerror="false">
            <arg line=". xml codesize,unusedcode,naming
                        --reportfile ${dir.reports}/pmd-report.xml
                        --ignore lib/Zend,lib/PEAR,lib/phpseclib,lib/googlecheckout,downloader/lib,lib/Apache,tools,tests"/>
        </exec>
        <xslt in="${dir.reports}/pmd-report.xml" style="${dir.build}/pmd-report.xlst"
              out="${dir.reports}/pmd-report.html"/>
        <echo>##teamcity[importData type='pmd' path='${dir.reports}/pmd-report.xml']</echo>
        <echo>##teamcity[publishArtifacts '${dir.reports}/pmd-report.html']</echo>
    </target>

    <target name="phpunit" description="Run All PHPunit Tests">
        <exec dir="${dir.src}" executable="phpunit" failonerror="true">
            <arg line="--log-junit ${dir.reports}/phpunit.xml tests/AllTests.php"/>
            <!--
                                   overage-clover ${dir.reports}/clover.xml
                                   coverage-html ${dir.reports}/coverage"/>
            -->
        </exec>
        <echo>##teamcity[importData type='junit' path='${dir.reports}/phpunit.xml']</echo>
    </target>

    <target name="code-analyze-in-parallel" description="Gather code stats in parallel mode.">
        <parallel>
            <antcall target="phpmd"/>
            <antcall target="phpcpd"/>
            <antcall target="pdepend"/>
        </parallel>
    </target>

    <target name="docs-in-parallel" description="Gather project dodumentation in parallel mode.">
        <parallel>
            <antcall target="phpdoc"/>
            <antcall target="dbschema"/>
        </parallel>
    </target>

    <target name="phpdoc" description="Generate phpDoc files.">
        <property name="phpdoc" value="${teamcity.buildConfName}-${build.number}-phpdoc"/>

        <exec dir="${dir.src}" executable="phpdoc" failonerror="true">
            <arg line="-d lib/Varien -t ${dir.docs}/phpdoc/Varien -o HTML:frames:default -ti 'Varien Lib Documentation (phpdoc)' -q"/>
        </exec>
        <exec dir="${dir.src}" executable="phpdoc" failonerror="true">
            <arg line="-d app/code/core/Mage,app/code/core/Enterprise -t ${dir.docs}/phpdoc/ -o HTML:frames:default -ti 'Magento Documentation (phpdoc)' -q"/>
        </exec>
        <exec executable="./phpdocfix.php" failonerror="true">
            <arg line="${dir.docs}/phpdoc/ ce"/>
        </exec>

        <tar destfile="${dir.docs}/${phpdoc}.tar" basedir="${dir.docs}/phpdoc"/>
        <gzip destfile="${dir.docs}/${phpdoc}.tar.gz" src="${dir.docs}/${phpdoc}.tar"/>
        <delete file="${dir.docs}/${phpdoc}.tar"/>

        <echo>##teamcity[publishArtifacts '${dir.docs}/${phpdoc}.tar.gz']</echo>
    </target>

    <target name="make-tag" description="Create tag for this build."/>
    <target name="update-branch" description="Merge all available revisions from other branches."/>

    <target name="build-nightly" description="Installs Magento nightly build."
            depends="copy-previous-env, install, brutetest"/>
    <target name="build" description="Installs Magento clean build." depends="prepare, install, brutetest"/>

    <target name="branch-sync" description="Sync Branches.">
        <exec dir="${dir.src}" executable="svn" failonerror="true">
            <arg line="co ${vcsroot.branch.url} --quiet --username ${svn.user} --password ${svn.password} --no-auth-cache ."/>
        </exec>
        <exec dir="${dir.src}" executable="svn" failonerror="true">
            <arg line="revert -R --quiet --username ${usr.user} --password ${svn.password} --no-auth-cache ."/>
        </exec>
        <exec executable="./update-branch.php" failonerror="true">
            <arg line="${dir.src} ${svn.user} ${svn.password}"/>
        </exec>
    </target>

    <target name="branch-sync-mmdb" description="Sync Branches (MMDB solver).">
        <exec dir="${dir.src}" executable="svn" failonerror="true">
            <arg line="co ${vcsroot.branch.url} --quiet --username ${svn.user} --password ${svn.password} --no-auth-cache ."/>
        </exec>
        <exec dir="${dir.src}" executable="svn" failonerror="true">
            <arg line="revert -R --quiet --username ${usr.user} --password ${svn.password} --no-auth-cache ."/>
        </exec>
        <exec executable="./update-branch.php" failonerror="true">
            <arg line="${dir.src} ${svn.user} ${svn.password} mmdb-resolver.php"/>
        </exec>
    </target>

    <target name="dbschema" description="Generate DB schema documentation.">
        <exec executable="/bin/sh" failonerror="false">
            <arg value="schema_generator"/>
            <arg value="${teamcity.buildConfName}"/>
            <arg value="${build.number}"/>
            <arg value="${dir.docs}/dbschema"/>
        </exec>
        <!-- tar -->
        <!-- publish artifact -->
    </target>

    <target name="load-test-controller">
        <exec executable="svn" failonerror="true">
            <arg line="export --quiet --username ${svn.user} --password ${svn.password} --no-auth-cache http://svn.magentocommerce.com/svn/magento/base/magento/branches/hperf-tools/load-testing/magento/app/code/local/Mage/Checkout/controllers/OnetestController.php ${dir.src}/app/code/core/Mage/Checkout/controllers/OnetestController.php"/>
        </exec>
    </target>

    <target name="load-test">
        <exec executable="/bin/sh" failonerror="true">
            <arg value="siege.sh"/>
            <arg value="trunk-sample-data"/>
            <arg value="${build.number}"/>
        </exec>
    </target>

    <!-- MMDB -->

    <target name="prepare-mmdb" depends="clean" description="Prepare basic (clean) ENV for instance.">
        <chmod dir="${dir.src}/media" perm="777"/>
        <chmod dir="${dir.src}/var" perm="777"/>
        <chmod dir="${dir.src}/app/etc" perm="777"/>

        <mkdir dir="${dir.reports}"/>
        <mkdir dir="${dir.docs}"/>

        <!--DB name problem should use script-->
        <exec executable="/bin/sh" failonerror="true">
            <arg value="mmdb/prepare.sh"/>
            <arg value="${teamcity.buildConfName}"/>
            <arg value="${build.number}"/>
            <arg value="${db.model}"/>
        </exec>
    </target>

    <target name="install-mmdb" description="Installing Magento instance.">
        <exec executable="/bin/sh" failonerror="true">
            <arg value="mmdb/install.sh"/>
            <arg value="${teamcity.buildConfName}"/>
            <arg value="${build.number}"/>
            <arg value="${db.model}"/>
        </exec>
    </target>

    <target name="update-mmdb-current" description="Update 'current' symlink and successful in scope of build name.">
        <exec executable="/bin/sh" failonerror="true">
            <arg value="mmdb/current.sh"/>
            <arg value="${teamcity.buildConfName}"/>
            <arg value="${build.number}"/>
            <arg value="${db.model}"/>
            <arg value="${teamcity.buildType.id}"/>
        </exec>
    </target>
</project>
