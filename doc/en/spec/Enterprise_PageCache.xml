<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
    <title>Enterprise_PageCache module</title>

    <section>
        <title>Introduction</title>

        <para>In general, caching improves response time and reduces server load. </para>

        <para>Full Page Cache oriented to cache content after generation and use it for processing same request from
        other visitors. All users can be classified as not session related users (browsing site) and session related
        users (interaction with the store like compare products, add products to the card, registered customers). Page
        can be cached for specific users. First group of users cowered by current implementation are not session related
        users. After user doing some action (add product to cart) "<emphasis role="bold">NO_CACHE</emphasis>" cookie is
        defined for him. All requests with such cookie don't use full page cache.</para>

        <para>Page content cached for specific identifier that contain</para>

        <itemizedlist>
            <listitem>
                <para>Host name</para>
            </listitem>

            <listitem>
                <para>Request URI</para>
            </listitem>

            <listitem>
                <para>"store" cookie value</para>
            </listitem>

            <listitem>
                <para>"currency" cookie value</para>
            </listitem>
        </itemizedlist>

        <para>"<emphasis role="bold">NO_CACHE</emphasis>" cookie automatically will be set after POST request or after
        wisting specific action (add to cart, add to compare list).</para>

        <para><note>
                <para>Category page with active event won't be cached</para>
            </note></para>
    </section>

    <section>
        <title>Configuration</title>

        <para>No reason to cache all pages. We can determine pages types which can be cached on configuration level.
        Bellow is example </para>

        <programlisting language="xml">&lt;config&gt;
    &lt;frontend&gt;        
        &lt;cache&gt;
            &lt;requests&gt;
                &lt;cms&gt;enterprise_pagecache/processor_default&lt;/cms&gt;
                &lt;catalog&gt;&lt;category&gt;&lt;view&gt;enterprise_pagecache/processor_category&lt;/view&gt;&lt;/category&gt;&lt;/catalog&gt;
                &lt;catalog&gt;&lt;product&gt;&lt;view&gt;enterprise_pagecache/processor_default&lt;/view&gt;&lt;/product&gt;&lt;/catalog&gt;
            &lt;/requests&gt;
        &lt;/cache&gt;
    &lt;/frontend&gt;
&lt;/config&gt;
</programlisting>

        <para>frontend/cache/requests node contain information about page processors for specific
        frontname/controller/action. Default processor is enterprise_pagecache/processor_default.</para>

        <para>Processor can be declared for front name (such declaration applicable to all controllers and actions), for
        specific controller (all actions of this controllers will be applicable) and for specific action.</para>

        <para>Request processor is responsible for </para>

        <itemizedlist>
            <listitem>
                <para>page URI generation (based on request uri and environment variables -
                <emphasis>getRequestUri</emphasis> method)</para>
            </listitem>

            <listitem>
                <para>checking that page can be saved to cache (<emphasis>allowCache</emphasis> method)</para>
            </listitem>

            <listitem>
                <para>preparing page content before saving to cache storage (<emphasis>prepareContent</emphasis>
                method)</para>
            </listitem>
        </itemizedlist>

        <para></para>
    </section>

    <section>
        <title>Administrator Configuration</title>

        <para>Full page cache help improve performance a lot, but major issue is cache storage size. Depends on specific
        magento issue admin can decide how to configure it. Full Page Cache configuration located in System &gt;
        Configuration &gt; System &gt; Full Page Cache settings fieldset.</para>

        <para>First option is <emphasis role="bold">Cache Lifetime</emphasis>. It determine when cached page will be
        invalidated. If you doing changes in your catalog very often - better to use default value of this option (1440
        minutes, it is 24 hours). If not - you can use 1 month (43200 minutes).</para>

        <para>Depend on your catalog size and page views statistic <emphasis role="bold">Maximum Allowed Page
        Depth</emphasis> can be terminated. Idea is to limit allowed request parameters count. Let say you have category
        view page with layered navigation enabled. Actually for browsing content of this page you will have a lot of
        options like: pager, layered navigation filters, products list ordering direction, view mode etc. But 70% of
        your visitors are using no more than one/two navigation parameters (ex.: apply filter by color and order by
        price). In this case have sense specify allowed depth as "2"</para>

        <para>Each allowed currency represent another variant of same page. <emphasis role="bold">Enable Cache For Not
        Default Currencies</emphasis> will allow to cache page with for different selected currencies. It also increase
        cache storage size.</para>
    </section>

    <section>
        <title> Cache Auto Generation</title>

        <para>Optionally pages cache auto generation can be enabled (System &gt; Configuration &gt; System &gt; Full
        Page Cache Auto Generation <emphasis role="bold">Enable Pages Cache Auto Generation</emphasis> field). </para>

        <para>Based on this option system will instantiate auto generation process every night at 3 AM. Cron job can be
        rescheduled in config.xml file.</para>

        <para><programlisting language="xml">&lt;config&gt;
    &lt;crontab&gt;
        &lt;jobs&gt;
            &lt;enterprise_page_cache_crawler&gt;
                &lt;schedule&gt;&lt;cron_expr&gt;0 3 * * *&lt;/cron_expr&gt;&lt;/schedule&gt;
                &lt;run&gt;&lt;model&gt;enterprise_pagecache/crawler::crawl&lt;/model&gt;&lt;/run&gt;
            &lt;/enterprise_page_cache_crawler&gt;
        &lt;/jobs&gt;
    &lt;/crontab&gt;
&lt;/config&gt;</programlisting>Enterprise_PageCache_Model_Crawler class contain page crawling logic. It go throw all
        registered in core_url_rewrite table urls and doing page fetch (emulate first visit).</para>

        <para>Crawler can work in multiple threads mode (<emphasis role="bold">Crawler Threads Number</emphasis>)
        option. Then more threads will be used then faster all pages will be cached. But need be carefull with that -
        depends from your server configuration and hardware we recommend to use from 1 to 5 parallel threads.</para>

        <para>Also crawler can generate pages with all available on frontent currencies.</para>
    </section>

    <section>
        <title>Cache Control on View Level</title>

        <para>Removing dynamic content from cached page and adding "NO_CACHE" cookie declaration on cached page.</para>

        <para><programlisting language="xml">&lt;layout&gt;
    &lt;default&gt;
        &lt;reference name="right.poll"&gt;
            &lt;action method="setFrameTags"&gt;&lt;start&gt;!--[POLL--&lt;/start&gt;&lt;end&gt;!--POLL]--&lt;/end&gt;&lt;/action&gt;
        &lt;/reference&gt;
    &lt;/default&gt;
    &lt;catalog_product_view&gt;
        &lt;reference name="content"&gt;
            &lt;block type="core/template" name="pagecache.cookie" template="pagecache/cookie.phtml"/&gt;
        &lt;/reference&gt;
    &lt;/catalog_product_view&gt;
&lt;/layout&gt;

</programlisting></para>
    </section>
</chapter>
